<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ness</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nessoffice.github.io/"/>
  <updated>2019-08-07T02:39:33.186Z</updated>
  <id>https://nessoffice.github.io/</id>
  
  <author>
    <name>Ness</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【通天之塔】记tetris的开发，借之略谈工程设计及管理的部分范式</title>
    <link href="https://nessoffice.github.io/2019/08/07/Project-Tetris/"/>
    <id>https://nessoffice.github.io/2019/08/07/Project-Tetris/</id>
    <published>2019-08-06T16:00:01.000Z</published>
    <updated>2019-08-07T02:39:33.186Z</updated>
    
    <content type="html"><![CDATA[<p>切身体验，何谓人月神话。同时享受，心态雪崩的感觉……</p><p>（更新于2019-08-07）</p><a id="more"></a><h1 id="tetris的开发"><a href="#tetris的开发" class="headerlink" title="tetris的开发"></a>tetris的开发</h1><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>整个过程中并非徒劳无功的，我收获了什么呢？友情，一些较软的能力，经验教训。只是在程序设计能力上的收获，简直是负的……或者说我原来的能力就是负的吧。这是个简单的项目，但我在管理上的失误，把简单搞得无比复杂。</p><p>C大程的大作业，有四个选题：学生信息管理系统、CAD、俄罗斯方块、自主选题。搞模拟题搞烦了，不想弄第一个；没玩过CAD，第二个也不成；对要玩什么没啥想法，自主选题估计选个题就能憋死。这样看来只有俄罗斯方块能搞了。虽然我不太喜欢玩俄罗斯方块，但也只能选这个啦。俄罗斯方块，有什么可以创新的地方呢……（谈到俄罗斯方块，谈到创新，总会想到《伊莉丝症候群(<em>irisu syndrome</em>)》，想到这个兔子和猫的故事……不过这里头的玩法是和剧情相关联的，和俄罗斯方块还有些差别，但我对剧情根本没有想法呀）</p><p>先不管这些，直接动手做吧。</p><h2 id="进展"><a href="#进展" class="headerlink" title="进展"></a>进展</h2><p>这个项目的进展……非常迷。题目布置得特别早，故项目的工时很长。</p><p>一开始的两三周先是研究这个libgraphics。通过demo看看它是如何运作的，学习回调函数的用法，学习基本的绘图套路。这个时候的心态尚不是很好。因为这些东西跟环境也有关联。明明知道这个东西这么写是对的，可为何就运行不起来呢？总归是某个小地方出了问题，但就是不知是哪里的问题，就很烦。搞前端的时候也经常碰到这样的问题，trivial，麻烦。</p><p>知道了库该怎么用，接下来该是游戏的设计阶段了（需求理解的部分被跳了）。我的想法是先搞下落、消行这些东西，再来搞tetris的类型，旋转啊那些。于是先把所有tetris简化为1*1的方块。下落便是改变中心点的位置，消行便是检测单行的block数。这些现在看来非常容易实现，但写的时候想法很多，一会感觉可以这么写，写着写着感觉那样会更好，就经常重构代码，一会儿换成这种风格，一会儿又是那种风格。重构一时爽，但重构完后就会发现自己啥也没干，就会开始怀疑自己。这是很不好的。探索固然有趣，但要有规划的探索，那样应该更为有趣且更有收获吧。</p><p>上面那些写好，又过了若干周，感觉可以开始设计tetris的结构了。怎么设计呢？考虑邻接矩阵吧。设个数组存邻接点的个数，再设两个数组存邻接点的坐标。好，那先弄个“田”出来吧，这一搞发现出了好多问题……比如在边界上的处理。等等。这些解决方案也是一点一点试出来的，主要是细节没搞清楚，我好像也没仔细记录。</p><p>后面的思路好像比较乱了？每次都不知道自己在搞什么，就东搞搞西搞搞，时间就搞过去了。这或许是需求理解和进度规划上的不明确导致的。</p><p>另外，整个项目没有一气呵成的感觉，往往是干个两三天，停个十几天，再来干两三天。然后中间把锅分出去之后就收不回来了，直到快交作业那星期进度才开始提上来。此时我的psycho-pass陡增。看着屏幕上的代码，时常会感到一阵，持久的，沉重的，虚无。</p><h2 id="亮点"><a href="#亮点" class="headerlink" title="亮点"></a>亮点</h2><p>我不喜欢仅完成老师给的要求，这样显得我很没水平。创新自然是要创新的，关键在于让自己满意，而不是恶竞。我相信我的想法并不是每个人都能想到的，故而我的创意还是有创意的。</p><p>本次的创新点主要有以下三个：技能，计分方式，tetris的种类。</p><p>技能我设计了三个技能，本来是有四个的：①定色爆破，爆破屏幕上所有同色的方块；②变幻之术，将当前tetris的type转化为single；③冰封之术，降低tetris下落的速度；<del>④定域爆破，爆破当前tetris邻近的方块。</del>（好吧，下次写游戏一定要找个文学顾问，技能名字不对称好难受）</p><p>定色爆破的效果一般比较迷，会把方块搞得支离破碎的。变幻之术用得比较多，也很方便。冰封术我都没怎么用，level 5的时候救场效果也不是很好。</p><p>计分方式的话，我不太喜欢整数，喜欢带些小量，比较独特的分数，但一般这类“休闲游戏”不会考虑这种问题（<em>irisu syndrome</em>不是休闲游戏，它的亮点不在这里），我只能自己想想如何创新啦。想了不知多久，搞出来个这样的方案，感觉挺优雅的。（虽然得分还是容易重复，尤其是单行的情况下）</p><p><img src="/2019/08/07/Project-Tetris/scoring_scheme.jpg" alt></p><p>然后是tetris的种类，十字型，X型（不可变幻），还应该有更多类型的，但是我懒得做啦，就这样。</p><p>下面是鸽掉的内容：冒险模式（15关，每关胜利条件不一，有坚持时间/分数/时间+分数/特殊条件，有些关无法旋转，有些关tetris的类型会有限定）、疯狂模式（zyls的创意，自己选tetris但是不能重，好像大致这样）、沙盒模式（让玩家自行设计tetris的种类，及其他参数）、地形（永恒之方块，生长之方块）、加密……如果加上去，游戏应该会很有趣的（？），我也讲不好。</p><p>互评的时候还碰到了其他同学做的tetris，发现了他们的一些创新点。我并没有往这些个方向上思考，而这些点子还是值得记录的：上升行，限时模式。</p><p>zc他们搞了个双人模式，然后暂停的时候还有特效，不过我对其兴趣不是很大。</p><h1 id="需要提升的能力"><a href="#需要提升的能力" class="headerlink" title="需要提升的能力"></a>需要提升的能力</h1><h2 id="个人层面的管理"><a href="#个人层面的管理" class="headerlink" title="个人层面的管理"></a>个人层面的管理</h2><p>首先是心态的管理。一方面是要有信念，对自己的信心，对别人的信心，对emergency的解决方案的信心。同时，需要有足够的管理能力提高对项目的把控能力以支撑信念。以下，是此次项目中没能表现出来的能力。</p><p>组织思路与组织代码。不需要很详细的文档，可以是函数调用关系图，可以是对一个功能在实现前的规划草稿，还有把类似功能的函数集中到一块。在开始想好方案不要改，或者事后再重构。封装常用功能。通过肉眼查重降低冗余度。保留档案。</p><p>文件管理。把不同类型的文件搞到不同的文件夹里面，保持树状结构。文件名规范化（”tetris-ln-190616-2117”），并维护更新信息。</p><p>预设测试情形，想好有哪些功能是需要测试的。每拿到一个新的不同版本的文件测试并做标记（“ranklist——符合预期”，“editbox——异常退出”）。</p><h2 id="ui设计中的管理"><a href="#ui设计中的管理" class="headerlink" title="ui设计中的管理"></a>ui设计中的管理</h2><p>（好吧这个标题和上面的标题下面的标题都不对应，不过这个东西有必要讲讲的）</p><p>ui的设计是所见即所得的，能够给予开发者一定的成就感，但也容易利用这成就感极大地耗散开发者的时间与精力，降低其效率。故ui的设计虽然好玩，但也不能仅仅抱着玩的心态看待，它也是需要分析的。</p><p>怎么分析呢？可以先明确一下一个小的阶段中要达成的效果：设计出ranklist的实现样式。这需要先搞出一个原型，提炼出需要使用的控件，确定好控件的颜色，确定好背景，等等。有了原型，设计的时候能更有针对性，而不是这搞搞那搞搞。</p><p>放置控件时我们也经常会想“欸这个放在这里是不是更好看”“欸这个拉长一点会怎么样”。这些常常会在占去大量的时间，但最终效果相差无几。修参的工作最好集中出一块时间来做，同时在这过程中要保证有效的调试手段，如键入位置信息、颜色信息等，而不能总是关闭-重运行。</p><h2 id="沟通与团队协作"><a href="#沟通与团队协作" class="headerlink" title="沟通与团队协作"></a>沟通与团队协作</h2><p>个人观察发现，三人小组往往会退化为两人小组或是一人小组，尤其在组员间相互不是很熟的情况瞎，因为团队的凝聚力不总是很高。作业做着做着有时候就感觉累了，宁愿自己做也不想把任务分出去，或是对这个项目不上心就把它鸽了。但在tetris这个项目中，团队的凝聚力还是较高的，个人认为原因在于组员间有一定的了解，能够相互理解与体谅，所以退化并没有发生。（如果我前几个星期不是特别忙也对tetris特别感兴趣的话，也许io、加密、ui还有其他部分我都揽过去了？这样项目的结束可能会早一些，但也只会像我高中时候的其他作品一样吧，其间我无法收获管理等其他方面的教训。然后我和她们也不会有更多的交集了，应该。）</p><p>一个团队是否总会发生马太效应？能者往往多劳，故强者愈强，弱者愈弱。“弱者愈弱”指的并非在能力上发生倒退，而是指的不受待见的沮丧，对自身能力的怀疑，这么一种心态。这在计算机学科的学习中是非常危险的，因为实际上，许多课程并不难，需要的更多是信心而非能力。个人常秉持这样的观念：别人的东西看不懂，主要原因不是我太弱（这种话该事后说），而是对方写得不够清晰。变量名混乱，代码冗余度高，逻辑清奇（尤其这一点！）都是对方而非自身的过错。我已尽自身一部分所能梳理清楚其逻辑但仍对其总体架构抑或细节实现不甚明了，这反映了对方在对程序的运行逻辑的理解上也不够清晰（至少没有表现出来），故我当见不贤而内自省。</p><p>当然……问题也不尽是别人的问题，很多也是自己的问题。只会写hello world然后被lisp系的语法绕晕难道总是语言设计者的过错？在连最基本的图遍历算法都没写过的情况下看不懂人家的tarjan算法难道应该怪对方的代码不友好？这些问题，确实是自身能力不足所造成的，故我们在骂街之余当积极寻求解决方案。这个过程中尤其要注意解决方案面向的对象。在赛场上可以不加注释，但写题解时还应将各个细节点得清楚明白而不是把AC的代码往上一扔。要读懂这段代码需要什么样的前导知识，这些，我认为都是必要的，是将零散的知识点串成一环的有益疏理，也为对这一知识点尚不熟悉的同学提供了学习的方向。但遗憾的是，至少我很少看见这样的尝试，而与之相悖的做法（扔代码，玄学证明）倒是数见不鲜。</p><p>以上的情形更多发生在个人中，与团队中的情形略有不同。团队降低了沟通的成本（在网上发问，指不定有人会理你），但并没有降低沟通的难度（“你在说什么？”）。在这样的情况下，简单的沟通能够传递一些好的习惯，同时解决一些琐碎的问题；而更深入的沟通呢？至少还没想清楚……这或许还需要在长期的实践中思考才好得出一般性的方法论。</p><p>团队协作无可避免地涉及到交易成本——在软件工程中，集中表现为沟通的成本，理解代码的成本，等等。看自己的代码交易成本往往是比较低的，因为潜意识中对一些细节大脑已经做好了思考，整个程序的脉络也往往较为清晰。但是如果过了几个月，代码逻辑比较复杂还没什么注释，那么看自己的代码交易成本可能就上来了。至于看他人的代码，一般也都要付出高额的交易成本——时间、精力、信心。</p><p>那么如何降低交易成本呢？我们注意到，项目的一部分的代码是整体性的，是许多点连成的面，很稠密，复杂度很高。虽然理解整个面或许较为困难，但是理解一些要点相对来说会简单一些。（CTF一般都是找关键点，在复杂的题目中）于是可以提取关键点，抓住主要矛盾，逐个击破，同时准备好打持久战的意识，可能会有一些帮助。</p><h2 id="Leadership"><a href="#Leadership" class="headerlink" title="Leadership"></a>Leadership</h2><p>（我可能不具有这个东西，但理应具有这个东西）</p><p>一般而言，组长对项目的把控等级是最高的，ta决定项目宏观的方向，整体的架构。这些尚是个人层面的。在团队的层面，协调就麻烦了……</p><p>要分工，需要要了解他人的相性，了解其所面临的问题，了解其心理状态。这些都不容易做到。机器式的监督只会降低团队的凝聚力，但深入的了解也并不容易，这需要机遇，需要耐心，等等。</p><p>可能还是solo比较容易吧？</p><p>但把有着坚韧意志的厉害的女孩子一直置于对项目的焦虑与对自我的否定中，这实在不应该吧。</p><p>于是我只能随性地瞎指挥了。结果尚可，只是本来能更好。</p><hr><p>开始于2019-06-07</p><p>完稿于2019-06-16</p><p>更新于2019-08-06，添加了“亮点”的部分</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;切身体验，何谓人月神话。同时享受，心态雪崩的感觉……&lt;/p&gt;
&lt;p&gt;（更新于2019-08-07）&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件工程" scheme="https://nessoffice.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【通天之塔】游戏设计5：记《门神眷顾》，及开发过程的的心路历程</title>
    <link href="https://nessoffice.github.io/2019/08/07/Project-MenShenJuanGu/"/>
    <id>https://nessoffice.github.io/2019/08/07/Project-MenShenJuanGu/</id>
    <published>2019-08-06T16:00:00.000Z</published>
    <updated>2019-08-07T02:43:55.776Z</updated>
    
    <content type="html"><![CDATA[<p>三年前与三年后。</p><a id="more"></a><p>三年前与三年后。</p><h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>今年五月到六月，因为某个原因和蒋哥一起开发了个小游戏。虽然比较粗糙，也没有取得什么，但不管怎么说也是心头肉呀……我比较没用，前期因为ACTF在划水，后期因为ICPC在划水，中间信心满满地接过蒋哥扔过来的锅，但打开sublime就陷入了看着代码痛苦不堪地“这是啥呀”“天哪这代码怎么这么乱”的死循环，这就比较累。其实自己没有写多少（程序上只是完成甲方的要求，话说哪有这么靠谱的甲方……游戏的平衡性和测试上也没有做太多工作。音乐放了等于没放。io又鸽了，话说我是讨厌io吗……写文档做PPT……），辛勤耕耘的都是蒋哥。虽然结果尚可（我觉得这作为一个游戏还是有可玩性与创新点的，虽然小瑕疵有些多……），但这样劳累的过程实在是不应该，而应该是happy coding的。那么问题出在哪里呢？在探讨之前，还是先来看一看这块心头肉。</p><p>（总算有一个不是以组长的身份参加的项目了……虽然我还是名义上的组长。为啥我总是组长啊orz还总是很糟糕的那种组长。）</p><h1 id="《门神眷顾》日后谈"><a href="#《门神眷顾》日后谈" class="headerlink" title="《门神眷顾》日后谈"></a>《门神眷顾》日后谈</h1><p>一开始的题目是“和门相关的游戏”（<del>暴露了呢</del>），然后我们觉得和传统文化挂钩比较好，就先独立地策划游戏策划了若干天。我的想法呢，是这个门，要大气，要恢弘，应该是“Gate”，整个部落的守护之门，而不能是“door”这种。既然如此，那么时间就得拨到部落时代，游戏得是生存向的。玩家是gate中的神灵，白天作为部落的一员参与活动，晚上作为神守护部落。这样玩家既是见证者，又是守护者，但不是决策者（部落首领）。游戏是rougelike性质的：有经济生活，政治生活，有军事要素，科技水平随部落规模不断提升后会出现更多要素……因为我不会画画所以游戏画面就走<em>dwarf fortress</em>这种风格好了，越简陋越好，以此作为卖点，突出游戏性。游戏的主题也能在这个设定下往高大里走：“反映整个部落乃至全世界中人类的不屈斗志与乐观精神”“门之守护神的守护即人类的自我守护；它也使向往安宁的人们汇聚在一起，构建出社会的原型；它还象征着人们对美好生活的憧憬与希冀。”……就叫它《巢湖志》吧。故事，发生在有巢氏所领导的部落……</p><p>然后蒋哥跟我说，要求里面有“致力于中国传统文化在游戏中的传承与创意呈现”。然后我就“嗯……”。如果坚持这个方案的话主导权就在我了，而我现在都很忙，对《巢湖志》在细节上当如何设计还不是很清楚，而蒋哥似乎颇有想法的样子，所以就决定改策划给蒋哥打工了……</p><p>（中国传统文化？Freud Gate体现了哪门子的传统文化啊怎么大家都在关心抑郁症患者啊这跟中华传统文化有个球的关系啊）</p><p>蒋哥设计游戏是以《金庸群侠传》为原型的（疑似），而我压根没接触过这个……于是策划全权交给蒋哥了，伴随着leadership。</p><p>蒋哥的《门神眷顾》是strategy game，钓鱼/砍柴-&gt;买门神-&gt;斗夜魔-&gt;钓鱼/砍柴，游戏模式就是这样，很简单，但挺好玩。游戏特色啥的全部写在游戏说明文件里，这里就不放了，这里毕竟是日后谈呀，该谈些没有写出来的东西……</p><p>一开始游戏的画风并没有确定，我想的是简约风（我也只会简约风了hhh），花13笔画了个“関聖帝”，蒋哥感觉不可，想试试Q版画风。虽然我一向不大喜欢Q版风格（国内很多辣鸡游戏都这种风格，不喜），但看到蒋哥画出的第一张“神荼郁垒”感觉还是好萌的，很可。于是之后蒋哥就进入了肝画的境界……咱也没体验过，咱也不知道什么样。</p><p>噢，说到游戏文件，我把它托管在github上：<a href="https://github.com/NessOffice/Game-MenShenJuanGu" target="_blank" rel="noopener">门神眷顾</a>。游戏的<a href="https://nessoffice.github.io/Game-MenShenJuanGu/">链接</a>也在里面。</p><h1 id="问题1-初始的游戏策划"><a href="#问题1-初始的游戏策划" class="headerlink" title="问题1.初始的游戏策划"></a>问题1.初始的游戏策划</h1><p>一开始蒋哥把大框架给了我，也就是游戏有哪些form，主界面是怎样的。不过看完这个框架后我还是一脸茫然并不知道蒋哥想要怎么设计，不知道这个village放在这是干嘛用的，不知道这个fish的模式是如何的，啥也不知道。直到蒋哥把魔物的属性发给我让我写Monster.js，我才猛地发现这游戏的游戏模式就这么简单……</p><p>设计课上提到，“原型设计”是设计中的一个关键步骤（真要说起来，没有哪个步骤不关键，嗯）。原型设计不仅表现在设计师对产品须具有初步的全局性的认识上，还表现在设计师同设计师，设计师同用户的交流上。</p><p>前者大家都明白，但后者不亲身经历并不好理解，尤其是设计师同设计师之间的交流。如果是两三个人的小作坊，大家对彼此的想法能很快理解，对于一个模型能够快速达成共识，这就几乎不存在交易成本，合作的效率也能比较高。</p><p>但如果人变多了，或者相互不能很快理解对方的想法，此时有效进行原型设计就比较重要了（要不然得用f(n)次研讨会替代，还不是等价的替代……），因为它能够让一方的想法能够快速被大家接受，以此提升合作的效率，同时避免错误理解造成的“走弯路”。原型设计的方法有很多，糊个交互界面出来固然是一种方法，但这个交互界面也不能过于简陋，必要的说明应当加上。不过个人更倾向于以故事板的方式呈现游戏的原型。</p><p>在这一次的游戏策划中，蒋哥有设计游戏的原型，但其保真度过低，缺乏说明，连基本的游戏模式都不能让别人领会。这样的原型无疑是失败的。而没有即时指出它的失败而是选择摸鱼的我也相当失败。第一步选择摸鱼，往往在后面因为信息不对称也补不回来，只能摸鱼了。所以这第一步得走好呀。一是摸鱼可耻，二是沟通技巧需要加强（不光是通过自然语言沟通，用原型沟通也是沟通）。</p><p>（谈起游戏策划，回想起以前和蒋哥口胡游戏的某几个中午，两支笔，一张草稿，两张嘴，一个主题。一个中午就这么过去，一个游戏，从大纲到细目，就全部清晰了。虽然还有很多要糊的dlc还没糊出来。有点累，因为没睡午觉，太过兴奋以至于头脑发胀，但还是兴奋地回不过神来，脑袋里一直盘旋着这个还没出生的游戏，想象着它这里这么做会更好，那里也能加点料，还有……真好啊，这样的感觉）</p><h1 id="问题2-交易成本"><a href="#问题2-交易成本" class="headerlink" title="问题2.交易成本"></a>问题2.交易成本</h1><p>策划已经确定，那么接下来就可以码代码了。在一番协商之后，我和蒋哥决定了合作的模式：</p><p>1）最新的代码（以日期区分版本）只能在一个人手里；</p><p>2）双方轮流更新，一方工作时另一方休息或处理其他工作（如绘图、搞音乐、学习要实现某一功能的相关知识等）；</p><p>3）维护log并每次在其中声明自己在本次更新中的done，to-do，对方的to-do。</p><p>这样的模式是较为高效的，它保证了版本清晰不会出现混乱（虽然最后还是挺混乱的，同一个名字下的“门神眷顾1.0.0”被传了好几遍，不过那个阶段已经不用写代码了）。但这样的模式的问题在于它仅适用于两人小组间的合作，而若要移植到三人小组上，就要做一些额外的工作，组员在更新之前需要声明自己要更新哪些内容，和其他同学的工作会不会产生冲突，并在各方均完成任务后由组长集成组员的更新。不然，版本一旦产生混乱，整个工程的进展也会被搅和地乱七八糟。MenShenJuanGu这一项目和Tetris这一项目是同时进展的，合作的模式大抵相同，但前者在版本管理上做得较好，而后者的版本管理在后期陷入严重的混乱。（zyls的RankList和ljq的StartMenu同时进展，她们把代码发给我，我不知道她们更新的代码基于哪个旧版本，也不知道她们彼此交流地如何，只能手动fc手动整合，也算是一种补救措施了，虽然这样比较累）</p><p>但模式的高效并不意味着实际操作的高效。蒋哥每次把代码发给我，我都得先略读一遍他的更新，以找出自己完成to-do所需要与之关联的变量、函数等。起初我还想着要重构蒋哥的代码的，但这实在太耗费时间耗费精力却不带来多少成就感，只得自降要求，只完成蒋哥给的to-do了。</p><p>即便如此，工作也并不轻松，一开始的困难显然是阅读蒋哥的代码，这个过程……一言难尽。</p><p>不得不承认，蒋哥代码的冗余度相当高。比如声明一个按钮，每次都得六行，中间一堆相似的变量名。这一做法的罪恶不仅在增加代码的冗余度，使本当精简的代码变得肥硕而丑陋。更罪恶的是，它使得代码更难分析更难找出要点了。F3变量名的跟踪效果变差了，因为要按F3的次数基本都乘上了个6，虽然听起来没什么，但是谁试谁知道，这到底有多难受……</p><p>代码中的冗余当然不止这一个地方。场景转换时的addEventListener/removeEventListener，一个文件存天下的模式，等等。这些有的解决了，有的没有解决，但总之都让分析代码的复杂度提高了若干个层级。</p><p>相对于对代码逻辑的理解，冗余还是小问题。接过一个涨了若干KB的文件，看到一大推完全不认识的新函数新变量，还要理清楚它们之间的关联，以开始自己的工作，这想想就可怕。更何况这些代码并不友好，没有显示函数调用关系的流程图，没有说明函数功能的注释。所有这些，都使得分析代码的工作痛苦非常。</p><p>写好注释，说明大框架下的小框架，讲明白函数的内容，这是对coder的要求。而对于analyst，也不能对着代码就这么看，还是要拿起纸拿起笔，梳理清楚代码的逻辑的，如果这个逻辑比较复杂。事实上蒋哥的代码并不复杂，静下心来就能看懂，但我的状态实在是太差了。后期蒋哥疯狂提醒我没时间了得肝肝Monster.js的部分，但我一直都不在状态。倒数第二天随便写写，也就写完了。不在状态的原因，一来是心理状态不佳（可能这个学期就没好过），二来是对代码逻辑缺乏认同吧。</p><p>我看蒋哥的代码看得挺难受，但想想如果自己是他的话写下这些代码的时候相比是充满激情有一定成就感的，而没有太管他人在阅读这样的代码时候是如何感受的……想到这里感觉有些愧疚（tetris一来就写了50%，只顾自己写得爽，没有考虑到她们在之后接锅时候的感受），就问了问ljq“我的代码冗余度是不是很高”“看我的代码的时候有没有很难受”。并没有得到有效的信息，反而让人家感叹“我太菜了”……明明应该是我的问题，你们要指出的呀。</p><h1 id="问题3-心理状态"><a href="#问题3-心理状态" class="headerlink" title="问题3.心理状态"></a>问题3.心理状态</h1><p>正反馈过少。这是在玩js时不太可能出现的一个问题，但它毕竟还是出现了。</p><p>为何会如此呢？首先是读蒋哥的代码读得很累，然后就不想读了，也不想完成任务。想摸鱼，可又想到有其他项目在身：whatolearn（我好棒哟，又咕咕咕了呢），史纲论文，物理考试，对微积分的理解，英语六级，打CF并写题解……其实这些都不算难，虽说有的可能比较烦。但没有祭出对它们在战略上的轻蔑就会导致心态很崩，感觉自己什么都做不好，什么都不想做，又水，又咸，就会很难过。写游戏应该是快乐的事情，解压的事情，但也加入了“锅”的行列，扩大了它们作为一个整体对我的影响，这很不应该呀。</p><p>这一学期的状态差得可怕，原因何在呢？我对事物的认识似乎发生了一些错位。不应该天天觉得自己很菜什么都做不成因为这种状态本身就很糟糕，没有认识到写游戏的快乐而只是抱着摸鱼的心态和蒋哥合作，没有发现史纲论文是一个晚上就能搞出来的而是让它烦了自己一个月，没有体会到英语六级的重要性及紧迫性故而在最后的关头才开始慌张，没有想到……这么多错位都叠在一块，也真是够可以的。更糟糕的是，我好像还一直把负能量传播给同学……我应该看开一点，心态摆好一些，这样应该就能，享受写游戏的乐趣，享受探索的乐趣，享受生活的乐趣了吧。</p><h1 id="问题4-知识掌握程度"><a href="#问题4-知识掌握程度" class="headerlink" title="问题4.知识掌握程度"></a>问题4.知识掌握程度</h1><p>我们是用的一个js库，但对库的用法，对js内对象的特性还不是很清晰，以至做不到把对按钮的声明封装起来以降低代码冗余度。</p><p>不太熟悉web相关的操作，在io上毫无头绪，游戏的一些功能（“昔日荣誉”）也就被鸽掉了。</p><p>不懂音乐也不会创作，不懂在这个库里循环播放的正确用法，这个功能又鸽掉了。</p><p>以上……</p><p>前端的事，很多查文档就好了，但在文档较少的情形之下， 必要的理解能够帮助解决问题，而这是我们所缺乏的，所不应该缺乏的。</p><h1 id="有趣的地方"><a href="#有趣的地方" class="headerlink" title="有趣的地方"></a>有趣的地方</h1><p>①游戏的demo出来后调参以调平衡性的这部分很有意思，玩过都知道，这就是很有意思。</p><p>②把游戏的demo发给同学后他认真地评测了……还提出了些有力的见解。</p><hr><p>开始于2019-08-05</p><p>完稿于2019-08-07</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;三年前与三年后。&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件工程" scheme="https://nessoffice.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="设计" scheme="https://nessoffice.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="游戏" scheme="https://nessoffice.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>【图灵之路】CF记-其四（2019-08-05更新）</title>
    <link href="https://nessoffice.github.io/2019/08/05/ICPC-Practice-Codeforces_4/"/>
    <id>https://nessoffice.github.io/2019/08/05/ICPC-Practice-Codeforces_4/</id>
    <published>2019-08-05T11:53:40.000Z</published>
    <updated>2019-08-06T15:23:08.850Z</updated>
    
    <content type="html"><![CDATA[<p>划水划水，弱鸡划水……</p><a id="more"></a><h1 id="round-577-div2"><a href="#round-577-div2" class="headerlink" title="round #577 div2"></a>round #577 div2</h1><p>关键词：造数据，正确的思路与错误的程序，证明算法的正确性</p><p>休息了若干天重新捡起cf……<a href="https://codeforces.com/contest/1201" target="_blank" rel="noopener">这场</a>做得还是相对顺利的，ABC过得相对比较快。E是个毒瘤题没啥人做，所以决胜的关键就在D上了。</p><p>从时间的分配上看，我在对BC正确性不太确定的情况下在40min内搞出了BC，花了20min想出了D的突破点并写了伪代码。但还是花了40min才码完D，而且对初始情况的处理不是很到位，有一处地方还写错了，以至怎么改交上去都是WA。</p><p>这题，一如之前做到的一些题，码量稍大，程序略复杂，而我在这种情况下便容易出错。</p><p>如何解决码力低下的问题呢？首先是要提高思绪转化为程序时对细节的考虑，而我在这上面做得还比较模糊。</p><p>再来是造数据，虽然这题比较良心，样例指出了我的一些错误，但还是有错没被指出。</p><p>当然，这两种能力是比较软的，应结合具体题目，比如这次的B，D，在实践中提升自己的能力，而不能光说说而已呀。</p><h2 id="AC"><a href="#AC" class="headerlink" title="AC"></a>AC</h2><p>A题就排个序，C题扫一遍模拟（答案是二分验证的，但还是模拟来得快，虽然程序稍微复杂了点，而且要分类讨论可能会写错）。</p><h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><p>题意：有n堆石子，每次可以选两堆（有石子的堆）使这两堆的石子数-1。问能否找到一种操作使全部堆在操作完后石子数均为0。</p><p>做的时候我是这么考虑的：操作中的一个不变量显然是石子数的奇偶性，那么先判一下sum的奇偶，只考虑石子数为偶数的情形。再来怎么考虑呢？先把所有石子排一下序好了，如果最高的那堆特别高，比剩下所有的加起来都高，这样的情况也是不行的。那么剩下的情况都可行吗？我随便造了点数据感受了一下，感觉实际的做法就是构造“等高堆”，先把最高的一堆夷到和第二高的那样平，然后再用这两堆来把剩下的堆夷平……（比如2 6 12 14的话，就可以先把14给夷成12，这样操作后是2 4 12 12。然后用两个12把4给夷成2，就是2 2 11 11，两两相等，可行）虽然我描述不出算法的细节，但直觉告诉我这样做是对的，而且这题作为B题不应该考虑那么多。试了一试，哎，AC。此时比赛过去约20min。</p><p>其实正确性的证明也便是和上面的步骤相似的：①用前面所有的堆来削最大的那堆直至它和第二大的堆等高。②这样削完之后，前面n-2堆（可能会少于n-2，因为有的堆没了）内部任意消化，③消化到不能再消化再用剩下两堆一起补，因为这两堆加起来比前面n-2堆高（这个结论我并不会证，但感受它还是较容易地。①中每次贪心地操作最高的堆，②中就有尽可能多的堆被消化。然后对于奇数堆的情形，比如2 2 2，我们是同时把他们变为0 0 0而不是变为0 0 2），而且前面n-2堆的和是整数，所以必然能够补完。④最后两堆相等，做完了。</p><p>个人感觉这个老哥的解释挺不错，放上来（作者是owneriekno1）：</p><blockquote><p>Here is another way to think about it.</p><p>Consider 2 cases:</p><p>①Base case: the largest element is equal to the sum of all the others:</p><p>Let’s  say that each element of the array represents the number of marbles of a  given color. We can take 2 bowls. On the 1st, we put all the marbles of  the largest number, while on the 2nd we put all the remaining ones. On  each operation, we can take one marble from both of them. As they  contain the same number of marbles, they will become empty at the same  time and we are finished!</p><p>②Second case: the sum is bigger than the largest element:</p><p>We  will try to reduce this to the above case! Again, we fill the bowls  with the same way. The difference is that now the 2nd bowl has more  marbles. To solve this, we can begin picking pairs from it until they  are equal! Note that, as the sum is an even number, the parity of the  number of marbles on each bowl is the same (ie. both odd or both even).  That guarantees us that we will 100% reach a point that they are equal!</p></blockquote><h2 id="D"><a href="#D" class="headerlink" title="D"></a>D</h2><p>题意：你在一个n×m的棋盘上。棋盘的一些地方做了标记，你需要经过这些地方。开始你在(1, 1)处。往左右走没有限制，但你只能向上走而不能向下走，而且只能沿着一些column向上走。</p><p>既然左右走没有限制，那么可以把问题分层考虑。第一层很明显只有走到最右边的标记点这样一种路径。但之后该如何向第二层转移呢？从哪个safe column上去？上去之后又怎么向第三层走？这样看起来，问题似乎很复杂。</p><p>但我们要注意到，在每一层的最终位置，只可能是最左边的标记点，或是最右边的标记点。如此一来，我们便可以dp了。令$dp[i][0]$表示走到第i层最左边标记点所用的最短步数，$dp[i][1]$表示走到第i层最右边标记点所用的最短步数。</p><p>然后状态怎么转移呢？注意到，$dp[i][0]$只可能由$dp[i-1][0]$或是$dp[i-1][1]$转移而来。从$dp[i-1][0]$到$dp[i][0]$，这个转移的含义就是从第i-1层最左边，沿一条safe column到达第i层，先到第i层最右边，再到第i层最左边。</p><p>那么怎么找safe column才能使到最右边的步数最少呢？画个图就很清楚了，沿某一些safe column上去步数是等价的，而沿另一些safe column上去步数则会增加。经分析，我们需要记录第j列左边最右边的safe column：$lft \  col[j]$，还有它右边最左边的safe column。这样之后还要写个函数$fun(LL \  col1, LL \ col2)$计算从第col1列到第col2列在水平方向上所花费的最小步数。</p><p>这样就好了吗？并没有。如果有些层没有标记点怎么办？那么我们便跳过它。这样一来，我们可以维护一个$up$值，然后转移就是从第i层转移到第i+up层，中间的层都是没有标记的。</p><p>这样一来程序的大框架就有了。答案也便是$min(dp[n][0], dp[n][1])$（是的，即便第n层没有标记点答案也是这个）。我们要记录哪些数据呢？要记录每层最左/最右的标记点$lft[i]$还有$rgt[i]$；要记录$lft \  col[j]$还有$rgt \  col[j]$，而要记录这两项就要记录$safe \  col[maxn]$。除此之外也没什么要记录了，这题也可以做了。</p><p>下面记录一下坑点：首先如果第一行没有东西的话，$rgt[1]$要置为1。而且首先$lft[1]$要特殊处理，改成$rgt[1]$。我并没有关注太关注第一行的特殊处理，以致状态转移方程里面有这样一个隐蔽的错误。</p><p>还有是fun函数的处理，要关注column j左右有safe column，没有safe column的情形。画个图把情况罗列一下，思路更清晰。我这里又搞错掉了，对样例的时候发现。</p><p>然后$lft \  col[j]$是可能取到j的。我一开始设为不可能，以致跑样例都出错。</p><p>最后的最后！我的状态转移方程写错了！本应是</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dp[now][<span class="number">0</span>] = dp[now][<span class="number">1</span>] = up + (rgt[i] - lft[i]);</span><br><span class="line">dp[now][<span class="number">0</span>] += min(dp[now^<span class="number">1</span>][<span class="number">0</span>] + fun(lft[i-up], rgt[i]), dp[now^<span class="number">1</span>][<span class="number">1</span>] + fun(rgt[i-up], rgt[i]));</span><br><span class="line">dp[now][<span class="number">1</span>] += min(dp[now^<span class="number">1</span>][<span class="number">0</span>] + fun(lft[i-up], lft[i]), dp[now^<span class="number">1</span>][<span class="number">1</span>] + fun(rgt[i-up], lft[i]));</span><br></pre></td></tr></table></figure><p>然后我写成了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dp[now][<span class="number">0</span>] = dp[now][<span class="number">1</span>] = up + (rgt[i] - lft[i]);</span><br><span class="line">dp[now][<span class="number">0</span>] += min(dp[now^<span class="number">1</span>][<span class="number">0</span>] + fun(lft[i-up], lft[i]), dp[now^<span class="number">1</span>][<span class="number">1</span>] + fun(rgt[i-up], lft[i]));</span><br><span class="line">dp[now][<span class="number">1</span>] += min(dp[now^<span class="number">1</span>][<span class="number">0</span>] + fun(lft[i-up], rgt[i]), dp[now^<span class="number">1</span>][<span class="number">1</span>] + fun(rgt[i-up], rgt[i]));</span><br></pre></td></tr></table></figure><p>对此样例就不能帮上忙了，因为样例中每层都只有一个。</p><p>所以我应该如何反思呢？一方面是要强化程序正确性上的证明，不能老写塑料算法（虽然这次BC两个塑料算法都对了），加强从思绪到程序上的转化，不能被传输错误坑。但这些，很难避免。较为容易做到的是造数据，造出更强的能够检验各个细节正确性的数据。虽然lft，rgt这个数据比较难造也比较难判断对错，但跟着它跑一遍还是必要的，因为这样可以发现很多问题。我在造数据上还是太懈怠了，没有分析哪些地方可能出错需要检验，否则怎么会没有妥善处理第一层的特判呢？</p><hr><p>初稿写于2019.06.04</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;划水划水，弱鸡划水……&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://nessoffice.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>【数学之美】复变函数与拉普拉斯变换-金忆丹版：第二章 解析函数</title>
    <link href="https://nessoffice.github.io/2019/08/03/Notes-Complex_Function-CH02/"/>
    <id>https://nessoffice.github.io/2019/08/03/Notes-Complex_Function-CH02/</id>
    <published>2019-08-03T13:22:58.000Z</published>
    <updated>2019-08-04T05:05:14.168Z</updated>
    
    <content type="html"><![CDATA[<p>极限，连续，可导，解析</p><a id="more"></a><h1 id="从复变函数到解析函数"><a href="#从复变函数到解析函数" class="headerlink" title="从复变函数到解析函数"></a>从复变函数到解析函数</h1><p>这章名为“解析函数”。解析，什么意思呢？在一点处解析，就是说在该点及其一个领域内可导。为什么要引入这一概念呢？<del>我怎么知道</del></p><p>不过既然要引入这个概念，就势必要引入其前导概念。要了解解析，我们先要了解可导，而在此之前要先了解连续，而在此之前要先了解极限的概念，函数的概念。</p><p>复变函数的概念，完全可以继承实变函数的概念。故此处不细提了。值得一提的是在实变函数中我们常用的“数形结合”在复变函数中要稍作改变才能用。因为复变函数实际上可以看作一个二维的形状映射为另一个二维形状。这样四维的图形不好用三维空间表述。故而我们“数形结合”时一般会画两张图，一张原象，一张象，来直观地感受复变函数的映射关系。比如书中的例2就值得一看。</p><p>函数的概念了解完，接下来就是极限与连续的概念。复数的极限，一如实数的极限，是通过距离刻画的。而复数的连续，除了用定义考虑外，也可以考虑$f(z) = u(x, y) + iv(x, y)$中$u(x, y), v(x, y)$的连续性。于是问题便化归到我们在微积分II中所学的多元函数的连续上去了。此外，复数极限、连续理论中的很多性质可以直接继承实变函数的概念（不过证明要另加考虑？）。在“有界”的问题上，可以通过取模来化归问题。</p><p>接下来就是导数的概念了。可导必连续，连续不一定可导。前者容易证，后者的例子么，$f(z) = |z|$。这里的证明方法和在实变函数中的证明方法如出一辙，都是考虑函数沿不同路径时的取值。</p><p>接下来就是解析/正则的概念了。在一点处解析，就是说在该点及其一个领域内可导。然后不解析的点叫奇点，而在整个复平面上都解析的函数叫整函数。为什么这么叫？<del>我也不懂啊</del></p><p>然后引入了一些结论。比如，讨论$f(z) = \overline{z}$，这个函数处处不解析。再比如，任意复多项式在复平面上均解析，任意有理函数在除去分母为零的点处都解析。这些比较基础（也因此而蛋疼），就不证了。微分算子的运算法则，还有链式法则此处也略去。</p><p>然后怎样判断一个复变函数是否可导呢？在实变函数里我们判断一个函数是否可导相对比较方便，因为路径只有两条。而在复变函数中，路径是有无穷多条的，通过定义来判很多时候都不好做。于是，前人发现这一定理：复变函数$f(z) = u(x, y) + i v(x, y)$在$z_0$处可导，等价于$u, v$在$z_0$处可微且满足C-R条件（Cauchy-Riemann条件），条件自己回忆，这里就不放上来了。</p><p>这个条件看上去不是很自然，笔者也想不太清它的意义是什么，但证明还是好证的。把（复变）可导、（实变，多元）可微的定义用一用就好了。</p><p>然后有了这个定理，我们判断函数是否解析也方便了。比如前面的$f(z) = \overline{z}$。比如$f(z) = |z|^2$。（这个例子同时也指出了可导和解析的区别）再比如我们可以证明，若$f’(z)$在区域D内恒为0，则$f(z)$在区域D内恒为常数。</p><p>然后对于C-R条件中的式子我们可以深挖一下（求个导），就有$\dfrac{\partial^2 u}{\partial x^2} + \dfrac{\partial^2 u}{\partial y^2} = 0$这么两个式子。然后满足这个条件的函数u被称为D内的调和函数，这个式子叫拉普拉斯方程。然后u和v又通过C-R条件联系在了一起，于是我们称它们为一对共轭调和函数。这样，便可在知道u，知道函数解析的条件下，解出v了（也有很大几率解不出），例子见例7。</p><h1 id="初等解析函数"><a href="#初等解析函数" class="headerlink" title="初等解析函数"></a>初等解析函数</h1><p>基本的概念都说清楚了，下面就可以来定义一些基本解析函数了。联系此前接触过的基本初等函数。这里我们需要考虑的有指数函数、对数函数、幂函数、三角函数和双曲函数。（反三角函数？那是啥呀。）</p><p>首先是指数函数，先把式子转化为实部虚部分离或是模和辐角分离的形式，再证一证它解析。接着，就是观察一下它的实部虚部，模和辐角，周期性（这是复变函数中指数函数所不同于实变函数的一类点），运算法则，图像。嗯，差不多了。例题可看例8，稍微有点绕，不过对理清概念来说还是挺有帮助的。</p><p>然后是对数函数，指数函数的反函数。注意到指数函数的周期性，对数函数一般是多值的，所以我们要框定一个带域（带状的区域，真形象啊）让它单值先，然后用反函数和指数函数的定义就能推出对数函数实部虚部分离或是模和辐角分离的形式了。</p><p>然后有了这样的形式转换，我们也易证复对数函数保持了实对数函数乘积的公式。还有其他性质。</p><p>至于对数函数的解析性，我们先要来考察这一函数的连续性，因$ln z = ln |z| + i arg z$，前者在原点之外处处连续，而后者在原点与负实轴上都不连续。所以对数函数在除去原点和负实轴的复平面上处处连续。考察完连续性之后，我们在来求出对数函数的导数，这由定义可知为$1/z$。故对数函数在除去原点和负实轴的复平面上解析。</p><p>接下来是幂函数，我们可以用前面探究过的指数函数与对数函数加以刻画：$z^{\mu} = e^{\mu Ln z} = e^{\mu (ln|z| + i arg z + i 2k\pi)} = e^{\mu ln z} \cdot e^{2k \pi \mu i}$。注意到$e^{\mu ln z}$为定值，故$z^\mu$是否多值和$\mu$息息相关。结论：当$\mu$为有理数时，$z^{\mu}$有限多值（特例：$\mu$为整数时它是单值的）；当$\mu$为无理数时，$z^{\mu}$有无穷多的取值。</p><p>下面是三角函数与双曲函数，这个定义比较漂亮。结合例题就能记忆函数的定义了。然后三角函数与双曲函数间可以转化：求导或给变量添个i。三角函数与双曲函数的奇偶性、周期性、相关恒等式和实变函数里的这些性质比较相似，就不提了。值得一提的是这条：$|sinz|$并非有理函数，这也好证。</p><h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><p>前三道是关于映射对区域的改变的，不妨从群论的视角视之。</p><p>第四题是洛必达法则，证明同实变函数中的证明。</p><p>第五题的第二小问值得一做，较为tricky。</p><p>第七题是C-R条件在极坐标下的表示。</p><p>第十题可一看，问的是调和函数的和和积是否调和。</p><p>第十三题是简单的证明题，但我不知道这题该归到哪类。</p><p>第十四题是知u知解析性求v那种题，正经做要积分。第一小问如何积呢？</p><p>第十八题的第二小问，问$sin(e^z + 1)$的实部虚部。形式似乎较为复杂？如何简单地解呢？</p><p>第十九题涉及到了函数的共轭和自变量的共轭的关系，可一看。</p><p>第九题，第十一题，第十六题都不会做……</p><hr><p>2019-08-03</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;极限，连续，可导，解析&lt;/p&gt;
    
    </summary>
    
    
      <category term="课程笔记" scheme="https://nessoffice.github.io/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
      <category term="数学_分析" scheme="https://nessoffice.github.io/tags/%E6%95%B0%E5%AD%A6-%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>【围炉夜话】从艺术设计的角度看OneShot</title>
    <link href="https://nessoffice.github.io/2019/08/03/Game-OneShot/"/>
    <id>https://nessoffice.github.io/2019/08/03/Game-OneShot/</id>
    <published>2019-08-03T02:05:59.000Z</published>
    <updated>2019-08-03T15:15:00.627Z</updated>
    
    <content type="html"><![CDATA[<p>煎饼，灯泡，还有救世主。</p><a id="more"></a><p>（虽然标题写着“从艺术设计的角度看”，不过其他角度也是会涉及的。起这个标题主要是因为OneShot的艺术风格真的太棒了……虽然讲起来也说不出什么。然后我也不太了解艺术设计的理论，全程都在瞎讲，设计生不要生气呀……）</p><p>（虽然官方没有声明Niko的性别，但笔者倾向于把ta视作小姑娘。坚强的，善良的，但有时也会难过的，小姑娘。）</p><p>游戏名不知道怎么翻译。一次机会？怪怪的。solstice又怎么翻译？（第一次看成80L9TICE了）都不好翻译，伤脑筋。</p><p>OneShot，近来玩的一款metagame。一直以来都喜欢meta元素，喜欢metafiction，也喜欢metagame。喜欢对于真实与虚构的思索，也喜欢作品在展现meta元素中的独特表现。OneShot在结合meta元素的趣味性和艺术性上就做得比较好，虽然相比Undertale等其知名度或许比较低，但它的品质确实不错。虽然游戏很温馨，good end很美满，Niko和大家也很nice，但结束游戏时也能感到微微的一丝悲伤，是分别的难过。</p><blockquote><p>我在你的记忆里，你也在我的记忆里。</p></blockquote><p>游戏的情节就不细讲了，metagame嘛，自然是自己体验感受更深。本文主要聚焦的是OneShot的画面。</p><p>顺带一提，游戏的音乐也很棒，虽然并非能给人深刻印象，思想深邃，富于张力的那种音乐（玩完就忘了……），但和场景特别搭，尤其能增强你我的代入感。OneShot的音乐基调，总体而言，是舒缓的，平静而祥和，但在一些场景也会呈现出诡异的面貌（毕竟metagame呀……不过放心好了，游戏是单线的，最后很治愈，不会出现糟糕的发展）。</p><h1 id="情节"><a href="#情节" class="headerlink" title="情节"></a>情节</h1><p>虽说情节不细讲，不过还是要提的，因为这情节真的好治愈。</p><p>（世界观的话，非常自洽，从细节可以看出。世界中有城市有计算机有机器人有人工智能，但没有飞机也没有其他交通工具，或许是因为这个世界太小了？光能是主要的能源来源，无论在哪个区域都如此。其他……光这样讲讲也不足以描绘一个世界的）</p><p>OneShot开始时所展现的剧情比较“正统”：主角Niko一觉醒来发现自己身处异世界。世界已走到了尽头，因为曾经的太阳殒灭了，只有将新的太阳致于The Tower的塔顶之上世界才能重归稳定，Prophetbot这样对Niko说。于是，Niko抱着太阳（灯泡）踏上了前往The Tower的朝圣之旅，从Barrens，到Glen，到Refuge，再到The Tower。然而，事情的真相并非Prophetbot所描述的这么简单……</p><p>游戏的第一周目充满了悬念：Barrens中的机器人口中的“制御”是何意？一直给我们，而非Niko传递信息的终端又是谁？为何这世界中满是方块？我们的目的又是什么，拯救世界还是让Niko返回她的世界（终端告诉我们的任务是后者，而NPC们告诉Niko的任务是前者）？图书馆中众人口中的“他”又是谁？三叶草的意义？为何游戏要频频加入meta元素？如此种种的困惑，相信玩家们在探索时都会产生。而无论是Barrens，是Glen，还是Refuge，无论在哪个场景中NPC们都不会回答玩家的这些困惑。直到来到The Tower，直到solstice线开启，直到……</p><p>（开始剧透啦）</p><font color="FFFFFF">直到最后，我们发现游戏里没有反派，没有阴谋。此前所有的诡异的出发点都是The Entity（The World Machine，个人更喜欢The Entity这个名字）对Niko的保护。<br></font><font color="FFFFFF">每位NPC都很善良，表现在细节里。比如给Niko做煎饼，给大家提供避难所的咖啡店老板。比如在最后关头仍维护土地完整的植物精灵。比如陷入悖论的困惑而后被Niko制御的The Entity。<br></font><font color="FFFFFF">还有Niko对我们的信赖，她勇于拯救世界的坚强，她在吃煎饼时候的想家，都是一个平凡而不平凡的女孩子的表现，令人欣赏，惹人怜爱。<br></font><font color="FFFFFF">（虽说如此，但Niko以外的人物塑造地不是特别有特点，个人认为。OneShot在人物塑造上还是有些弱了。）<br></font><font color="FFFFFF">虽然是末世，但是完全没有末世的样子。大家都很乐观，相信希望，相信Niko，也相信我们。<br></font><font color="FFFFFF">这样的善意，渗透在作品里，使整部作品的色彩基调明亮无比（虽然实际上游戏的色彩基调都是比较暗的，这将在后面说）。这些人物的生命之光，展现了作者可贵的人文关怀。<br></font><font color="FFFFFF">既然是metagame，何谓真实总归是一个主题。在不真实的世界里，拯救有意义么？真实又是什么呢？我对这些问题不是很感兴趣，因为我们的情感，我们的体验总归是真实的呀，虽然有点唯心。<br></font><font color="FFFFFF">然后制御这个概念真的挺棒呀……因为认同，所以真实。<br></font><font color="FFFFFF">（说句实话，感觉游戏里的文本总体而言不是很吸引人，很多地方都想跳，有的地方有点太工科了？有的地方又感觉这个人就是会讲这样的话的，总归没什么信息量）<br></font><font color="FFFFFF">（还有steam界面那个游戏介绍……感觉都不像是中文，很西式中文）<br></font><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><p>(星号)困惑的猫叫声(星号)</p><p>在图书馆看到羽毛笔的时候，Niko会想起我们在Glen也碰到过羽毛笔。</p><p>（在初版的游戏中，游戏只能玩一次，按×之后游戏就继续不了了。而且MessageBox还会弹出“You killed Niko”这种比较可怕的字样。）</p><p>The Entity的形象是Niko的黑白镜像。</p><p>在告别的时候，Niko会叫我们好好照顾自己。（上一次被告诉要好好照顾自己，是几年前呢？除了我妈……）</p><h1 id="画面"><a href="#画面" class="headerlink" title="画面"></a>画面</h1><p>好，到重点了。</p><p>OneShot的过场CG表现极为出色。CG往往出现在一些重要的场景，或是转场时刻。CG在/Graphics/Pictures文件夹内（网上都没见大佬整理呢……），此处放上一些笔者所喜欢的。</p><p><img src="/2019/08/03/Game-OneShot/cg_barrens.png" alt></p><p><img src="/2019/08/03/Game-OneShot/cg_refuge1.jpg" alt></p><p>容易发现，CG中的物件要素总体而言较为简单，但它在画面中突出了重点（The Tower无疑是第一张的亮点所在，而第二张中飞机和其眼睛也正是这一画面的眼睛）在色彩和明暗也下了较大的功夫，故而富有表现力。在色彩和明暗上做的文章也正是OneShot在画面上能吸引人的主要原因，依余愚见。</p><p>前面讲到，在OneShot中世界分为四个region：Barrens，Glen，Refuge，The Tower。前三个region各有不同的主色调：蓝，绿，红（RGB）。以Barrens的地图为例，请看：</p><p><img src="/2019/08/03/Game-OneShot/stage_barrens.jpg" alt></p><p>整个地图以蓝黑白三种色调为主。布满荧光矿石的地面，闪着粼粼波光的水池（动态效果很棒很到位），以及波纹纹路清晰的海洋。要素间的和谐也造就了场景的和谐。</p><p>再如refuge，个人格外喜欢这个region的风格。紫色的楼房，红色的灯光，没有夜晚的都市，富有冲击力，诡谲又美丽。虽然是暖色调，但又给人一种微妙的距离感。</p><p>再来是The Tower，它的色调是纯黑和纯白，伴随着昏暗的深蓝。秩序在此陷于混乱。这个场景比较有《梦日记》那样的感觉，但它称不上猎奇，主要是崩坏。</p><p>地图的色调如此，而Niko，太阳，她们都是黄色的。黄光在游戏中无疑象征希望，象征拯救。尤其给人留下印象的是，Niko在穿过场景时，周遭一片漆黑，可见的只有她的眼睛，还有她手中的太阳。（虽然略显恐怖）将颜色用作象征并不罕见，但OneShot此举在视觉效果上显然取得了非常不错的成效，这或许要归功于纯色和像素风的契合。</p><p>色调之外，明暗也是OneShot画面之所以和谐动人的另一大要素。据设定，此前的太阳毁灭了，于是世界处于一片黑暗之中（但各个region还有一些荧光体，颜色各不相同，为人们提供了生存的资源）。故，游戏的画面虽然并不昏暗，但也不明亮，barrens尤其。这样的暗使得故事更有戏剧性，也更能调动玩家对于未知的恐惧，同时也加强了画面的表现力。在一周目若是选择拯救世界，那么会有太阳降世以后的一些CG，很明亮，但也少了各个region独特的艺术风格。</p><h1 id="游戏性"><a href="#游戏性" class="headerlink" title="游戏性"></a>游戏性</h1><p>游戏性，私以为，是OneShot主要的不足。虽然游戏中一些puzzle相当精妙而有趣，但一些puzzle的设置私以为影响了游戏节奏，也不利于剧情的推进。</p><p>puzzle的设置上，大多数和meta相关的puzzle都是很新奇的，也容易想到（不过我并没有想到胶片要放到窗口之外曝光orz），做出来也有一定的成就感。而OneShot中传统一些的puzzle（寻物并组和）私以为还是不那么“自然”的，比如把镜片和空电池扔一块，比如给按钮上胶带（可能我缺乏常识吧），这就导致容易重复跑路，会卡关。而这对于游戏性的影响是致命的。虽然地图很漂亮，但重复跑仍免不了会陷入审美疲劳。或许是我不擅长解密吧，个人认为开始场景的puzzle相当精妙，但后面的略有些困难，跑路量也较大。</p><p>OneShot涉及的比较好玩的较为创新的puzzle，整理一下，如下：</p><p>①找文件，文件依据场景提供提示与剧情指引（The Tower），这个尤其赞。</p><p>②曝光相片（refuge），这个我并没有想到，不过被惊艳到了。</p><p>③踩格子画图案（The Tower第三场景）。</p><hr><p>初稿写于2019-07-31</p><p>完稿写于2019-08-03</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;煎饼，灯泡，还有救世主。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计" scheme="https://nessoffice.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="游戏" scheme="https://nessoffice.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>【数学之美】概率论与数理统计-张帼奋版：前一章 基本概念</title>
    <link href="https://nessoffice.github.io/2019/07/29/Notes-Probability_and_Statistics-CH01/"/>
    <id>https://nessoffice.github.io/2019/07/29/Notes-Probability_and_Statistics-CH01/</id>
    <published>2019-07-29T13:22:59.000Z</published>
    <updated>2019-07-29T16:01:38.300Z</updated>
    
    <content type="html"><![CDATA[<p>概率论，玄学的呀……</p><a id="more"></a><p>首先概率这个概念是比较玄学的，虽然它可以被“数学地”用测度刻画，不过那个东西形式上比较可怕，工科的数学书也不会细讲。学概统，万万不能纠结在“什么是概率”“何谓随机”诸如此类的问题上。（虽然经常不自觉地会纠结……）而是当站在集合论的视角看待它，把它看成一种定义良好的运算，然后再结合组合数学中的方法对具体的问题进行求解。</p><h1 id="样本空间、事件、概率、概型"><a href="#样本空间、事件、概率、概型" class="headerlink" title="样本空间、事件、概率、概型"></a>样本空间、事件、概率、概型</h1><p>首先我们引入样本空间和随机事件的概念。定义就不定义了，举个例子说明一下吧：比方说Alice和Bob在玩游戏，那么{Alice胜，Bob胜，平局}对一局而言便是一个<strong>样本空间</strong>。其中三个元素都是一个<strong>样本点</strong>。<strong>事件</strong>有很多：{第二局Alice胜或者Bob胜}、{第三局Alice不负}，等等等等（组合数学的阴魂在这一刻就注定要缠绕在概统上）。我们发现一些事件是好的，比如{Alice胜}，因为其他事件可以由这些基本事件组和而成，我们便称这样只含一个样本点的事件为<strong>基本事件</strong>。</p><p>不同于实变函数复变函数中将”数“作为集合（往往是数域）的基本元素，概统中的主角是”事件“。”事件“并不好定量地描述，这也使得这门课程有了丝玄学的味道（虽然好定量描述也不是不能搞出玄学）。</p><p>事件的运算，和集合论一开始的定义一样一样的，比如我们熟知的De Morgan律，后面经常会用到它。唯一需要关注的便是积事件的符号了：$\cup$往往省去不写。不知道是哪个鸟人打开偷懒的先风……可能因为在概统中$\cap$的出现频率远低于$\cup$吧。</p><p>知晓了样本空间和事件的概念，我们可以引入概率的概念了。同样也不定义了。{Alice胜}的概率是0.3，这句话里面的概率是什么意思？不谈。但你要知道概率是在样本空间和随机事件之后定义的。</p><p>基本概念都懂了，大家可以来解水题了：甲乙丙三人每个人参加集会的概率是0.4，且三人中至少两人参加的概率为0.3，三人共赴的概率为0.05，求三人中至少一人参加的概率。（$key：0.85$）</p><p>然后我们引入<strong>等可能概型</strong>的概念。啥是等可能概型？就是各个基本事件发生的概率都是等可能的。明显，这是一个理想模型，也不是唯一的概型。既然基本事件发生的概率是等可能的，那么求事件的概率便等价于求事件中样本点的数目，于是很多问题在确定了样本点之后便都能够转化为排列组合问题。举个例子：一副52张牌的扑克牌组，求不放回抽样/放回抽样恰能抽到一红一黑的概率。更一般地，可以求a张红牌b张黑牌中不放回取n张时恰取到k张红的概率。这些都是在等可能概型中求概率的问题。（$key1: 26/51, key2: 1/2, key3: \dfrac{C_a^k \cdot C_b^{n-k}}{C_N^n}$）</p><p>等可能概型中的经典问题，抽签问题：袋中有标号为1-n的n个球，a红b黑。每次摸一个不放回，共摸n次。假设各球大小材质均等，求第k次摸红概率。此题至少有三种解法：①将球号的排列作为样本点；②将“哪一次摸红”的排列作为样本点；③将第k次摸到的球号作为样本点。无论是哪种做法，答案均为$a/(a+b)$，等价于第一次摸红的概率。同样的，我们能够证明某两次摸到红的概率和前两次摸到红的概率相等。</p><p>等可能概型中的另一个模型是生日模型。23个人中，有1/2概率使得存在两人生日相同（假设各人的生日在一年365天中是等可能分布的并且不存在多胞胎的情形）。这一论断似与我们的常识相悖。然而，它说的是“存在两人生日相同”而非“选定某人有另一人与其生日相同”。</p><h1 id="条件概率"><a href="#条件概率" class="headerlink" title="条件概率"></a>条件概率</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>条件概率，顾名思义，是“某一条件下的概率”，这个条件自然也是一个事件。我们记$P(A|B)$为在B事件发生的情况下A事件发生的概率。这个概率和$P(A)$有何关系呢？二者的样本空间不一样。明白了这点，很容易便能得出，$P(A|B) = \dfrac{P(AB)}{P(B)}$。</p><p>水题1.4.1：掷一颗骰子两次，已知两次点数之和大于8，求第一次为6的概率。可以用上面的公式做，也可以用缩减了的样本空间来求解。（$key: 2/5$）</p><p>中档偏水题1.4.2：袋中9球，5红4黑。摸4次，不放回。已知第四次摸红，求前两次均摸红概率。（$key: 3/14$）</p><h2 id="乘法公式"><a href="#乘法公式" class="headerlink" title="乘法公式"></a>乘法公式</h2><p>条件概率有个乘法公式，看着很可怕：$P(A_1 A_2 \dots A_n) = P(A_1) P(A_2 | A_1) P(A_3 | A_1 A_2) \dots P(A_n | A_1 A_2 \dots A_{n-1})$。证明的话，把右边式子按条件概率的公式展开就好。这鬼公式有个什么用？它的用处在于，能够依据一些条件概率求出积事件的概率。正如容斥原理虽然右边的项也远多于左边但仍能派上用场一般，这个公式是有其作用的，尤其在已知的条件概率信息较多的情形之下。</p><p>水题1.4.4：某人打靶，凡三内，一回即中概率为0.6，一回不中而二回中概率为0.7，头二回不中而三回中概率为0.8。问三回以内中概率几何。（$key: 0.976$。分析：考虑反面固然容易，但是考虑正面能加深对于条件概率公式的掌握能力，<del>我不知道我瞎说的</del>）</p><h2 id="全概率公式与贝叶斯公式"><a href="#全概率公式与贝叶斯公式" class="headerlink" title="全概率公式与贝叶斯公式"></a>全概率公式与贝叶斯公式</h2><p>首先呢，这个公式是正确的：$P(A) = P(A \overline{B}) + P(A B) = P(\overline{B}) \cdot P(A|\overline{B}) + P(B) \cdot P(A|B)$。</p><p>这个公式有什么意义呢？就是在$P(A)$不好直接求解，而A事件和B事件的关联较为紧密时，我们可以考虑这样，把含A的样本空间划分为和B有关联的样本空间来思考问题。</p><p>把的$B$和$\overline{B}$替换为$B_i$，集合的划分。这样就能得出全概率公式：$P(A) = \sum\limits_{j = 1}^n P(B_j) \cdot P(A|B_j)$。其中$\bigcup B_i = S$且$\forall i \forall j B_i B_j = \varnothing$。</p><p>然后是贝叶斯公式（Bayes formula）：$P(B_k | A) = \dfrac{P(B_k A)}{P(A)} = \dfrac{P(B_k) \cdot P(A | B_k)}{\sum\limits_{j = 1}^n P(B_j) \cdot P(A | B_j)}$。这个公式……虽然很自洽，但看起来比上面的还麻烦？这个公式又有什么意义？<del>我不知道别问我</del></p><p>例题1.4.6：凡三盒，其一内有三黑五红，其二内有二黑二红，其三内有五黑二红。任选一盒，摸二球，不放回。问若一回摸黑，则二回摸黑概率几何。（$key: 42/89$。分析：枚举第一回摸黑的情形下摸到每个盒子的概率）</p><p>例题1.4.7：日有人失K型车一乘，知县持八成把握以J为之。已知为盗者是日所驾为K型车，而此地驾K型车者，恰十三也。问若J是日驾K型车，其为盗概率几何？（$key: 80/86$。分析：这个题目的麻烦之处在于给定的条件。0.8显然是$P(J)$，而0.3实为$P(K | \overline{J})$（这一点不是马上发现的，而是推式子的时候用到才发现的）。另外，再注意到$P(K | J) = 1$，这个题就能做了。）</p><h1 id="独立性"><a href="#独立性" class="headerlink" title="独立性"></a>独立性</h1><p>独立事件不是孤立的定义，而是事件与事件间的关系，比如A表示第一枚骰子投5，B表示第二枚骰子投3，C表示两枚骰子之和为8，那么一般情况下A和B是没关系的，也就是说A的发生与否对B的样本空间不会产生任何缩减作用。但是A、B的发生与否对C的样本空间是会产生缩减作用的。容易看出，这里“独立”的定义和“发生与否”有关，那么，我们可以这样定义A和B独立：$P(B) = P(B | A)$。</p><p>很明显，这个定义和$P(A) = P(A | B)$等价，也和$P(AB) = P(A) \cdot P(B)$等价。实际上书本是用后者来定义A和B独立的。事实上，这些定义和$P(A) = P(A | \overline{B})$、$P(\overline{A}) = P(\overline{A} | \overline{B})$等等，均等价（或者表述为，$AB$相互独立$\Leftrightarrow$ $A\overline{B}$相互独立$\Leftrightarrow \cdots$）。证明，以前两项为例，就是这样的：</p><p>$A = AB \cup A \overline{B} \Rightarrow P(A) = P(AB) + P(A \overline{B}) \Rightarrow P(A \overline{B}) = P(A)(1 - P(B)) = P(A) \cdot P(\overline{B})$，证毕。</p><p>用上面的骰子的例子刻画一下样本空间，我们能够发现，每个样本点都是一个二元组，包含了第一次的信息和第二次的信息。而A和B分别是横着的和竖着的直线，横跨不同的维度。这有点像……笛卡尔积？</p><p>学到这里，我们了解到随机事件A和B间至少有三种关系：包含、不相容、独立。它们间的关系如何呢？它们都是对$P(AB)$与$P(A), P(B)$间关系的刻画。</p><p>例题1.5.1：$P(A) = 0.5, P(B) = 0.4$，求AB分别满足1）不相容；2）B发生必有A发生；3）独立；4）$P(AB) = 0.3$。这四类情况下AB至少有一个发生的概率。这道题目告诉我们，仅仅了解AB的概率还不够，必须要了解AB之间的关系。</p><p>以上是两个事件的情形，那么多个事件呢？我们有定义：ABC中，AB独立，AC独立，BC独立，则称ABC两两独立。而若在此基础上，还满足$P(ABC) = P(A) \cdot P(B) \cdot P(C)$，则称ABC相互独立。相互独立也能推广到n维的情形。</p><p>不难看出，相互独立是个很强的定义，在n元的情况下要$2^{n-1}$个式子都成立才能推出这个结论。式子，也就是信息能否少一些呢？并不能，因为$P(ABC) = P(A) \cdot P(B) \cdot P(C) \not \Rightarrow P(AB) = P(A) \cdot P(B)$。显然，$C = \varnothing$就能证明该式。或者，我们也可以在确定$P(AB) \not = P(A) \cdot P(B)$后再确定$P(ABC)$而动态地调整$P(C)$使得左式成立。总而言之，这两个式子并无甚关联。左边无法推出右边，右边也无法推出左边。关于右边无法推出左边，我们有个好记的例子：袋中有4球，1红1白1黑1红白黑，令A事件表示摸红B事件表示摸白C事件表示摸黑，则ABC两两独立但不相互独立。</p><p>接下来是独立试验和重复试验的定义，前者是试验结果互不影响，后者是子试验条件完全相同。但我们判断事件是否独立往往不是通过定义去判的，而是根据实际情形，比如上面骰子的例子。</p><p>书中后面三道例题，1.5.2，1.5.3，1.5.4，都是值得一做的，<del>比后面的习题质量略高</del>。</p><h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><p>这一章的习题，有些大同小异了，总体而言不难，但可用于巩固概念。</p><p>第二题可一看，以回忆集合论的基础知识。</p><p>第三题及其他题用到了全概率公式。</p><p>第四题指出了：给定$P(A), P(B), P(AB)$，可求出$P(A \cup B), P(\overline{A} \overline{B}), P(\overline{A} B)$等信息。</p><p>第十题是个值得一做的题目（回忆一下组合数学吧2333），其中我们不能通过三号盒子中的球数刻画样本空间——其他两个盒子中的组和对样本数也有影响。</p><p>第十三到十七都是和条件概率相关的，十三稍创新些，其他太过相像，做一道即可。</p><p>第十八题的题干有些新意，尚可一做。</p><p>第二十一题提到了一个判定AB相互独立的充要条件（虽然看起来没什么用），不妨一做，反正这章也没多少证明题。</p><p>第二十四题中提到了“连续抛一枚硬币若干次，$B_j$表示第j-1次抛掷和第j次抛掷是首次出现的一次连续抛掷”。想知道这个$B_j$是否有一般的通项公式，或者递推式？</p><p>第二十七题的第二问可能会做错（菜鸡就做错了，捂脸），可以一看。</p><p>然后呢，还有三门问题，可以一想，此处就不介绍了。</p><p><del>结果学完这章贝叶斯方法还是没搞清楚呢</del></p><hr><p>初稿写于2019.07.23</p><p>完稿写于2019.07.29</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;概率论，玄学的呀……&lt;/p&gt;
    
    </summary>
    
    
      <category term="课程笔记" scheme="https://nessoffice.github.io/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>【图灵之路】基于C语言的数据结构及其算法分析-Weiss版：前两章 基础知识</title>
    <link href="https://nessoffice.github.io/2019/07/29/Notes-Data_Structure_and_Algorithm_Analysis_In_C-CH01/"/>
    <id>https://nessoffice.github.io/2019/07/29/Notes-Data_Structure_and_Algorithm_Analysis_In_C-CH01/</id>
    <published>2019-07-29T13:22:58.000Z</published>
    <updated>2019-07-29T16:01:04.211Z</updated>
    
    <content type="html"><![CDATA[<p>集训的时候发现自己ds真的稀烂（其实早发现了，只是感受没这么强烈），不能不补补了……嗯，先把教材搞透吧。</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>数据结构是什么？提及数据结构我们往往会想到链表、队列、栈、堆、树等等，但事实上，我们在C语言基础课程中所用的int, char, double，都是数据结构。数据结构，顾名思义，便是存储数据的结构。为什么要考虑数据的结构？因为对于不同特点的数据，对于不同的需求，不同的结构处理问题的复杂度（包括实现的复杂度与计算的复杂度）往往大相径庭。随着计算机科学的发展，我们遇到的问题也在增多，为了处理各式各样各不相同的问题，我们需要用各有特色的数据结构辅助程序设计。</p><p>简言之，数据结构是为提升处理问题的效率而被使用的。数据结构的多样表现在不同容器在特点上的的各不相同。故而学习数据结构时我们需要秉承联系的观点，比较的观点，要清楚什么样的问题该使用什么样的数据结构处理，并能对其效率进行科学的分析。</p><p>以上是学习的目标。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>CH01：简单的回顾性的章节，回顾了一些离散中的概念，还有递归的概念。</p><p>CH02：简单的算法分析的章节，介绍了复杂度相关的概念和记号，一些常见简单算法的复杂度分析，结合了图表和较多实例。</p><p>CH03：线性表、栈、队列</p><p>CH04：树的基础，主要介绍了包括B-树在内的搜索树</p><p>CH05：哈希</p><p>CH06：堆</p><p>CH07：排序</p><p>CH08：并查集</p><p>CH09：图论相关算法</p><p>CH10：算法设计相关知识</p><p>CH11：对前面章节的较难的数据结构进行复杂度分析：斐波那契堆，等</p><p><a href="https://wenku.baidu.com/view/30ab767b5acfa1c7aa00ccec.html" target="_blank" rel="noopener">答案链接（狗日的百度文库）</a></p><h1 id="第一章：预备知识"><a href="#第一章：预备知识" class="headerlink" title="第一章：预备知识"></a>第一章：预备知识</h1><p>首先是两个关于“这本书是讲什么的”的例子。这本书讲数据结构也讲算法，在程序正确性的基础上对效率有了更进一步的要求。于是例子，无非是关于效率的重要性的。第二个例子比较无聊此处略去。第一个例子是“找出n个数中的第k大值“。很明显，我们可以用排序的方式或是其他方式得出正确答案。可是这些个方式足够高效吗？当n为1e7的时候，程序要跑几天呢？事实上，我们有解决这个问题的高效的算法，它是这样的：先……</p><p>接着是介绍本书在算法分析时要用到的一些简单的数学知识：指数的运算法则（有哪些呢？初中内容哦），对数的运算法则（换底公式等），若干前缀和的渐进值（几何级数，还有$\sum i^k$，注意k=-1即调和级数的情形），同余的概念及性质，证明的策略（这里只提到了数归、反证法、举反例，离散书里梳理地更详细些）。</p><p>接下来是递归。递归便是自调用，没什么神奇的。因为函数的行为由其参量决定，所以函数递归调用的过程事实上可以看作一张有向图（简单的情况下会退化为链）的生成过程，图中的节点即参量下的函数。只要里头没有环，有终点，ok，程序就能跑出来。不要管字典，把那个抽象成图要复杂多了，虽然这可能更容易理解。递归函数执行的过程很像把归纳倒过来——为了得出结果，我们需要知道上一步的结果。</p><p>所以关于递归的概念还有什么能讲的呢？<del>程序即证明。</del>书中作为例子的print_digit函数的正确性证明和程序内容的一致性，实则体现了数学归纳法与递归的程序设计这两者的内在一致性。故而在程序设计时，我们可以将递归调用的步骤抽象为一个被证明正确的黑箱子，于是只要设计递归的出口（对应于归纳法中的basis step），状态的转移（对应于inductive step）即可，而不必在乎计算机是如何进行递归的。这样的思维方式具有一定的价值（虽然对debug不一定有价值）。</p><p>顺便，书中还说不宜使用递归来进行数值计算，比如计算Fibonacci数列的第n项。它说原因之后讲。不是关于效率，而是关于习惯。</p><p>这一章的练习都没啥好做的。散。浅。少。当然上面哪个部分感觉学得不扎实，还是不妨做一做对应的习题的，虽然这个量实在补不出什么东西。（虽然”这一章的练习都没啥好做的“这种话很潇洒，但其实是我不会做orz。1.4看不懂题意；1.6d感觉答案的形式颇为复杂）</p><h1 id="第二章：算法分析初步"><a href="#第二章：算法分析初步" class="headerlink" title="第二章：算法分析初步"></a>第二章：算法分析初步</h1><p>首先是big-O, big-Omega, big-Theta记号的定义。不懂的同学去翻下离散书，顺带复习一下它们运算的性质。为什么要引入这些记号呢？因为我们要分析程序的时间复杂度。为了简化问题，我们假设内存无限，“基本操作”所用的时间均为一个单位元。这样理想化以后，程序运行的时间便只和程序的细节，还有输入相关了。我们所要关注的，是输入较大时程序的渐进复杂度，即用什么样的函数可以很好地近似它（这些函数也要尽可能简单，多项式，对数，指数，它们的组和，都挺简单。至于系数？那不是主要矛盾。所以可以把$O(n^2)$视作一个等价类，用它可以刻画好多程序的上界呢）。big-O给出的是上界，big-Omega给出的是下界，而big-Theta则是给出了一个类似“等价”的概念。</p><p>好了，有了好的记号（高德纳提出的，膜），我们来研究时间复杂度吧。具体要怎么研究呢？既然复杂度和问题的规模有关系，我们可以先研究一下最坏的情况（worst case），极端数据；再来研究一下平均情况（average case），数据等概率分布时候的平均复杂度。<del>至于什么期望复杂度我不会分析就不说了，比如什么最小圆覆盖，Pollard Rho，太玄了。</del></p><p>为了对复杂度有一些感性的认识，我们来看一个实际的问题：给定序列$a[1 \dots n]$，求$max \{ \sum\limits_{k = i}^j a_k \}$。</p><p>$O(n^3)$做法：枚举i，枚举j，算sigma，求最大值。炒鸡好理解，也跑的炒鸡慢，n=500就跪了。</p><p>$O(n^2)$做法：枚举i，枚举j，算sigma，求最大值。看上去和上面的流程一样？但是上面的做法在计算sigma时做了很多重复的工作。这里，我们可以在枚举j的同时算sigma（维护前缀和的思想），这样复杂度就降下去一个n啦。炒鸡好理解，跑得比较慢，n=10000会跪。</p><p>$O(nlogn)$做法：分治。具体看书，此处不表。很多情况下复杂度出现$log$都可以考虑是不是用了分治，二分，倍增，等等等等。当然，也有些特殊的情况，这在下面会讲。这个复杂度一般情况下都很棒了，n=1e5可以处理。</p><p>$O(n)$做法：滑动窗口！具体看书，此处不表。在枚举j的同时动态地最优地更新i，嗯，就这样。n=1e7可以处理。顺便，这个做法可以在线做，所以它基本没有空间复杂度！太棒了对吧！</p><p>（以上数据范围都是口胡的，没有测试过，不要信以为真呀。然后所谓“会跪”差不多就是超过1s这样）</p><p>上面的复杂度是怎么分析得出的呢？（随便看看就好了）抓住主要矛盾，常数不要管，就管最高次。关注递归，关注循环，大概就差不多了吧……</p><p>然后书里举了一个非常经典的复杂度爆炸的例子：$fib(n) = fib(n-1) + fib(n-2)$。递归运算的冗余操作太多太多了，以至于复杂度从$O(n)$飙到$O(2^n)$。这个例子告诉我们：不要随便用递归代替循环（如果要也一定要记忆化）。</p><p>然后因为对数复杂度好高效，书里就介绍了三种对数复杂度的算法：二分搜索（从这里可以引出数据结构了！）、欧几里得算法、快速幂。其中Euclid算法为何是$O(logn)$的呢？只要注意到$mod(m, n) \leq m/2$这样一个不等式就好了。这能否说明这一算法是$\Theta (logn)$的呢？嗯……这比较困难，需要“pages and pages of sophisticated mathematical analysis”，不过这个问题（对初学ds者而言）似乎没有什么研究的必要？毕竟这个上界已经很强了不是么。</p><p>上面的复杂度很多都是“感知”出来的。为何检验我们的猜想，我们有两种方案：①跑程序，根据数据-运行时间图感受；②推式子，把$T(n)$求出来然后慢慢化。</p><p>然后这章讲的有些东西是比较难的，碰到一些牛逼的数据结构，比如并查集什么的，普通的分析方法就跪了。这就要具体问题具体分析了，在之后的章节会讲。</p><p>习题的话，2-2是定义题，不妨一做。</p><p>2-7提到了个有趣的随机排列生成算法，不妨一看（<em>programming pearls</em>里面也有），另外它对于前两种做法复杂度的分析也值得一看。</p><p>2-10提到了秦九韶算法。</p><p>2-14提到了埃氏筛法的复杂度，这是个问题……答案指向了<em>TAOCP</em>的第二卷第394页……</p><p>2-19是个比较有意思（duliu）的问题。但是并没有看懂n为奇数的情形……</p><p>2-20题意没看懂。</p><hr><p>初稿写于2019.07.17</p><p>完稿写于2019.07.18</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;集训的时候发现自己ds真的稀烂（其实早发现了，只是感受没这么强烈），不能不补补了……嗯，先把教材搞透吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="课程笔记" scheme="https://nessoffice.github.io/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机" scheme="https://nessoffice.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>【白冠之礼】深入浅出密码学：前一章 密码学导论</title>
    <link href="https://nessoffice.github.io/2019/07/28/Notes-Understanding_Cryptography-CH01/"/>
    <id>https://nessoffice.github.io/2019/07/28/Notes-Understanding_Cryptography-CH01/</id>
    <published>2019-07-28T13:22:58.000Z</published>
    <updated>2019-08-07T02:54:07.248Z</updated>
    
    <content type="html"><![CDATA[<p>密码学！</p><a id="more"></a><h1 id="何谓密码学"><a href="#何谓密码学" class="headerlink" title="何谓密码学"></a>何谓密码学</h1><p>虽然密码学中充满了如RSA、AES、PKA等高端现代缩写，但事实上，这已经是门有千年之久历史的古老学科了。自文字出现以来，密码一般也会同步地出现在了人们的生活中。这些是古典密码学，形式古雅而简单，富于趣味性。与之对应的是现代密码学，更“科学”（因为它和数学间的联系较古典密码学更紧密些），更安全，更符合现代文明的需求，但入门难度也更高一些。</p><p>密码学相关的模型有enigma加密机，它背后有一段惊险刺激的故事。还有斯巴达密码棒，虽然常会被作为高中大学的编程水题，但不要因为题目水就瞧不起古人的创意，没准告白的时候就能用上呢（<del>然而这与我有什么关系呢</del>）。</p><p>密码学，cryptology，是个涵盖较广的词，包括cryptography和所谓cryptanalysis。前者包括加密解密的艺术还有一些协议，而后者则强调对密码的安全性进行理论化的分析。而这本书名为<em>Understanding Cryptography</em>，主要是在讲述前者。</p><p>Cryptography主要能分成以下三块内容：对称算法，非对称算法（或公钥算法），密码协议。其实这三者并不并列，只是这三个词出现的频率比较高而已。真要说起来，前两者都是加密的大类，而后者是对加密算法在实际场景下的应用。</p><p>对称算法与非对称算法分别有何优点有何缺陷呢？这是后文所将详述的。在此，我们只需知道前者是双方共享一个密钥，而后者是用户有一个公钥也有一个私钥。看上去后者不太好理解？没事，搜一搜“数字签名”就知道为什么要这样设钥了，而且它的用处远不止用作签名。</p><p>一般来说，对称算法更容易入门些，那我们就来学学吧。</p><h1 id="对称密码学"><a href="#对称密码学" class="headerlink" title="对称密码学"></a>对称密码学</h1><p>首先是概念，先举个例子吧。</p><p>Alice和Bob在通过QQ交流他们对某个题目的想法，然后Bob的手机很容易被黑所以他们的聊天记录可能会被监听。为了让交流的内容不被外人所知，Alice和Bob决定加密他们对话的内容。他们很有古典情怀，所以选择了凯撒加密，双方约定一个密钥，一方在发送时将原文通过密钥加密，另一方也通过这个密钥解密即可。</p><p>上面的例子模拟了一个典型的通信场景，信息源分别为Alice和Bob，他们使用的信道有两个：一个是不安全的QQ，还有一个是相对安全的用于约定密钥的食堂餐桌。然后在前一个信道上可能有非法用户监听。为了在不安全的信道上使通信相对安全，内容不外泄，他们用到了cryptography中的对称密码，其特点是双方共用一个密钥。</p><p>然后他们所用的凯撒加密是一种非常经典（也非常vulnerable）的替换密码。所谓替换密码，顾名思义，就是把一个字母替换为另一个字母。考虑英文字母表中的小写字母，一个字母可能被替换为二十六个字母中的任意一个，而为消歧义性，一个字母的原像应只有一个。（当然，你也可以搞个非单射，一个字母的原像有贼多可能，然后出个题，交代一下原文的hash值，来恶心人）这样的替换有多少类，也就是密钥空间有多大呢？$26! \approx 2^{88}$，很大了。看上去这种加密方式非常不错。</p><p>真的不错么？可以看得出来，bruteforce对于这样的加密一般是相当无力的（一般，为了严谨）。假设一台2019年的标准个人计算机每秒能够检查1e8个密钥（我口胡的，icpc里1s差不多能算1e8这个量级，不知道在这里怎样），那么要遍历完大至1e26的密钥空间要多久呢？1e18秒，1e13年。就算搬来一千台计算机分工也得算到宇宙的寿命翻一倍，很安全。然而，这样的替换没有把原文的统计属性予以一丝一毫的改变。当样本足够大时，英语中各个字母的出现频率会有显著的改变，词频也会趋于稳定。于是，我们便可通过分析统计数据进行解密了。除字母和单词外，还可以通过字母元组的统计规律（如，q后面一般总是跟着u）来进行分析。当然，还需要一些语感和灵感……这是解密的有趣所在。不过随着所谓人工智能的发展，也可通过计算机对此进行分析。</p><h1 id="密码的安全性"><a href="#密码的安全性" class="headerlink" title="密码的安全性"></a>密码的安全性</h1><p>为了知晓密码是否足够安全，我们需要对密码进行攻击尝试。攻击的方式有哪些呢？首先是经典的密码分析，比较登大雅之堂，可以暴力枚举密钥，也可在获悉加密方法的内部结构后进行分析攻击。然后就是比较离谱的攻击方式了：implementation attack，物理玩法，比如测量处理私钥的处理器的功耗搞到密钥；社工，利用人性的弱点，比如冒充公安局说对方涉嫌违法犯罪需要提供密码。</p><p>后两个方法比较玄，不是很学术，所以书后面就不怎么讲了，不过这两个方法还是非常好用的，虽然随着时代的进步人们的防范还有设备的防范都加深了。</p><p>可靠的密码体制需要遵守Kerckhoffs原理，即即便公开密钥以外系统的一切，包括加密解密算法，系统也应足够安全。</p><p>这个原理看上去不太符合常理，因为隐藏细节不是也扩大了“加密/解密算法空间”吗？这样的方案被称为隐蔽式安全性，security by obscurity。但历史经验（书上的例子似乎不够多）告诉我们这样是有风险的。</p><p>遵守Kerckhoffs原理的话，安全传输信息的问题便可以归结到安全地传输、存储密钥的问题上了。所以密钥是否足够robust呢？首先我们得让bruteforce无效化。即密钥空间开得多大能够使密钥保证计算安全？简单计算一下可知，64位虽然不能马上破解但是耗费数小时数天还是能够做到的。而128位要让电子计算机算个几十年。（以上为口胡）这些估算是把计算机性能的提升（摩尔定律）算在内了的。</p><h1 id="两类替换密码"><a href="#两类替换密码" class="headerlink" title="两类替换密码"></a>两类替换密码</h1><p>了解了一下密码分析相关知识，我们来拿简单可爱的古典密码开刀吧！首先是凯撒密码，接着是仿射密码。在分析之前，我们先得用现代化的语言表述这两种（其实是一种）加密算法的内容，而这，涉及到了编码和模运算。</p><p>模运算，相信学过一点初等数论或是基础的计算机课程就不会陌生，此处就略去不表了。书中也便是引入模运算的定义，同余的概念，同余等价类的概念，整数环的定义和若干性质（封闭、可结合、可交换、加法乘法存在不变元、加法存在逆元而乘法不一定存在逆元），如此而已。利用同余等价类可简化计算。对于乘法逆元的存在与否介绍了基于两数是否互素的判别方法。这是两个要点。</p><p>所谓凯撒密码，便是把字母（广义）编码到整数环上，再在环上进行加法运算，仅此而已。这种方式非常的vulnerable，因为它的密钥空间只有26，52，或是其他（总归不会大，即便是用字母表是所有汉字的集合……但这个样子也太为凯撒而凯撒了吧？），计算机秒秒钟就能算出来，甚至都不用进行频率分析。唯一的麻烦就是要判定可能的plaintext是不是readable的，不过浏览26个字符串对人类而言还是容易的，尤其很多扫一眼就能退出check了。（当然，也能用计算机分析readable指数，训练个模型什么的，可是咱也不会呀\cry）</p><p>然后是仿射加密，affine。凯撒的加密是$e_k (x) = y \equiv (x + k) mod 26$，则仿射加密便是$e_k (x) = y \equiv (ax + b) mod 26$。解密是反函数。需要注意的是，此处密钥需满足$gcd(a, 26) = 1$，不然没有乘法逆元解密不总是能进行。仿射加密看上去比凯撒牛逼了很多，真的如此？并不是。由乘法原则，密钥空间=（a的可能取值数）×（b的可能取值数）=12×26=312，还是小的可怜呀，不过对入门级CTFer来说可能要难一丢丢（笑）。</p><h1 id="要点回顾"><a href="#要点回顾" class="headerlink" title="要点回顾"></a>要点回顾</h1><p>1.不要乱开发自己的加密算法。（这主要是在实际应用中，瞎搞很容易出问题；不过在学习生活中瞎搞还是好玩的，比如用把告白的text加个自己瞎搞的密然后把代码给妹子让她分析得出原文，<del>然而这与我有什么关系呢</del>）</p><p>2.不要使用未经证明的加密算法或未经证明的协议，基本同上。这也是对Kerckhoffs原理的强调。</p><p>3.攻击者总是试图寻找密码体制的最薄弱之处，大的密钥空间并不保证密钥的安全性因为它不一定能抵抗分析攻击。</p><p>4.用于防御bruteforce的对称算法的密钥长度为128位或以上为宜，64位存在危险。</p><p>5.模运算是一种以严格数学方式表示古典密码方案的工具。</p><h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><h2 id="替换密码解密题"><a href="#替换密码解密题" class="headerlink" title="替换密码解密题"></a>替换密码解密题</h2><p>以下密文是使用替换密码加密得到的，请在不知道密钥的情况下解出原文。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lrvmnir bpr sumvbwvr jx bpr lmiwv yjeryrkbi jx qmbm wibpr xjvni mkd ymibrutjx irhx wi bpr riirkvr jx ymbinlmtmipw utn qmumbr dj w ipmhh but bj rhnvwdmbr bpr yjeryrkbi jx bpr qmbm mvvjudwko bj yt wkbrusurbmbwjk lmird jk xjubt trmui jx ibndt</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wb wi kjb mk rmit bmiq bj rashmwk rmvp yjeryrkb mkd wbi iwokwxwvmkvr mkd ijyr ynib urymwk nkrashmwkrd bj ower m vjyshrbr rashmkmbwjk jkr cjnhd pmer bjlr fnmhwxwrd mkd wkiswurd bj invp mk rabrkb bpmb pr vjnhd urmvp bpr ibmbr jxrkhwopbrkrd ywkd vmsmlhr jx urvjokwgwko ijnkdhrii ijnkd mkd ipmsrhrii ipmsr wdj kjb drry ytirhx bpr xwkmh mnbpjuwbt lnb yt rasruwrkvr cwbp qmbm pmi hrxb kjdjnlb bpmb bpr xjhhjcwko wi bpr sujsru msshwvmvwjk mkd wkbrusurbmbwjk w jxxruyt bprjuwri wk bpr pjsr bpmb bpr riirkvr jx jqwkmcmk qmumbr cwhh urymwk wkbmvb</span><br></pre></td></tr></table></figure><p>这很明显是频率分析。虽然已经有造好的<a href="https://quipqiup.com/" target="_blank" rel="noopener">轮子</a>了（一开始不会做就直接丢进去了，也是一种选择啊），但还是想自己瞎搞搞搞看。写完了之后封装了一下，就是这样的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LEN = <span class="number">26</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Letter</span>&#123;</span><span class="keyword">char</span> ch;<span class="keyword">int</span> fre;&#125;; <span class="comment">// fre for frequency</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Letter&amp; lhs, <span class="keyword">const</span> Letter&amp; rhs)</span></span>&#123;<span class="keyword">return</span> lhs.fre &gt; rhs.fre;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FREQUENCY_ATTACK</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Letter letters[LEN];</span><br><span class="line"><span class="keyword">char</span> cipher_text[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">char</span> in_table[LEN];</span><br><span class="line"><span class="keyword">char</span> out_table[LEN];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">char</span>&gt; dict;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">load_cipher_text</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span></span>&#123;<span class="built_in">strcpy</span>(cipher_text, str);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_letters</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; LEN;i++)</span><br><span class="line">&#123;</span><br><span class="line">letters[i].fre = <span class="number">0</span>;</span><br><span class="line">letters[i].ch = i + <span class="string">'a'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_frequency</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="built_in">strlen</span>(cipher_text);i++)</span><br><span class="line">letters[cipher_text[i]-<span class="string">'a'</span>].fre++;</span><br><span class="line">sort(letters, letters + LEN, cmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_frequency</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> ch = <span class="number">0</span>;ch &lt; LEN;ch++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c: %d\n"</span>, letters[ch].ch, letters[ch].fre);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"order by frequency: "</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; LEN;i++)</span><br><span class="line"><span class="built_in">putchar</span>(letters[i].ch);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">analysis</span><span class="params">(<span class="keyword">bool</span> do_print)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">init_letters();</span><br><span class="line">get_frequency();</span><br><span class="line"><span class="keyword">if</span>(do_print) print_frequency();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dict_generate</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str1, <span class="keyword">const</span> <span class="keyword">char</span>* str2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(in_table, str1);</span><br><span class="line"><span class="built_in">strcpy</span>(out_table, str2);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; LEN;i++)</span><br><span class="line">dict[in_table[i]] = out_table[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">translate</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="built_in">strlen</span>(str);i++)</span><br><span class="line"><span class="built_in">putchar</span>(dict[str[i]]);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_letters_not_in_out_table</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; table;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="built_in">strlen</span>(str);i++)</span><br><span class="line">table[str[i]] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"letters that aren't in the out_table: "</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; LEN;i++)</span><br><span class="line"><span class="keyword">if</span>(!table.count(i + <span class="string">'a'</span>))</span><br><span class="line"><span class="built_in">putchar</span>(i + <span class="string">'a'</span>);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>思路就是先求出频率，再排序，再把这段文本中按频率降序的字母表和大量文本中按频率降序的字母表建立一个映射，思路是这样的，然后main函数里面是这样的，以第二段文本为例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// exercise 1.1.2</span></span><br><span class="line">FREQUENCY_ATTACK target;</span><br><span class="line">target.load_cipher_text(<span class="string">"wb wi kjb mk rmit bmiq bj rashmwk rmvp yjeryrkb mkd wbi iwokwxwvmkvr mkd ijyr ynib urymwk nkrashmwkrd bj ower m vjyshrbr rashmkmbwjk jkr cjnhd pmer bjlr fnmhwxwrd mkd wkiswurd bj invp mk rabrkb bpmb pr vjnhd urmvp bpr ibmbr jxrkhwopbrkrd ywkd vmsmlhr jx urvjokwgwko ijnkdhrii ijnkd mkd ipmsrhrii ipmsr wdj kjb drry ytirhx bpr xwkmh mnbpjuwbt lnb yt rasruwrkvr cwbp qmbm pmi hrxb kjdjnlb bpmb bpr xjhhjcwko wi bpr sujsru msshwvmvwjk mkd wkbrusurbmbwjk w jxxruyt bprjuwri wk bpr pjsr bpmb bpr riirkvr jx jqwkmcmk qmumbr cwhh urymwk wkbmvb"</span>);</span><br><span class="line">target.analysis(<span class="literal">true</span>); <span class="comment">// print the frequency</span></span><br><span class="line">target.dict_generate(<span class="string">"rbmkwjiphdvsunxyoatcqlegfz"</span>,</span><br><span class="line">                     <span class="string">"etanioshldcprufmgxywkbvzq_"</span>);</span><br><span class="line"><span class="comment">//                      etaoinrshdclmpufgwybkjvxqz</span></span><br><span class="line"><span class="comment">// the row above shows the frequency of letters in English</span></span><br><span class="line">target.translate(target.cipher_text);</span><br><span class="line">target.translate(<span class="string">"bjlr"</span>);</span><br><span class="line">target.print_letters_not_in_out_table(<span class="string">"etanioshldcprufmgxywk vzq "</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码应该比较容易看懂，但问题在于dict_generate对应的表是如何生成的呢？因为样本的问题，此表和普遍接受的英语字母频率表并不是完全一致的，所以需要微调，不然直接放进去搞出来的原文并不是readable的。那么怎么调呢？本人的做法是先把这个out_table全填上.（LaTeX不方便输入下划线，就用.替换了），方便确认各个单词的完整度和字母数。然后把et两个字母填进去，因为大数定律，它们更有可能占在原来的位置上。然后知道了et就能找the了。我们注意到，bpr在原文中出现了很多次，有理由相信它对应于the。这样之后发现了形如th.t的单词，就可以填a了。然后还有形如eas.，形如tas.的单词，都能填了。这样之后好像陷入瓶颈了？让我们来找一些特别短的差不多能够猜出来的词吧。已经知道了b对应t，那么bj能对应什么单词呢？也只有to了吧。确定了j对应于o，然后密文中又有很多的jx，又能确定x对应于f了。密文中有个单词w，而单个字母组成的单词似乎只有a和I，a又用掉了，这样就能确定w就是i了……如此。到后面几乎一下就能确定一个单词了，做得很快。print.letters.not.in.out.table是在大后期确定哪个单词还没有使用的。然后找到了一个差不多可以填的单词可以手工模拟一下（懒得写anti.translate这个函数了）其密文再搜索一下找到它。如此这般如此这般，就能做出来啦！（一开始对着书抄密文把y抄成v了，结果搞出来covement，soce这种单词……然后开始我不是用下划线占位而是用空格占位的，后面的单词看着特奇怪，很怀疑自己是不是有映射弄错了……）</p><h2 id="其他题目"><a href="#其他题目" class="headerlink" title="其他题目"></a>其他题目</h2><p>感觉只有第一个题目比较有意思（因为是手动造轮子吧，虽然扔到quipquip里面也是秒做的），其他题目都太简单了？不是很有挑战，但还可以。</p><p>第二题的话直接暴枚二十六个密钥然后找readable的原文，以前遇到凯撒我都是这么做的。今天它要我基于字母频率来攻击……其实也好办，跑一下频率，然后令k = ‘e’ + 26 - ‘t’就好了，大数定律。（虽然一点也不大）第十一题直接模拟，不过这行话是Dodgeson写的吗我居然毫无印象……</p><p>第三题这种费米问题，条件给得多了呀……不过我们现在也是在科学地分析嘛，精确点也好。注意对数的妙用，就差不多了。</p><p>第四题也足够让我们感受平时的8位密码的robust了，从而能够理解为什么只有小写字母是“弱”而有小写有大写有数字就是“强”，只要有一个位置的可能，密钥空间就能增加这么多。</p><p>第五六七八九十题，都是数论相关，包括等价类的应用，求逆元等，基础。其中1.9提到了“离散对数”的概念，这个东西很有用的。十是欧拉函数，看到它我想到了最近看到的欧拉乘积公式……</p><p>第十三题提到了选择明文攻击。这是个有趣的概念，想象两国交战中你作为间谍无法获取密钥的情报但能够发送加密的信息，也就是你能够选择一些原文，知道这段原文的密文。如果是这样，你如何攻击密码呢？仿射自然是很好破译的，但其他呢？</p><p>第十四题提到了多次加密。显然，对于放射加密而言多次加密完全没有扩大密钥空间的作用，没有实质性的效果（除了唬人）。但是对于DES，多次加密就有意义了……</p><hr><p>初稿写于2019.07.23</p><p>完稿写于2019.07.28</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;密码学！&lt;/p&gt;
    
    </summary>
    
    
      <category term="课程笔记" scheme="https://nessoffice.github.io/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
      <category term="信息安全" scheme="https://nessoffice.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>【朝花夕拾】吉静文选 凝望</title>
    <link href="https://nessoffice.github.io/2019/07/27/History-My_Essays-The_Stones/"/>
    <id>https://nessoffice.github.io/2019/07/27/History-My_Essays-The_Stones/</id>
    <published>2019-07-27T11:53:50.000Z</published>
    <updated>2019-07-27T14:04:19.749Z</updated>
    
    <content type="html"><![CDATA[<p>塑料诗集。</p><a id="more"></a><p>（版权所有，严禁转载。违者自行承担相应法律责任）</p><p>塑料诗集。</p><p>（本来是叫“块砾集”的，取自《阿房宫赋》“鼎铛玉石，金块珠砾，弃掷逦迤。”但这个名字感觉实在太……微妙了，就换成里头一篇的名字了，希望不要重名了……）</p><center><strong>在海那边</strong></center><center>在山的那边</center><center>终于不是山铁青着脸</center><center>妈妈，那是海啊</center><br><center>我奔向蔚蓝色的梦想</center><center>却淹死了</center><br><center><strong>当你开始仰望星空</strong></center><center>三十五万年前你开始仰望星空</center><center>昨天你刚刚踏上月球</center><center>七百万年前你才诞生在这大地</center><center>诞生在这三十六亿年来无数生灵存活又死灭的大地</center><br><center><strong>凝望</strong></center><center>等待，漫长的等待</center><center>沉默，不尽的沉默</center><center>我等成了一座化石</center><center>可我手里的馍还没干</center><br><center><strong>现代文明</strong></center><center>飞天</center><center>向上</center><center>向上</center><center>向上</center><center>向上</center><center>向上</center><center>烟囱</center><center>楼栋</center><center>井盖</center><center>管道</center>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;塑料诗集。&lt;/p&gt;
    
    </summary>
    
    
      <category term="创作" scheme="https://nessoffice.github.io/tags/%E5%88%9B%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>【围炉夜话】《论语》随谈</title>
    <link href="https://nessoffice.github.io/2019/07/27/Toughts-The_Analects_Of_Confucius/"/>
    <id>https://nessoffice.github.io/2019/07/27/Toughts-The_Analects_Of_Confucius/</id>
    <published>2019-07-27T11:50:59.000Z</published>
    <updated>2019-07-27T13:04:47.052Z</updated>
    
    <content type="html"><![CDATA[<p>这并不是本学术性或是宗教性的著作，这只是本有趣的书。</p><a id="more"></a><h1 id="缘起——《论语》的价值何在"><a href="#缘起——《论语》的价值何在" class="headerlink" title="缘起——《论语》的价值何在"></a>缘起——《论语》的价值何在</h1><p>一直不大喜欢儒家学派，不是很喜欢它对人伦方面的重视，对孔子还有他的弟子也一向没有感觉。但这些大都属于刻板印象（印象：陈腐、迂阔、古板、严肃），因为我并没有认真翻过这本书，只是单纯的不喜欢而已。</p><p>其实拨开偏见，《论语》还是挺有意思的。它的文学价值非常高，这是笔者的主要欣赏点。</p><p>当然，说《论语》，还是不能脱离儒学——它的环境的。那么我们也来聊聊儒学吧……就渗透到文章里，不单独拎出来讲了。</p><h2 id="记忆"><a href="#记忆" class="headerlink" title="记忆"></a>记忆</h2><p>高中语文课的某个阶段上的是《&lt;论语&gt;选读》，安排在《外国小说欣赏》之后。本以为会特无聊的，但其实这门课还不错（文史类的课程很看老师。至少在教学上，我认为自己以前碰到的文科老师都挺好），虽然现在我什么也记不起来了……</p><p>以前晚上有看闲书的习惯（在寝室里没话讲，也没有串寝的习惯），有一段时间看的就是《论语别裁》，老师在开《&lt;论语&gt;选读》之前推荐的若干注疏中的一本，想也不会看很多，就随便挑了一本。看看还挺好看。不过之后偶然想道“程子曰：今人不会读书。如读《论语》，未读时是此等人，读了后又只是此等人，便是不曾读。”不由得想到自己，突然觉得很悲哀。就没读了。对这一阶段的语文学习也感到异常的悲哀。这样的我只能把《论语》当文学作品看，否则只能为考试而学习了，而我不喜欢这样。</p><h2 id="历史价值"><a href="#历史价值" class="headerlink" title="历史价值"></a>历史价值</h2><p>对《论语》，人们的评价自然是两极化的。什么“圣人之书”“国学经典”，古人这么说，今天许多人也这么说（其实“四书”一个名号就够了，它较之“四大名著”更有推崇的意味）。或者“文化糟粕”，把孔老二和他提倡的旧道德都踩一踩。这在新文化运动时期，文革时期尤甚。今天很多人也这么说，一般语气都比较激进，看得出来心理年龄总体比较年轻。</p><p>所以我们该怎么看呢？辩证地看呗。首先《论语》它不仅仅是本书而已，它是儒学的代表作品之一，它的历史地位，还有它在历史进程中的影响都是至关重要的，不可不考察的。从思想史的角度看，《论语》显然是无法避开的在中华民族民族特点塑造上的一笔浓墨。对《论语》的接受，不仅仅是对这一本书的接受，更是对于一种价值体系的接受，也是政治相互作用上的文化表现。《论语》虽然是静态的事物，但人们对其的诠释与看法自然是随着时代变化而变化的——汉代的《论语》和朱熹以后的《论语》在思想体系建设上所起的作用自然不会完全相同，而是随着政治的趋势而有所改变。</p><p>我们当然有权利认为《论语》不足以被称为经典，及其背后儒学的无甚价值。比如王小波《我看国学》里这一段，就说得挺在理，至少我也是这么认为的。</p><blockquote><p>现在可以说，孔孟程朱我都读过了。虽然没有很钻进去，但我也怕钻进去就爬不出来。如果说，这就是中华文化遗产的主要部分，那我就要说，这点东西太少了，拢共就是人际关系里那么一点事，再加上后来的阴阳五行。这么多读书人研究了两千年，实在太过分。</p></blockquote><p>然而，我们否定不了《论语》，其背后的儒学在历史进程中所发挥的作用，它在国家治理、文化共同体构成、民族凝聚力提升上的作用。</p><h2 id="文学价值"><a href="#文学价值" class="headerlink" title="文学价值"></a>文学价值</h2><p>《论语》中的语言特别活泼具有表现力，倒装，语气词连用，反问，反复，对偶……应有尽有。许多语句脍炙人口，兼具诗歌的艺术性与格言的思想性。</p><p>《论语》的人物塑造是相当成功的，可谓形神兼备。一个表情，一句反复，便能把人物的亮点给点出来了。着墨较多的人物包括孔子、颜回、子路等。孔子很可爱，循循善诱的，和弟子的交流没有架子。子路就比较莽，看着傻乎乎的，但挺努力，结局也叫人唏嘘。</p><p>讲文学价值不能不结合文本，但手头没有《论语》……当年的笔记也在家里睡觉，改日再写吧。</p><h2 id="和《理想国》的比较"><a href="#和《理想国》的比较" class="headerlink" title="和《理想国》的比较"></a>和《理想国》的比较</h2><p>当然，我们也可以用比较的观点来看。一种比较是把《论语》和《理想国》放到一起，因为这两部作品比较像，都是语录体作品，都是古代社会差不多时段的经典，相关人物也有颇多相似之处。孔子与苏格拉底（虽然是披着苏格拉底外衣的柏拉图），相似而不相同，值得放到一块来研究。</p><p>这样的比较一般比较体系化，比如可以比较二者的教育观，二者对理想政治的看法，二者对世界本源的认识，等等。这些个意识和其社会环境也是不无关系的，于是我们还可以比较两个社会的分别……</p><p>书不在手里，没有史料，ddl也不在线，改日再写。（咕咕咕）</p><h1 id="《论语》的读法"><a href="#《论语》的读法" class="headerlink" title="《论语》的读法"></a>《论语》的读法</h1><p>就是本书而已，哪来那么多读法。瞎读即可。读得开心就读，不想读了就扔掉，这是看闲书的态度。没必要关注它的名号，没必要把它当正经书读，也没必要研究得很透（文科生自觉忽略）。喜欢谁的注疏就拿来看，就这样。</p><h2 id="个人读法"><a href="#个人读法" class="headerlink" title="个人读法"></a>个人读法</h2><p>个人是把《论语》作为格言集，随便翻翻，看到有感触的再细看，沉淀在记忆中，等到自己有了相似的体验后再把它拎出来，仔细端详……</p><p>可能对某一句会有很多很多想法，可能对另一句一点想法也没有（比如孝悌，说有什么意思，行动呗）。对后一类会忽略，对前一类则会把与之相关的思考挂在一起，等到什么时候堆足够高再把它们汇总起来，写到一块去。</p><p>不懂古文，只会望文生义，孔子的原意和我的想法可能差了十万八千里。不过话说回来意思不一样，又如何呢？我写的只是我眼中的，而不是大家眼中的《论语》呀。</p><p><strong>有朋自远方来，不亦说乎？</strong></p><p>以前我总觉得这不是废话吗……不爽，我哪来的朋友。这句话没意思。</p><p>而刘震云则能从这句话想到，什么才是朋友，这样一个尖锐的问题：</p><blockquote><p>如讲到“有朋自远方来，不亦乐乎”，徒儿们以为远道来了朋友，孔子高兴，而老汪说高兴个啥呀。恰恰是圣人伤了心。如果身边有朋友。心里的话都说完了，远道来个人，不是添堵吗？恰恰是身边没朋友，才把这个远道来的人当朋友呢；这个远道来的人，是不是朋友，还两说着呢；只不过措着这话儿，拐着弯骂人罢了。徒儿们都说孔子不是东西。老汪一个人伤心地流下了眼泪。</p></blockquote><p>选自《一句顶一万句》。全国卷有篇《塾师老汪》，是里面故事的缩写版，不妨一看（虽然经常在做语文《五三》的时候情不自禁地看阅读摸鱼，但还是不喜欢喜欢的文章成为高考题的感觉）。</p><p>于是乎，现在看到这句话，则会心生一丝凄凉的感觉。</p><p>但其实不应该这么割裂地看的。这半句话出自《论语·学而》，讲学习呢（虽说不是学术是伦理），前面跟着句“学而时习之，不亦说乎？”后面跟着句“人不知而不愠，不亦君子乎？”所以更好的解读是把这三句连在一起，放到这整篇里面看。于是，这三句主要在说学习的第一法则：复习并能从中得到快乐（这需要第一遍的学习形成了足够清晰完整度足够高的知识体系），和他人交流并从中收获友谊与喜悦，君子地处理学习中的信息不平等问题。看上去这三句内部关联不是很大？管他呢。如果我是孔子，我也不会把“不亦说乎”的充分条件枚举一遍列出来。而是，根据自身经验，感觉复习很快乐，和他人交流很快乐，把这些东西扔到“不亦说乎”堆里。平时聊天把堆顶的元素弹出来。啊，复习真快乐啊；啊，和朋友交流真舒服啊；啊，友善的交流才是君子啊。最后有个递进，还朗朗上口，好，徒儿们，记下来。</p><p>再比如这句。</p><p><strong>学而不思则罔，思而不学则殆</strong></p><p>以前只是觉得这句话很对，很合理，嗯，就这样。没啥感觉。</p><p>而这或许是因为没有体验过“罔”的感觉吧。这句和上一句一样，再小学课本里的《&lt;论语&gt;十则》这篇里都找得到。真的，小孩子对“罔”有什么感觉……</p><p>而在搞竞赛的时候，在被一个题卡了若干小时后翻看题解毫不意外地发现自己对这部分的知识一无所知的时候，翻开崭新的教程，准备接受知识的洗礼时，很容易会陷入迷惘。虽然想要学习想要提升，但在学了一页又一页的定理而面对例题仍手足无措，看到题解仍满腹疑惑，对自身的价值，对自己的学习能力，对自己过往的努力，也可能产生骤起的挥之不去的怀疑。学而不思，让我们只看到了知识海洋的浩淼与深不可测，于是乎我们开始迷惘。</p><p>每当此时，我们不妨放下脚步，停止打了鸡血一般的猛灌猛学，睡一觉，同时认真思考一下自己为何而迷惑，自己要学习些什么。总之信心不能耗散。</p><p>为什么这个题题解是这样的呢？它是裸题吗？它一定要用这种方法吗？这一方法体现了什么思想？用到了什么性质？还有什么样的模型可以用这种方法解决？等等等等。我们有很多的疑惑。首要的一步是把纷乱的疑惑归结起来，整理出其层次关系，再逐个击破。这样贯彻了自己思考的学习，往往较灌输式的学习（不仅包括没有思考地听老师讲，也包括没有思考的看书）来得有效果。</p><p>思考固然有乐趣，然而一味沉浸在自己的思索而妄图搭出学科的大厦来，对大多数人而言是不大可能的。思考之上，当思考我们思考时思考什么。什么样的问题需要考虑？知识点间能组建出什么样的联系？这些问题往往不能通过简单封闭的思索得出答案，而需要几代人的努力加上思想的沟通。而学习，便是让我们一窥这些问题的答案的大门。反过来说，思而不学，则无法更大地延伸自己的思维，反而可能造就井底之蛙般的学习态度乃至人生态度，这便是其有害之处。</p><h2 id="他人读法"><a href="#他人读法" class="headerlink" title="他人读法"></a>他人读法</h2><p>没读过相关的正经学术著作，只读过闲人写的闲文章，是语文老师发的若干课后阅读，她们整理的这系列阅读质量都挺不错。上到《知其不可而为之》这课时候课后阅读是相关的文章，都挺好，虽然我都忘掉了，只记得一篇周国平的《孔子的洒脱》，写得挺洒脱。</p><p>随着经济社会的发展，中产阶级队伍的壮大，市面上出现了许多和《论语》相关的一些“通俗著作”。这些作品的特点便是销量高但生命周期和出书周期短，内容和《论语》虽有关联，但夹杂私货甚多，可谓挂羊头卖狗肉。具体是哪些大作就不一一点名了。其他传统名著也有相关的“通俗读本”“xx解读”，不过近年来风向也有所改变。此类书市场的繁荣是营销的成功，但却是文化的失败。资本险恶的呀，我们当认清其本质，重视经济在这些社会乱象中的作用，用科学的理论武器分析这些社会现象的当下和未来（知道我在说什么吧，就不点出来了）。至少我们得清醒，媒体眼中的《论语》，不一定总是它原本的样子，也不要总是把其宣传信以为真，要保持自己独立的思考呀。</p><p>私以为将传承《论语》及其背后的传统文化的一种值得推崇的方式，不是营销式地推崇所谓国学，将其神秘化、功利化，而是将传统文化的精髓渗透在自己的理解中，同时加上自己时代的解读。除去上文所述刘震云从“有朋自远方来不亦说乎”引出其对于中式人际关系的思考（事实上，刘震云的小说更能让人想到《水浒》，在来与回之间的个体的无奈），笔者还很喜欢刘慈欣的《朝闻道》，从科研工作者对真理的求索中，我们可以看到古士大夫求索理想政治精神的影子，可以看到“人”的光辉。</p><p>或者是太祖的诗词中，《水调歌头·游泳》里的豪迈，“逝者如斯夫”，时间过得很快呀，已经是我们的时代了，小子们努力啊。</p><h2 id="印象"><a href="#印象" class="headerlink" title="印象"></a>印象</h2><blockquote><p>曰：“是知其不可而为之者与？”</p><p>暮春者，春服既成，冠者五六人，童子六七人，浴乎沂，风乎舞雩，咏而归。</p></blockquote><hr><p>开始于2019-06-03</p><p>完稿于2019-07-27</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这并不是本学术性或是宗教性的著作，这只是本有趣的书。&lt;/p&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="https://nessoffice.github.io/tags/%E9%98%85%E8%AF%BB/"/>
    
      <category term="随想" scheme="https://nessoffice.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>【围炉夜话】神游天外的典型场景，及天外的风景</title>
    <link href="https://nessoffice.github.io/2019/07/23/Toughts-On_Wondering/"/>
    <id>https://nessoffice.github.io/2019/07/23/Toughts-On_Wondering/</id>
    <published>2019-07-23T11:50:59.000Z</published>
    <updated>2019-07-27T13:05:41.715Z</updated>
    
    <content type="html"><![CDATA[<p>总觉得自己不是个心静的人，学习新知识的时候倒是能集中精神一些，但写作业，复习的时候就经常分神，感觉好无聊，宁愿发呆也不想学习。除了复习还有什么时候会分神呢？分神的时候会想些什么呢？这好像也是个有意思的话题。</p><a id="more"></a><p>总觉得自己不是个心静的人，学习新知识的时候倒是能集中精神一些，但写作业，复习的时候就经常分神，感觉好无聊，宁愿发呆也不想学习。除了复习还有什么时候会分神呢？分神的时候会想些什么呢？这好像也是个有意思的话题。</p><p>（我脏话越说越多了……不过这篇主要是娱乐向的，可能有些粗糙？但也挺好玩的）</p><p><strong>听听力</strong>：听力好多呀（几十篇），发怵。不行我不能怂我要锻炼自己提升英语水品。点开这篇听力，嗯，我要好好听！（30s后）？？？他在说什么？我天哪这个话题好无聊不想听停停停刚才那句话是什么唉我又想上网冲浪了查单词的时候水一水好了嗯我刚才到底在干嘛呀！我不是在听听力吗！不行不行，静心，静心……我天哪我到底听了什么东西这个部分有提到吗……倒放倒放……诶我怎么又在摸鱼……</p><p><strong>英语阅读</strong>：（看不懂的时候）这鬼文章在写什么？？？这个部分是干嘛用的？？？天哪上一句又在讲什么这篇文章好搓啊越看越恶心我去喝口水冷静一下……嗯刚才看到哪了……我刚才有看吗？？？不行不能这样瞎看，我要认真分析文章结构把这篇狗屎东西做掉。第一段它讲了……我怎么在看第二段？</p><p><strong>学算法</strong>：可持续化是什么东西？什么是权值线段树？今天晚上要吃什么？好饿我想吃零食。这个人博客怎么写成这样啊差评。我去越看说明越看不下去算算算看代码得了。？？？这什么码风呀，o是什么东西k是什么东西你tm变量名也不解释一下搞毛线啊。模拟一下样例好了，先进入这个函数，再来是……？？？不行这个人写的太差了，下一篇。omg怎么又是这种风格……</p><p><strong>做项目</strong>：哇这个功能还能这样实现，太棒了吧！哇这个库这么好的吗！我得用它来重构一遍代码……舒服……漂亮……（5h过后）我今天都在干嘛啊啊啊啊啊！</p><p><strong>复习wjf</strong>：啊这本书好新一点也不想看，啊后天就考试了不行不行我得认真复习不然要挂科了。上次看到哪了……诶我好像是第一次复习啊，级数……（打哈欠）饿死了好想睡。啊不想看不想看不想做题我想睡觉我想吃东西我想玩（果断丢书，开始水手机）</p><p><strong>睡觉</strong>：想第一类事情（突然）-&gt;想第三类事情（嗯）-&gt;想第七类事情（烦烦烦，转个身）-&gt;想第二类事情……我怎么还没睡着……热热热热热热死了……哇我怎么还没睡着……</p><hr><p>完稿于2019-07-23</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总觉得自己不是个心静的人，学习新知识的时候倒是能集中精神一些，但写作业，复习的时候就经常分神，感觉好无聊，宁愿发呆也不想学习。除了复习还有什么时候会分神呢？分神的时候会想些什么呢？这好像也是个有意思的话题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随想" scheme="https://nessoffice.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>【围炉夜话】吉静关于朋友的一些胡思乱想，及友链</title>
    <link href="https://nessoffice.github.io/2019/07/22/Toughts-On_Friends/"/>
    <id>https://nessoffice.github.io/2019/07/22/Toughts-On_Friends/</id>
    <published>2019-07-22T11:50:59.000Z</published>
    <updated>2019-07-26T14:28:27.343Z</updated>
    
    <content type="html"><![CDATA[<p>海水退去 露出了漫漫的旷野</p><a id="more"></a><h1 id="高中"><a href="#高中" class="headerlink" title="高中"></a>高中</h1><p>先讲朋友。ljq叫我广交朋友，但我不是很喜欢这样的建议。不是很愿意主动和别人结交。高中时候班主任也经常给我提这样的建议，我也都是“哦哦哦”过去的。你们不是我，也不了解我的平凡的普通的真实的我也不清楚为什么会感到的尴尬。</p><p>我没什么朋友，独来独往了若干年，没觉得这样有什么不好。自己学习，自己探索，自己难过。自己难过比较难受。可能和他人分享会好受些？不觉得。人真的能够理解他人吗？真正地，理解他人的痛苦，彷徨，徘徊与失落？我相信每个人都会有这样的感受，但不相信人能够<strong>理解</strong>他人的这番折磨。没有原因，仅是不相信而已。</p><p>有时候和同学走在一起，会有貌合神离的感觉。感觉大家都不喜欢我。和蒋哥们走一起时都是他们在聊天。感觉自己可有可无。好像是高二的时候吧，因为相关的原因不想吃饭，包括中饭，包括晚饭。饥饿很好，能把我的想法从那些乱七八糟的很烦很不爽的事情上转移到对饥饿本身的体味上。当然饿多了身体也吃不消，白天头会很晕，晚上会睡不着想着想吃东西想吃东西。于是就只能夜自修后去吃夜宵了。吃夜宵的时候，有时翔中会坐过来，这时候往往会感到一种莫名的感动。</p><p>感觉自己比较黏，谁都黏。大家似乎不喜欢这样的我？那我就只黏着自己好了。很多时候会很封闭，不愿意和人来往。宁愿盯着题目毫无思绪地发呆，宁愿一直一直生闷气，也不想去打扰别人。并不是没有尝试过，只是试的次数太多我厌倦了。错的似乎总是自己。我没有道理，我比较偏执。难过的也是自己，虽然别人也不好受？但我体味不到，理解不了。讨厌将心比心，当且仅当我很不很不开心。</p><p>高三时候心理可能正常了一些吧，虽然不是所有时候。晚上喜欢和阿彪聊天，虽然人家经常不理我。”睡觉。“但也不总是不理我。印象比较深的是四月选考结束后的晚上，我因为网络太崩成绩还没查出来，心还悬得很，完全睡不着。聊未来，聊选择，不知聊些什么，不知聊到几点。虽然我们基本都是自说自话，自问自答，但就是能沉浸在这样没有逻辑的对话中，在充满不确定的前方中感到一丝安定（当然，如果之后发现考试崩了，想必我的回味也不会是这个样子吧）。</p><h1 id="大学"><a href="#大学" class="headerlink" title="大学"></a>大学</h1><p>大学里朋友有很多划分：室友、课友、队友……反倒是“同学”用的少了。我用同学指代课友，同学还以为是高中同学。</p><p>这样的划分在“友”字之前更强调对方在己生活中的具体哪一部分（虽然说者不尽都这么想），更强调双方的共同点（或者说共同利益？），更社会了些，没有象牙塔里那么纯真（去他娘的纯真）。虽说是”友“，但终归只是个称谓而已，这很礼也很文明，但似乎也造成了成年人之间的一丝微妙的隔阂。</p><p>虽然结识很多厉害的人也是上大学的一个作用，但真的不喜欢主动。讨厌经营人脉。无聊。一般不会约别人出来。我对未来没什么想法也不想有什么想法。我只想过上平静的生活。</p><p>有时也会被认识，但并不是所有时候都想认识别人，也不是所有人都想认识。至于想认识和不想认识之间的区别，我也不清楚。私以为能力并不是重要因素。或许和开朗的同学更能聊得来吧。</p><p>有时看着大家都成双入对的会有一丝羡慕，但觉得自己并不是个能始终对女孩子负责的人。无意伤害他人，所以还是把可能的悲哀扼杀掉好了。</p><p>生活本就很拧巴。所以有一些隔阂，保持些距离似乎也不错。进了浙大以来心理状况比以前要健康地多了。庆幸自己能觉得自己是个正常人。这和所处的环境必然是有一定关联的。大家有了距离可以不相互打扰，我可以happy coding而不必在高考之外不自觉地考虑班级里年级里的partition问题，这很棒，对我而言。（当然大学的生活境况必然对每个人心理状况的影响是不一样的，起码我觉得自己的室友，碰到的同学，都很nice）</p><p>但下了雨还是希望能有人来给自己送伞呀。</p><h1 id="Cyber"><a href="#Cyber" class="headerlink" title="Cyber"></a>Cyber</h1><p>或许于我而言，朋友并不是个日常性的词汇吧。所谓“朋友圈”，里面却大都是陌生人的生活，真奇怪呀。</p><p>谈及朋友圈，及与之相关的social media，引一段卢昌海的相当有趣的思考：</p><blockquote><p>性格使然， 我较少与人互动， 微博微信都如此。 有时会想， 微信因为是朋友圈， 相互点赞比较频繁， 那里的点赞会不会无形中成为一种类似 “表忠心” 的行为？ 当一条微信被 N - n 个朋友点赞， 那没点赞的 n 个朋友会不会引起微信主人的留意 (尤其在 N ≫ n 时)？ 如果用 Ai 表示没给微信主人的第 i 条微信点赞的人的集合， 则 ∩Ai 会不会被当成 “叛徒” 集合， 那里的人会不会像《古拉格群岛》里那个在需要鼓掌的场合第一个停止鼓掌的人那样， 引起最高级别的留意？</p></blockquote><p>在信息流通渠道更加多样的今日，诚然人们能更加便捷地获取彼此的相关信息，但对于彼此的<strong>理解</strong>却并不较昔日有了同步的加深。相反，对于“友谊”的经营却更便捷，更快速，更细微化了，因为通信方式的变迁。看上去每个人的通信量都增加了故而朋友也更多了？但是人性并没有随之进化呀。表面稠密的friendship graph，实际上，各个edge的weight也并不像看上去的那么大。无往不在的枷锁呀。</p><h1 id="自己"><a href="#自己" class="headerlink" title="自己"></a>自己</h1><h2 id="其一"><a href="#其一" class="headerlink" title="其一"></a>其一</h2><p>不怎么打游戏，不怎么看番。</p><p>不怎么关注热点，包括科技，包括社会。</p><p>不敢在social media上说话，不敢水群，没有点赞的习惯。</p><p>不喜欢关于自己的照片。</p><p>不喜欢在所有人面前暴露自己。</p><p>不喜欢大的组织，不喜欢多人小组的退化，不喜欢不被搭理。</p><p>不喜欢碰到认识但是不熟悉的同学的时候被无视的感觉。</p><p>不喜欢应酬，不喜欢恭维与被恭维。</p><p>不喜欢从他人的身上看到自己的镜像。</p><p>等等。</p><h2 id="其二"><a href="#其二" class="headerlink" title="其二"></a>其二</h2><p>喜欢各式各样的童话。喜欢梦幻的环境，美好的结局。比如《爱丽丝漫游奇境》，作为数学家的Dodgeson自然也欣赏。</p><p>喜欢塞林格。喜欢没有故事的故事。</p><p>喜欢刘震云。喜欢无可言说无可表达的生命的苍凉。</p><p>喜欢余华，《世事如烟》。喜欢冷酷得看得有些难受的叙述，喜欢这样的真实。</p><p>也喜欢自己创作，乌七八糟的故事，思绪散乱的随笔，形式上的诗歌。</p><p>喜欢汤浅政明的动画。喜欢草稿的恣意，色彩的张扬，还有剧本的狂放。</p><p>喜欢《梦日记》。圆圆的树象征温暖。</p><p>喜欢马蒂斯的绘画，《舞》尤其。喜欢色彩和图案背后的洪流般的生命。</p><p>喜欢巴赫的音乐。喜欢天空。</p><p>喜欢逆向，喜欢密码学，喜欢隐写术，喜欢web，喜欢筋疲力尽而后看到“flag：xxx“的那一刻。</p><p>喜欢瞎搞，喜欢学习每个新算法时的苦涩和顿悟时的激动的兴奋，喜欢Accepted的绿色。</p><p>崇尚计算机科学家与数学家，尤其其中各个领域的开拓者。</p><h1 id="友链"><a href="#友链" class="headerlink" title="友链"></a>友链</h1><p>以文会友（可不是言在此而意在彼），是个人简单的希冀。当然以下很多都只是单向边……</p><h2 id="自己-1"><a href="#自己-1" class="headerlink" title="自己"></a>自己</h2><p>如果你能看到这个blog这篇随笔，你或许对一些文章的一些部分有一些想法？或许想交流？一种联系方式是与blog相关联的github账号，虽然通过github来交流感觉有一点点的奇怪……但是github是个交友网站不是吗（<del>划掉</del>）。</p><p>抑或，可以用更普遍也更俗套一点的交流方式，social media。鄙人的QQ号是第648647743个evil number（二进制表示中含有偶数个一的数字，第一个是evil number是0）。邮箱的话也是账号，因为并没有开其他邮箱。</p><p>我的称谓有很多（<del>因为喜欢胡乱取名字</del>），不过现在基本也固定下来只用几个了。作为successors of Alan Turing的我，作为艺术家与诗人的我，日常中的我，你们眼中的我，在不同维度下的同一个体。</p><h2 id="同期"><a href="#同期" class="headerlink" title="同期"></a>同期</h2><p>（排名，自然是不分先后的）</p><p>NCJ：<a href="https://ncj.wiki/" target="_blank" rel="noopener">https://ncj.wiki/</a></p><p>XTXTMTXTX：<a href="https://www.xtxtmtxtx.xyz/" target="_blank" rel="noopener">https://www.xtxtmtxtx.xyz/</a></p><p>chty_syq：<a href="https://chty.coding.me/" target="_blank" rel="noopener">https://chty.coding.me/</a> （那个nerds.pub好像是合作性质的，管理员还有logining等，不过其他我不认识/捂脸）</p><p>zkx06111：<a href="https://zkx06111.github.io/" target="_blank" rel="noopener">https://zkx06111.github.io/</a></p><p>知名退役选手jsb：<a href="https://www.cnblogs.com/jiangshibiao/" target="_blank" rel="noopener">https://www.cnblogs.com/jiangshibiao/</a> （其实只看学长的游记和好番推荐/捂脸）</p><h2 id="先辈"><a href="#先辈" class="headerlink" title="先辈"></a>先辈</h2><p>卢昌海（知名科普作家，物理/人文）：<a href="https://www.changhai.org/" target="_blank" rel="noopener">https://www.changhai.org/</a></p><p>matrix67（知名科普作家，数学，前OI选手）：<a href="http://www.matrix67.com/blog/" target="_blank" rel="noopener">http://www.matrix67.com/blog/</a></p><hr><p>初稿写于2019-07-21，夜</p><p>改于2019-07-23，昼</p><p>改于2019-07-26，夜，自己</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;海水退去 露出了漫漫的旷野&lt;/p&gt;
    
    </summary>
    
    
      <category term="随想" scheme="https://nessoffice.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>【朝花夕拾】吉静文选 告别</title>
    <link href="https://nessoffice.github.io/2019/07/18/History-My_Essays-Farewell/"/>
    <id>https://nessoffice.github.io/2019/07/18/History-My_Essays-Farewell/</id>
    <published>2019-07-18T11:53:52.000Z</published>
    <updated>2019-07-22T15:15:41.450Z</updated>
    
    <content type="html"><![CDATA[<p>往事如烟。整理昔日的文稿，总会感到一阵时空错位，和悲凉的感觉。</p><a id="more"></a><p>（版权所有，严禁转载。违者自行承担相应法律责任）</p><p>这个集子名《告别》。</p><p>虽然是随笔，但有些偏向于《残垣》那种风格，但色彩基调明显不一样，也更具现实感。</p><h1 id="教室，在夕阳下"><a href="#教室，在夕阳下" class="headerlink" title="教室，在夕阳下"></a>教室，在夕阳下</h1><p>初中的课本皱巴巴的，好多课文感觉都没学过，仔细一看它们又熟悉起来了。书中有蝈蝈和蛐蛐，有星星的变奏曲，它们提醒了我某段早已被遗忘但仍旧温馨的时光。于是彼时的我住进了此时的我的身体里，时间停止了。 </p><h1 id="竞赛时期标准日程"><a href="#竞赛时期标准日程" class="headerlink" title="竞赛时期标准日程"></a>竞赛时期标准日程</h1><p>起床，清醒，吃饭，待命，上课，能懂，不懂，课间，上课，下课，买饭，回寝，玩乐，午睡，起床，清醒……</p><p>这就是我们的一天，这就是我们的一生。</p><h1 id="最后一次春游"><a href="#最后一次春游" class="headerlink" title="最后一次春游"></a>最后一次春游</h1><p>还在路上，就闻到了前方传出浓郁的烤肉的芳香。烟雾那边我们手忙脚乱。烤架咝咝，送下了喷香的羊肉灼口，还有鲜嫩的青菜淌油。椅子上的自来水逐渐泛开了油滴与黑水。酥而脆的五花肉，韧而耐嚼的鸡心，弹来弹去的面筋，不肯抬头的里脊，以及大红的虾与白里透紫的鱿鱼，都发着小泡，点缀着若干孜然、椒盐，跃入食客们的口中，使得香留唇齿。大饮料瓶中的冰可乐不久就被抢灌一空，留下横七竖八的塑料杯狼藉地躺在桌子上。邻桌娴熟的新疆小伙已和一帮人出去开观光车了，余下一个新人懒懒地经营着几串豆腐，收获着数片扇贝。鼓鼓的肚子坐在长椅上悠闲地沉浸于自己的世界，胖胖的老师则在收拾罢餐桌后拉住路过的同学，来来来，再吃一点。烟雾渐渐散去，人群也变得三三两两，时间在这里走向静止。</p><p>我是在返程的大巴上想起这一切的，那时我因过度尽兴而感到有些疲倦。车里不少人睡着了，很安静，静得仿佛一切都在离我而去，包括三年来所有的好奇所有的不甘所有的恼怒所有的欣喜。</p><h1 id="旧照片"><a href="#旧照片" class="headerlink" title="旧照片"></a>旧照片</h1><p>画面上那个肥嘟嘟圆圆脸的表情呆呆的小孩子，穿着肥大的暖暖的棉衣，被高高抱起，在自己的农村老家门前。那是我。</p><p>这组照片包含了很多景点，看得出是全国各地的大好河山。美丽景色的前边只站了一个人，就那么直直地站着，带着说不好是什么的表情，或许是平静吧。那是妈妈，没有皱纹。</p><p>这张照片是在“温州乐园”拍的，那儿我只去过一次。我不记得那次自己玩得如何，但能从照片上明显地看出奇怪的飞行器上大笑着的那位，铁定是玩得很开心的。他眼睛睁得那么大，可以说有些夸张，不过他平日表现高兴也是这样的。那是我爸，我没法和他交流我现在的感受了。</p><p>不知是我几岁时的家庭聚会，标题写着奶奶的生日。这桌布、这光线，看上去都明亮亮的，很舒服。我穿着某件看上去挺漂亮的毛衣，妈妈有些朴实地目视前方，奶奶则略显笨拙地做着这会儿的主人。很温暖啊。</p><p>我不喜欢拍照，爱拍照的人是爷爷，相册弄了一大摞，不过我还没怎么看。我只在题目写不来时把题目拍下来问我爸，或偶尔想拍了拍两张。手机里的相册，如今仍忠实地提醒着我2017年9月的、2017年6月的往事，当时的情景历历在目，我还能感受照片中自己手指的温度。</p><p>照片还有很多，一一说来不免无趣。随意翻略它们，我看到记下了那只我曾爱不释手的恐龙、从前老家暗淡的光线以及其他许多触动心灵的细节。百味杂陈，我无力诉诸语言，也无意借助语言。</p><p>有时想想，世界还是挺残酷的。隔了一层纸的距离，时间就能永驻，任凭纸外的人感伤流涕也毫不改变。当然“永驻”不大可能，原子衰变或是其他物理化学因素可以轻松摧毁那个世界，只是这和我们正常人类不大相干罢了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;往事如烟。整理昔日的文稿，总会感到一阵时空错位，和悲凉的感觉。&lt;/p&gt;
    
    </summary>
    
    
      <category term="创作" scheme="https://nessoffice.github.io/tags/%E5%88%9B%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>【朝花夕拾】吉静文选 寻趣</title>
    <link href="https://nessoffice.github.io/2019/07/18/History-My_Essays-Collection_Of_Jokes/"/>
    <id>https://nessoffice.github.io/2019/07/18/History-My_Essays-Collection_Of_Jokes/</id>
    <published>2019-07-18T11:53:51.000Z</published>
    <updated>2019-07-30T15:13:10.613Z</updated>
    
    <content type="html"><![CDATA[<p>不开心的大背景下难得真正开心的一些时刻。</p><a id="more"></a><p>（版权所有，严禁转载。违者自行承担相应法律责任）</p><p>难得的开心的文字呀。</p><p>（有几篇太羞耻了，不能放上来）</p><p>（“Meme的涨与落”这个栏目是之后放上来的，持续更新中）</p><h1 id="徐立海讲水浒故事"><a href="#徐立海讲水浒故事" class="headerlink" title="徐立海讲水浒故事"></a>徐立海讲水浒故事</h1><p>话说鲁提辖在街上买了十斤肉，他乘电梯回公寓时，这个肉呢，放在秤上重量变重了，这是为什么呢？因为它受到了一个向上的加速度！所以超重啦！他快到家的时候，又发现这个肉，又变轻了。他就想回去揍镇关西。他快到电梯门口的，肉又变重啦！哎他就觉得，这个肉有鬼，还是不爽，就去把镇关西给打啦！这就是“拳打镇关西”这个故事的由来。</p><h1 id="某活动课"><a href="#某活动课" class="headerlink" title="某活动课"></a>某活动课</h1><p>一对阴鸷的眼睛在里面四处摇头晃脑地打量着，伴随着牛皮男鞋的“哒哒”声空谷回响。发牌的手冷了下来，目光黯淡地看着前方这无尽深渊。校服以外的蓝色在几秒前还欢快嬉笑的身影后停了下来。“玩什么呀？”</p><p>但什么也没发生，那个男人用同样阴冷的语调说道：“玩吧玩吧，放松一下。”然后他走开了。</p><h1 id="三重奏鸣曲"><a href="#三重奏鸣曲" class="headerlink" title="三重奏鸣曲"></a>三重奏鸣曲</h1><p>平静如水的黑夜里，那个角落传出了不安分的声音。声音起初还只是微弱的鼻息，到了某个节点突然被添了过量的燃料一般，变得雄浑有力，宛若有一辆铁皮火车在喉咙间艰难地前行。它先是爬山坡，音调循序渐进升高，余音袅袅；到了山顶稍作停留，便马上坠下，准备一段时间后东山再起。如此往复，经久不息。对床的低音炮听闻火车隆隆，仿佛找到了知己，与之共鸣起来，时而高亢，巍巍乎若山峦；时而低沉，洋洋乎如流水，变化多端，响亮非凡，嗓子好似海绵被压榨般拼命地挤出声音。那边的重感冒也不曾闲着，这小子还宣称自己从不打呼噜的。三个喉咙不分你我不分轩轾不分高下，你方唱罢我登场，欲与天公试比响，共就三重奏鸣之曲，共成三足鼎立之势。哪怕人间至乐，动听不过如此。只是天下没有不散的宴席，不久便只剩下一辆孤独的小火车寂寞而坚毅地爬着山坡。然而这仙乐倒越发至臻至善了：头一秒还是火车蹒跚步，下一秒竟成了瀑布下高山。只是这样的境界不可久驻，它重复了两三回后，嘟嘟，没燃料了。</p><h1 id="灵魂宝石"><a href="#灵魂宝石" class="headerlink" title="灵魂宝石"></a>灵魂宝石</h1><p>阿狼（化名）此刻正在竞赛教室兴致勃勃地玩着手机，此前他正彻夜不眠地目不转睛于那个发光小长方体，而往常这个时间他都在垂下高贵的头颅以补充能量。</p><p>“阿狼，手机还我。”</p><p>就在中翔（化名）夺过他手机的那一刻，阿狼的眼中光芒尽失，他的身体轰然倒塌，他的灵魂仿佛在一瞬间被抽走了，只留下那具面对桌面沉思的躯体。</p><p><strong>续</strong></p><p>阿狼（化名）此刻正在竞赛教室沉睡仿佛与世长辞。娇男（化名）为不打扰他休息，轻轻地把手机放在他桌子上。听闻这手机碰桌的微小声息，不为任何大吵大闹所动的阿狼竟还魂一般立了起来，夺过那手机稳稳地玩了起来。</p><p><strong>续二</strong></p><p>阿狼（化名）此刻正在睡觉，这是因为手机被玩没电了。幸而它正在充电。随着手机电量越来越高，阿狼的眼睛越来越亮。在手机充满电的那一刻，阿狼自然地将手机拿起，解锁密码，玩了起来。</p><h1 id="Meme的涨与落"><a href="#Meme的涨与落" class="headerlink" title="Meme的涨与落"></a>Meme的涨与落</h1><h2 id="咆哮体"><a href="#咆哮体" class="headerlink" title="咆哮体"></a>咆哮体</h2><p>时间：2008-2009年</p><p>这种东西太长就不放实例了（一般也越长越有趣）……直接放<a href="https://v2ex.com/t/587216?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">链接</a>吧。</p><h2 id="禅师体"><a href="#禅师体" class="headerlink" title="禅师体"></a>禅师体</h2><p>时间：2012年7月</p><p><a href="https://baike.baidu.com/item/%E7%A6%85%E5%B8%88%E4%BD%93/7905342?fr=aladdin" target="_blank" rel="noopener">禅师体</a>，下为实例。</p><p>禅师举着一个钵，让青年把他装满，青年装了一钵石子。</p><p>禅师说：「其实，钵并没有满。」</p><p>青年于是往里又加了一些沙子：「现在满了吗？」</p><p>禅师又说：「其实，钵并没有满。」</p><p>青年略一沉吟，说：“还可以加<a href="https://baike.baidu.com/item/氢氟酸" target="_blank" rel="noopener">氢氟酸</a>溶解掉沙石蒸去残液，再高温熔融，最后还原成硅单质并且做成闪存装满数据。</p><h2 id="集句变种"><a href="#集句变种" class="headerlink" title="集句变种"></a>集句变种</h2><p>时间：2019年7月</p><p><a href="http://xue.paralworld.com/xuewen/2254/" target="_blank" rel="noopener">集句</a>，下为实例。</p><p>「老妪力虽衰，波撼岳阳城。」</p><p>「旧时王谢堂前燕，排空驭气奔如电。」</p><p>「我闻琵琶已叹息，呕哑嘲哳难为听。」</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不开心的大背景下难得真正开心的一些时刻。&lt;/p&gt;
    
    </summary>
    
    
      <category term="创作" scheme="https://nessoffice.github.io/tags/%E5%88%9B%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>【朝花夕拾】吉静文选 桃园</title>
    <link href="https://nessoffice.github.io/2019/07/18/History-My_Essays-The_Utopia/"/>
    <id>https://nessoffice.github.io/2019/07/18/History-My_Essays-The_Utopia/</id>
    <published>2019-07-18T11:53:50.000Z</published>
    <updated>2019-07-23T07:00:59.419Z</updated>
    
    <content type="html"><![CDATA[<p>最后一段是借鉴的《兽爪》中的某段剧情：第八集的大战之后，一个服用了“药”的社员拖着半截身子在等死，他请求路过的男主给他一把枪自杀，但他接过枪后却企图射杀男主女主。他们跑掉之后，他想要自杀，却没有子弹了。</p><a id="more"></a><p>（版权所有，严禁转载。违者自行承担相应法律责任）</p><p>最后一段是借鉴的《兽爪》中的某段剧情：第八集的大战之后，一个服用了“药”的社员拖着半截身子在等死，他请求路过的男主给他一把枪自杀，但他接过枪后却企图射杀男主女主。他们跑掉之后，他想要自杀，却没有子弹了。</p><p>Cthulhu风格的科幻小说。</p><h1 id="桃园"><a href="#桃园" class="headerlink" title="桃园"></a>桃园</h1><p>这里是桃园，我是根据祖上流传下的地图来的。老人们说此图非关键时刻不得启封。就连我在厕所中郁郁而死的高祖父、死在五十个女人手上的伯父和用两把手枪终结自己生命的父亲都没有打开过这张地图。如今它在我手上，我在桃园，以一个社会调查员的身份。我想知道这颗黄色星球上的最后一片净土是怎么样的。</p><p>岛的外貌和记载的一样，“芳草腥美，落英缤纷”，外沿是桃花盛开。“林尽水源，便得一山……”我沿小孔进入。光在聚集，就像世界在创立，我感到那边是一个美好的新世界。</p><p>这里的确和我们那不同，偌大的村庄内空无一人。古建筑鳞次栉比，这引起了我调查的兴趣。我走入村庄的内部，打算从房子开始调查。</p><p>每所房屋都不是空的，我在屋外能清楚地感受到。然而门窗紧掩、窗帘遮蔽，里头时不时发出大型食肉动物的进食声、婴儿的尖利笑声以及一些不可名状的声音，大脑产生了本能的畏惧感。窗帘、墙壁或是门楣上不时会冒出或消失些圆睁的眼睛注视着我不断移动。我无法想象里面是怎样一种压抑的恐怖，故而我完全没胆敲门。</p><p>这里是北温带，空气中却一直蒸发着一种浓厚的热气，人待久了足以窒息。</p><p>这里的房屋毫无特点，这是我长久观察后惊惶得出的结论。尽管第一眼看上去是第一航道的古代庭市，它们事实上有种蜡似的虚伪感。房屋的材质并非地球上的任何一种已知材料，性质奇特又恶心。它们的反应甚至让我感觉他们具有生命。</p><p>我终于看见人了，那是一个蘑菇头圆圆脸的小孩和一个胖胖的小孩。他们很欢快地跑着跳着，似乎在进行历史书中提到的“婴孩的游戏”。他们靠近了，脸上洋溢的欢快就像太阳驱散乌云，我感到一种无名的快乐自外界涌入身体。他们靠得越来越近了，我能够听到他们玲珑的小嘴里蹦跳着的欢快的音符，那是：</p><p>“肏你妈…肏你妈…”蘑菇头咧着笑脸，拍打着前面的小胖子，用童稚的声音低声笑骂。</p><p>突然小胖子被路上的石头绊倒了。他的表情即刻突变，它的面具好像裂开了一点。它迅速站起，朝着那石头破口大骂：“肏你妈——的屄！”但随后又仿佛自豪于自己刚才所能说出的最后两字，心满意足地拐进一条小巷，不见了。</p><p>天更热了。</p><p>我突然想到卡夫卡的一篇小说，想到那个被父亲一句判决就马上投河了的孩子，从地上捡了把枪。我想找真正的桃园。</p><p>然而尽是这样的劣等枪。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最后一段是借鉴的《兽爪》中的某段剧情：第八集的大战之后，一个服用了“药”的社员拖着半截身子在等死，他请求路过的男主给他一把枪自杀，但他接过枪后却企图射杀男主女主。他们跑掉之后，他想要自杀，却没有子弹了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="创作" scheme="https://nessoffice.github.io/tags/%E5%88%9B%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>【朝花夕拾】吉静文选 残垣</title>
    <link href="https://nessoffice.github.io/2019/07/18/History-My_Essays-The_Ruins/"/>
    <id>https://nessoffice.github.io/2019/07/18/History-My_Essays-The_Ruins/</id>
    <published>2019-07-18T11:53:49.000Z</published>
    <updated>2019-07-22T15:14:00.242Z</updated>
    
    <content type="html"><![CDATA[<p>小说或者寓言。</p><a id="more"></a><p>（版权所有，严禁转载。违者自行承担相应法律责任）</p><p>这个集子名《残垣》。</p><p>我并不知道这样的文章应当归到哪种文体。自认是小说，或者寓言。</p><p>戏谑为少，幽怨为多。</p><p>完全不美好的，过去。</p><h1 id="狼"><a href="#狼" class="headerlink" title="狼"></a>狼</h1><p>“狼来了，狼来了。”我说。</p><p>他们没理我，他们照常工作。</p><p>之后，我把他们吃了。</p><h1 id="鱼"><a href="#鱼" class="headerlink" title="鱼"></a>鱼</h1><p>“子非我，安知我不知鱼之乐？”庄周言毕，跃而入水，曳尾于涂。</p><h1 id="哈姆雷特"><a href="#哈姆雷特" class="headerlink" title="哈姆雷特"></a>哈姆雷特</h1><p>无穷大的图书馆中一只猴子在如山的稿纸中昏昏欲睡地打字直到它滑下椅去在散落的稿纸中留下了串脏脚印。</p><h1 id="君子之风"><a href="#君子之风" class="headerlink" title="君子之风"></a>君子之风</h1><p>你说他说你说你他妈的分明已经纯乎就是个傻逼傻缺傻狗就是个白痴就是个人渣你拉屎吧你去死吧你你你就是个……</p><p>多讽刺啊，这是相互否定吗？其实这是平等。</p><p>一切冲突均同理，即便你以为故作不争就是君子。</p><h1 id="朋友"><a href="#朋友" class="headerlink" title="朋友"></a>朋友</h1><p>我生活在壳里。</p><h1 id="天堂之门"><a href="#天堂之门" class="headerlink" title="天堂之门"></a>天堂之门</h1><p>从未有人从里面出来过。</p><h1 id="海底两万里的风景"><a href="#海底两万里的风景" class="headerlink" title="海底两万里的风景"></a>海底两万里的风景</h1><p>一只塑料袋悠然飘过。</p><h1 id="蟋蟀和蚂蚁"><a href="#蟋蟀和蚂蚁" class="headerlink" title="蟋蟀和蚂蚁"></a>蟋蟀和蚂蚁</h1><p>艺术家飞往天堂，劳动者驻留于大地。</p><h1 id="善之花"><a href="#善之花" class="headerlink" title="善之花"></a>善之花</h1><p>裸露的大地一旷无垠。地上的我看到地缝中的花朵和远处的石像。石像的表情如它复活节岛上的同胞那样复杂。石像或许等了我千年，或许因我的出现而出现。我未可知。</p><p>我朝花朵走去，石像为我流泪。</p><p>我摘起花朵，石像顷之倒塌。</p><p>不详姓字的花，在被摘起时就枯萎了。</p><h1 id="远方"><a href="#远方" class="headerlink" title="远方"></a>远方</h1><p>我是自己醒的，没有人来叫我，这说明火车还没有修好。火车外的男人们咒骂着火车、行程以及世界上的一切，车厢里则堆积着絮絮叨叨的家常女。我想起城市，打着虚假的暖气，烙上了工业文明的钢印，面无表情的机器公民横行其间。雪花落在我的脸上，打断了我的想象。空中仍摇曳着数片晶莹雪花，但它们不属于我，我也不属于它们，我的归属在火车本会到达的那片地方。在轻微而持续的寒冷中，我还能做什么呢？我睡着的时候尚早，以至那提醒乘客火车故障让他们转回巴士的电子音要过一会儿才响起。其间雪下得越来越大了。</p><h1 id="三只小猪"><a href="#三只小猪" class="headerlink" title="三只小猪"></a>三只小猪</h1><p>猪A在把猪B卖给灰狼后长吁了一口气：终于除掉这个心腹之患了。他却未料自己被猪B反咬了一口，在他之前被那匹狼捅了一刀进了酒肆。酒场中猪C与灰狼划拳碰杯，共啖猪肉，谈天说地。</p><h1 id="心之刃"><a href="#心之刃" class="headerlink" title="心之刃"></a>心之刃</h1><p>历史的事实是不明朗的，没有人真正理解一切的细节，而那在一定程度上会导致不可预测的结果。</p><p>我回到班级。有的人回头看我，有的人没有。她像只花蝴蝶一样仍旧谈笑风生对开门两耳不闻，声音尖锐刺耳。一股无名火起，我径自走去，手上握着把刀，它好像一直就在那里。我用力一刺，然后就没声响了。</p><p>有人来劝架，我一一把他们杀了。</p><p>血干得很快，刀像崭新的一样，锃锃发亮。他们的皮肉和骨头马上腐烂了。</p><p>其他学生也消失了。夕阳照进了干净的教室。</p><p>然后，外面飞来了一只蓝蝴蝶，眨巴着翅膀上的一对眼睛。</p><h1 id="食人症"><a href="#食人症" class="headerlink" title="食人症"></a>食人症</h1><p>我住在房子外面，他们在房子里面。平时我们相安无事，但他们时常莺歌燕舞欢笑不断，而我一个朋友什么房间也没有，常常感到很悲哀。他们是如此的冷漠，却又无比热情地对待同间的房客。他们看见我了，他们的目光满是怜悯，他们的脚扎根于水泥地，他们的表情仍旧愉悦。我好悲哀，我好悲哀；每每这种时候我就想吃东西。人类在休息的时候大脑会消耗20%的能量，为什么要这么多呢？有什么用呢？但外面没有什么可吃的东西，随着我越来越沮丧周围的事物越来越奇怪越来越不可名状。我只能吃掉自己了，它们也是这么认为的，至于他们的观点我不知道我也没有感情顾及。先是手指，是没有味道的鸡爪；再是手掌、手臂、双脚、双腿、躯干还有内脏——人类为什么要思想，为什么要接受一切痛苦的根源——我的头部、我的脑浆、我的思想、我的心。最终我被吃得一干二净。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小说或者寓言。&lt;/p&gt;
    
    </summary>
    
    
      <category term="创作" scheme="https://nessoffice.github.io/tags/%E5%88%9B%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>【朝花夕拾】【转载】听雨轩文选 我的罗曼史</title>
    <link href="https://nessoffice.github.io/2019/07/18/History-Essays_Of_Classmates-My_Romance/"/>
    <id>https://nessoffice.github.io/2019/07/18/History-Essays_Of_Classmates-My_Romance/</id>
    <published>2019-07-18T11:53:48.000Z</published>
    <updated>2019-07-22T15:25:46.394Z</updated>
    
    <content type="html"><![CDATA[<p>非常非常有趣的写法。我也想写这样的内容，不过写的肯定没人家有意趣啦。</p><a id="more"></a><p>（如有侵权，请联系博主。将于第一时间予以删除）</p><h1 id="我的罗曼史"><a href="#我的罗曼史" class="headerlink" title="我的罗曼史"></a>我的罗曼史</h1><p>作者：王敏洁</p><p>月光在墨色的涟漪里晕染开来，满塘浮动的青雾，白衣赤足，衣袂飘飞，跨过万水千山、时光苍茫，她向我走来。一卷楚辞，满纸荒唐，千年哀愁从笔墨间流淌下来，凝成一滴，融入她清俊的眉眼。一见钟情，我和语文的邂逅，是一场宿命的相会。</p><p>人说初恋难忘，果真如此。语文亦师亦友，见识广，有百面之性格，千般之故事。她可以是不谙世事的翠翠，也可以是精明世故的熙凤：可以是赤壁怀古、寻想人生哲理之东坡，也可以是月下荷塘、体悟理想境界之配弦。无论如何，她总携着华丽、朴素、热烈、淡泊之美向我走近，她总带着一种诗意的人生向我走来。喜欢在午后的阳光里修文，铺开一张纸，让每一个坎坷都被照得灿亮，然后开始百般打磨，千般润饰，直至笔墨间蜿蜒出精金美玉般的光华。我从不可惜这样一个下午，也许它本有他用，但我觉得值得。语文值得被一个人认真对待，认真去爱。我们的爱，已渐入佳境。</p><p>至于后来与英语坠入爱河，却又是他话了。金发碧眼，身长九尺，英语虽形貌妍丽，望之而令人生畏。然英雄过不了美人关，终究还是深陷温柔乡。英语为我打开了世界之窗，浩淼的遥远的大西洋上，有一片大陆从海雾后隐现了它的真容。繁荣都市，寂静土地，宏伟繁复的西式建筑，艰涩深邃的文学著作……一群深眉邃眼、高鼻鹰目的外族人，在地球的另一端，同样日出而作，日落而息。细水长流，日久生情，越是深入地了解，越助人抵达一个顿悟的境界：每一个民族，都在经历着同样的喜怒哀乐、兴衰荣辱，都在共享同一片苍穹，同一颗太阳，同一片土地。每一个民族的语言和文化，都同一棵树上不同的花朵。我们同根，我们同生。</p><p>与数学的相爱可谓是回肠九转，异常艰辛。一张空白的试卷，两幅极简的几何，三根愁白的头发，满室弥漫的寂静。不是我不想爱他，而是我不敢爱他。数学长得未免太过生人勿进，白衬衫，黑西裤，纽扣一直系到领口，一副泛着蓝光的深度眼镜，目光让人不寒而栗。数学似乎一辈子都不会对我感兴趣。可是你无法否定，数学的魅力浑然天成，令人无法抗拒。冬夜寂静，一灯如豆，你披衣在桌前与数学对视，感觉一种独属于人类的理性和热情在脑海里冷却，在胸膛里燃烧。于是你开始翻山越岭，千里跋涉，一意孤行，只为寻找一个不为人知的答案。思维的火花在黑夜里闪现出雷电般摄人的光彩。你到达了，或者你倒下了，飞蛾扑火的热情还在胸膛里寂静地燃烧。这是人类至高的理性，他的名字叫数学。</p><p>后来又在倾城日光下邂逅化学，在车水马龙的街道偶遇政治，与胸怀大略、满面沧桑的历史有了交集……学科是有生命的，能在今生今世和他们相知、相爱、相守，是一种莫大的荣幸。</p><p>我不是不在乎外在的东西，只是更重要的是爱，不是结晶；是过程，不是结果；是学习，不是收获。真正热爱的人，将它们所有的爱和生命都注入自己的一片田地，他们将汗水滴入土壤，而不去想耕耘是否会有收货。而他们坐拥的，不只是一个秋天的金黄，还有整个精神世界的富甲一方。</p><p>爱你所学，学你所爱。</p><p>“我在生活里不需要更深地思索，从书卷里获取粮食，在野花盛开的文字中获取爱情，我的世界宁静有序，痛很清晰，爱恨简单存粹。”</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;非常非常有趣的写法。我也想写这样的内容，不过写的肯定没人家有意趣啦。&lt;/p&gt;
    
    </summary>
    
    
      <category term="创作" scheme="https://nessoffice.github.io/tags/%E5%88%9B%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>【朝花夕拾】【转载】听雨轩文选 创世纪</title>
    <link href="https://nessoffice.github.io/2019/07/18/History-Essays_Of_Classmates-Genesis/"/>
    <id>https://nessoffice.github.io/2019/07/18/History-Essays_Of_Classmates-Genesis/</id>
    <published>2019-07-18T11:53:45.000Z</published>
    <updated>2019-07-22T15:23:49.136Z</updated>
    
    <content type="html"><![CDATA[<p>私以为这样的科幻是真正诗意的，文学的，而非仅是“文化的“。</p><a id="more"></a><p>（如有侵权，请联系博主。将于第一时间予以删除）</p><h1 id="创世纪"><a href="#创世纪" class="headerlink" title="创世纪"></a>创世纪</h1><p>作者：孔炳翔</p><p>熵值已经接近了最高点。</p><p>所有文明都停止了战争，在不断临近的热寂面前苟延残喘。</p><p>宇宙已经黯淡无光，唯有深处有几点火光，那是低等生物在用仅存的物质合成恒星。这像是一片涸辙，大鱼们早早地感觉到了干涸的恐惧，潜在水底。而小鱼们还浅浅地浮在水面附近，浑然不知这即将到来的，光明的黯淡。</p><p>此外还有不少的暗点，那是高等文明，它们已经能够完全的使用恒星的光和热或是正反物质湮灭所释放出的能量，包裹它们母星的是一类类似黑体的物质，完全吸收外来的和内在的光线并储存。</p><p>更深处，还有一个暗点和一个光点，在互为中心相互旋转。</p><p>暗问：“你怎么让能量外溢了？你能制造逆熵场了？”</p><p>光：“我不能，但我愿意。”</p><p>“愿闻其详。”</p><p>光：“这是一个故事，或一首史诗，绝非一条物理定则。”</p><p>光的诗：</p><p>“只要我一息尚存，我就称你为我的一切。</p><p>只要我一成不变，你就感觉你在我的四周。任何事情我都来请教你，任何时候我都把我的爱献上给你。</p><p>只要我一息尚存，我就永不把你藏匿起来。</p><p>只要把我和你的意旨锁在一起的脚镣还留一小段，你的意旨就在我的生命中实现——这脚镣就是你的爱。”</p><p>超弦的震动传导着这首诗。暗点们隐藏在黑暗中，揣度着这宇宙的最高解读者之一的隐晦的诗句。</p><p>良久，暗问：“如果答案为爱，那么问题为何？”</p><p>……</p><p>光点挨个地黯淡，熄灭。不少暗点也无声无息地冷却。</p><p>光的光芒同样愈发地不稳定。</p><p>……</p><p>沉寂了许久的超弦再一次地抖动起来，不过这次应该没有听众了。</p><p>光：“你感觉到了吗，这个空间只剩下这里存在塌陷了。他们都熄灭了。我们是热寂屠刀下最后的生还者。”</p><p>“嗯”</p><p>“你想到什么了吗。”</p><p>“有点思路。就是从一个平行宇宙中窃取能量，先躲过热寂。再试试能不能躲到另一个宇宙里去。”</p><p>“那躲过热寂是有办法了，只是大坍塌不一定有办法。”</p><p>“你的光强越来越不稳定了。这就是你那首史诗的意义，你真能逆转熵了？”</p><p>“那我们打个赌吧。”</p><p>“好。”</p><p>“如果你能够在大坍塌前制造出让物质在两个宇宙间流通的通道，这就是你的胜利。而我，如果我的方法能成功，我会重新出现在下一次大爆炸中，继续我的文明。其他文明也会有尝试我的方法，从大坍塌中跳出来，我将这个方法命名为洗礼或是圣餐。”</p><p>“那这样宇宙的能量就会不断减少，宇宙就不稳定了。”</p><p>“不会的，这就是我从很早之前就一直在外放能量的原因。”</p><p>……</p><p>最后的最后。</p><p>……</p><p>光在一片耀眼的光芒中塌陷了，像是大坍塌的序曲。在灼目的闪光中隐约可以看到一块十字形的晶体在挥发。从最重的钚碎裂到了最轻的氢，氢则直接碎裂成中子、质子和电子。电子在高速运动中轰击在质子上中和成中子。中子碎裂成夸克，夸克碎裂成基本粒子，这片空间的普朗克长度。引力场、电磁场融入时间。</p><p>超弦也因这场序曲而沸腾。</p><p>“要是干了以后就完了，那么还是快点干。”</p><p>“Cogito， ergo sum.”</p><p>最后一切都归于沉寂。</p><p>暗细细地感受着引力场，除了她所压迫地这片空间，其他的各处均平坦而光滑。</p><p>全宇宙统一了温度、密度和时间。</p><p>未来的世界是银子的。</p><p>热寂。</p><p>白银时代。</p><p>超弦也沉寂了下来。</p><p>暗试着拨动了一下，一道细细地波传向了宇宙深处。她想了想，拨出一道旋律。</p><p>“就这样，让我独自面对这孤独的死亡。让大坍塌——这场没有客人的最后的晚餐见鬼去吧！”</p><p>在大坍塌前，它都回不来了。她想。</p><p>的确，这道波以超越光速的速度没入黑暗中，像是一位开拓者进入荒野，亦或是一头鲸潜入深海。</p><p>……</p><p>这无边的黑暗像是一个漫长而无月的夜晚在期待着一个黎明。</p><p>它期待着一句话。</p><p>“要有光。”</p><p>……</p><p>大坍塌后的那一刹那，时间终结。</p><p>“又有新成员了，老规矩。你的创世纪。”</p><p>这像是一个沙龙，黑暗中藏着很多身影。</p><p>“那好吧。”</p><p>“要有光！”</p><p>这个奇点便开始发光发热。它极欲爆炸，却听从于这黑暗中的意志。</p><p>“这个世界被光明笼罩，它限制了我不能同时是我却又同时不是我，那我就得有自己的身体。”</p><p>虚空中出现了一块球形的全反射体。</p><p>“这个宇宙不能没有物质，他本将依托于基本粒子而存在。并且它活着。”</p><p>宇宙膨胀了一点，能量迅速形成基本粒子，高速地在局促的空间里移动着。两者的转化达到了平衡。</p><p>“它不能是十维的，它是三维的。那这样我也得是三维的。”</p><p>随着长度、数目、温度这三个维度的建立，它也从球形转化为了十字形晶体。</p><p>“所有粒子都要保有量子纠缠，这样在大坍塌来临时，它们能重新聚拢成一点而这将通过超弦相作用。”它像是叹息了一声。“那这样，速度和空间位置就是相矛盾的了。与此同时，基本粒子就成为超弦在长度维上的震颤。”</p><p>无数冰冷的超弦穿透了它的身体。</p><p>“既然基本粒子是超弦的震颤，那么第一，它不会停止运动，第二，震颤又两个方向。这导致了两种完全相反的物质的存在，而我需要做的只有预定一个方向。”</p><p>它随意地朝一个方向拨动了一下，不同于它之前所做的，这次，它只是在长度维上，而不是在温度维上拨动。</p><p>“它得保障文明的出现。”</p><p>“它得有几种基本力来规定粒子的运动。”</p><p>他幻化出一个正N面体，一个在三维的长度维下就是球体的物体。这个物体最终定格在代表四的那个面上。</p><p>……</p><p>“它还需要一个能量源，和时间轴。”</p><p>“那就是我。”</p><p>“因为它因为我而存在。”</p><p>“我没有活着，也不曾死去。”</p><p>“Cogito， ergo sum.”</p><p>“它诞生之日，便是我消亡之时，它消亡之时，便是我归来之日。”</p><p>他率先成为一道能量流，融入这个奇点。</p><p>“那我们也该加入其中了。”</p><p>黑暗中的身影一一融入了这个奇点。</p><p>它像一颗心脏开始跳动。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;私以为这样的科幻是真正诗意的，文学的，而非仅是“文化的“。&lt;/p&gt;
    
    </summary>
    
    
      <category term="创作" scheme="https://nessoffice.github.io/tags/%E5%88%9B%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>【围炉夜话】对于国内计算机普及教育考核体系范式的简要批判</title>
    <link href="https://nessoffice.github.io/2019/07/18/Toughts-Exams_Of_Computer_Courses/"/>
    <id>https://nessoffice.github.io/2019/07/18/Toughts-Exams_Of_Computer_Courses/</id>
    <published>2019-07-18T11:50:59.000Z</published>
    <updated>2019-07-18T04:18:22.200Z</updated>
    
    <content type="html"><![CDATA[<p>日经，因为不开心。</p><a id="more"></a><p>（文章可能比较情绪化，一些观点会有失偏颇？欢迎批评）</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>咱不谈国内教材的风格问题，不谈谭浩强等经典教育家，不谈十年不更新的课件。咱就来看看现在高校中的计算机考核体系（考试制度、评分制度等等）中存在着哪些问题。</p><p>首先需要说明的是，此处涉及的计算机类课程是“计算机普及教育”性质的，是面向低年级学生的计算机基础课程，包括中学时的信息技术课程、大一的程序设计基础课程等，而非专业性较强的课程，后者因笔者尚未接触过故不作评价。</p><p>所谓考核体系中存在的问题，指的是计算机学科课程的考核无法客观全面地反映学生的能力，造成低能者高分，高能者低分的现象。当然，我并没有做统计，只能拿自己说事。个人看到这样的成绩比较不爽，写篇软文骂骂街，期盼一下更加让人（己）信服的计算机课程考核体系，仅此而已。</p><p>标题中所谓范式，指的是当前国内学校普遍采取的这种考核模式。不光浙大如此，大多数学校在计算机学科的考核模式上虽有差异，但总体而言还是如此的。个人比较不喜这样的考核模式，但也不了解其他的模式，对于墙外的教学也不甚了解，无法提出有指导性的教学改进意见。</p><p>对这种考核体系的厌恶是自中学时代开始的。从中学开始，我就不喜欢技术这门学科的考试，无论是信息技术，还是通用技术（这里不谈通用）。高一时候还能凭借着信息差稳拿信息技术的第一，但等到大家都明白这门课的套路后就发现它也就这样了。大家都满分，很没意思。（高中同学之前在寝室里吹水哪些课拿过第一的时候把信息拿出来吹，搞邪了你）倒是我会因为乱七八糟的问题满不了。难道分数不比别人高说明我不比别人强？怎么可能。难道每个分高于我的人都比我热爱计算机，都比我有程序设计的思想，都比我更理解算法？怎么可能。但分数就是摆在那里。很不爽。很不爽。高中的信息技术无法在思想深度上作拓展，只得在边边角角上挖坑，坑一坑考试技巧低的人。这到底有什么意思？设置这样一门考试是要考察什么？想不明白，于是我不选技术，选历史。</p><p>到了大学，本以为进了计院就不用再接触这些糟心的考试了，但还是事与愿违。</p><p>从浙江大学《C语言程序设计》《程序设计专题》课程的情况来看，这类计算机普及课程的考核一般会由project，平时参与情况，期中期末考三部分构成。其中后者为大头，占了50%~60%。我们便来谈谈这考试。不过在说考试之前，我们有必要关注，考试要考察什么。</p><h1 id="能力"><a href="#能力" class="headerlink" title="能力"></a>能力</h1><p>普及性的计算机学科，需要学生掌握哪些能力呢？中学课本中往往会有office、ps、flash（该换h5啦）的基础操作指南。这些好拿出来考试？有什么思维含量？通过简单的搜索就能掌握的记忆性的知识，完全没必要考察。让学生用文字描述具体的操作过程也挺蠢，有一种独到的滑稽感。说到底，我知道这些内容对中学生而言并非不重要，但感觉用传统的中学教学模式对待计算机课程就有种说不出的拧巴感。</p><p>还有呢？程序设计的能力，这实质上是对计算思维的培养，对逻辑思维以外一种独特而有效的解决问题的思维模式的培养，这是相当有价值的。教授一些简单的算法，一些常见的数据结构，足以打开低年级学生（尤其是中学生）的心智，让他们领略到计算机科学的魅力，而不是薪水的魅力。</p><p>把宏观的程序设计能力再细分，在具体的程序设计上，我们还需要具备对程序流程的理解能力，对意外事件的处理能力，对程序正确性与复杂度的分析能力，等等等等。虽然归纳地并不细，不过考试大抵也便是考察这些个能力。ok，那我们开始讲试卷，看看它能否较好地检验学生的综合能力。</p><h1 id="试卷"><a href="#试卷" class="headerlink" title="试卷"></a>试卷</h1><p>考试试卷会由多个部分组成：判断题（理论性较强），填空题（用大脑编译运行程序），程序填空题。这些部分分别能考察什么东西呢？首先是判断题，个人非常讨厌。有些理论书上没提看似值得深挖，但个人觉得真的没啥意思，举个例子：</p><blockquote><p>定义FILE  *fp; 则文件指针fp 指向的是（）。(1分)</p><p>A. 文件在磁盘上的读写位置</p><p>B. 文件在缓冲区上的读写位置</p><p>C. 整个磁盘文件</p><p>D. 文件类型结构体</p></blockquote><p>这种题目要考察什么？如果教师在课堂上对这一知识点有所强调，并能进行知识点的延伸，那这样的题目可作为检验听课情况的一枚试金石。可若是教师对此完全没有提，学生面对这样的题目要怎么办？虽然自学是重要的技能，但我们也应理清什么样的知识是好的，是值得我们投入时间的。计算机课程不是思想道德修养，它里头虽然也有理论，但切不可空谈理论而忽视实践。而在这样一类的题目中，实践的影子，何在呢？</p><p>虽然题库中存在许多这样无趣的题目，但无可否认的是，许多题目还是有一定价值的，能够帮助同学们检验知识漏洞。这是值得肯定的。</p><p>填空题最大的特点，就是没意思，和实际的工程比较脱节。它是在考察学生对于语法规则，简单的算法的理解能力，但笔者不认为这是一种合格的考核方式。且不谈优先级排序，++++++这种反人类题。填空题与工程的一大脱节便体现在考试的限制上，学生被要求不得打开编译器对程序进行调试。诚然，如果不这么做则填空题的区分度会大幅减少。但这样的规定也在很大程度上破坏了计算机课程可贵的实践性，这和程序填空题的弊端是一致的。本来一个编译运行，几个调试就能发现的低级错误，硬是成了所谓体现区分点的地方。这能区分个什么对语言特性的认识对编程范式的思索，只是停留在大众教育阶段的对于所谓“勤奋”“仔细”的筛选。想到大家在走出高考考场后仍要惦着曾经的那么一些无趣的行为模型，我比较无语。</p><p>至少我没有见到过有趣的填空题和程序填空题，虽然都会做，但做起来慌得不行，唯恐哪个细节又没注意到，感觉写下来的都是错的。事实也正是如此，总会因为trivial的错误错掉一些题（虽然中学老师教我们强调细节，不过在大学的context里，“仔细”的重要程度还是第一位吗？）。程序填空题的初衷是好的，希望考察学生对代码的阅读能力与对程序流程的认识。但不得不说这种形式实在不讨喜。码风的不一本应通过建立语言使用的共识（编码规范）来达到一定程度的消除，然而学校并未这么做。另外，对陌生代码细节的把控不当也是所谓“区分点”的一环，而这本应通过测试来消除的。</p><p>简言之，这三类题除了选择题尚可，对其他两类题鄙人均比较反感。虽然如此，我也不清楚什么样的题型是自己是大家所喜闻乐见的。感觉计算机学科就不适合笔试。加入一定量的编程题（不可以有码量巨大的模拟题）或许比较好吧，但浙大《程序设计专题》课程今年把编程题取消了，原因不明。</p><p>这里顺便吐槽一下PTA系统。死板的填空题检测机制不支持等价写法，程序填空题的评测系统简单粗暴连拼写都不帮你检查一下（变量名错了扣了一堆分，无语）。最让我不爽的是，编程题的题库里放了很多三流学校（浙大不知算不算）三流教师编写的牛逼题，什么答案输出4+-3i才能过，什么手动实现atof函数（还nm是残的，不支持指数写法），什么“题目主要是输入花费大量的时间，如查找出现超时，尝试多次提交。”我还能说什么呢？牛逼，真nmd牛逼。我不知道这样的题目能锻炼我什么能力，只知道我浪费了好多时间好多心情在这种没营养的东西上面。</p><h1 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h1><p>笔者眼中理想的计算机普及教育课程的评价体系相较于此前模式的改变，大抵如下：</p><p>提升project在评价中的占比，达到50%~60%。同时对project的拓展功能进行额外评分（拓展功能与正态分布不可得兼，不当让学生为了不被正太而将简单的project过分复杂化，加上许多“冗余”功能，使得恶性竞争的风气盛行。入门级的计算机课程是简单的，大家都能学得好，搞什么正态分布？猪头领导，不具体问题具体分析，不求是，当什么浙大校长），由教师、助教依据细则、个人判断进行评分。增加project的数目，包括小组project与个人project，两个短学期的课程中，前者一项（工作量较大），后者三项（工作量较小）为宜。互评作为签到性质的任务，在project的评分中只不占比重，只是平时参与情况的一部分，作为同学们相互学习的一环。同时恶意评分者当受到惩罚。</p><p>不取消期中期末考试因其还有一定价值，但应降低其比重至20%~30%。保证题库的质量，撤销同学们普遍认为没有价值的题目。教师当对所谓“考试技巧”进行强调，强调考试与工程的差异与考试本身的价值，本身的特点。考试要增加对伪代码的支持，简单粗暴的程序填空题当少，更能反映考生理解力和表达力（可用伪代码表达自己的想法）的简述题当有。添加一定量的编程题。</p><p>中学阶段的信息技术课程当向这样的模式看齐，尤其是浙江省的信息技术学科。</p><p>以上的方案不尽成熟，还是需要迭代优化的。（所以就鸽在这吧）</p><hr><p>开始于2019-07-03</p><p>完稿于2019-07-18</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;日经，因为不开心。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随想" scheme="https://nessoffice.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>【围炉夜话】互膜与卖弱——黑暗森林中的生存法则</title>
    <link href="https://nessoffice.github.io/2019/07/18/Toughts-Wo_Laji_Nin_Niubi/"/>
    <id>https://nessoffice.github.io/2019/07/18/Toughts-Wo_Laji_Nin_Niubi/</id>
    <published>2019-07-18T11:50:50.000Z</published>
    <updated>2019-07-18T06:09:53.564Z</updated>
    
    <content type="html"><![CDATA[<p>“我最菜了，您最强啦。”金牌玩家如是说。</p><a id="more"></a><p>没有问卷，没有调查。全程瞎bb，欢迎指责本菜鸡哪里说的不对。</p><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>说到卖弱，大家很容易想到NOI，ACM（IMO怎么没人卖？），想到某几个或某几十个大佬间互夸互卖，“我要退学啦”“我是真的菜”，或者，“还是您更强”“您多厉害啊”。（定睛一看，我们能看到一张强连通图，没有自环的那种（夸夸图），还有一张非常神奇的仅由自环构成的图（卖卖图））</p><p>其中可能有历史原因：一开始某些毒瘤学长喜欢这样，于是后辈也都染上了这种风气。不过这样只能保证风气的开端而无法保证其生命力，真正要维持互夸互卖的风气，还是由互夸互卖这一行为本身的特点决定的。这一Meme的生命力为何得以那么顽强呢？首先，我们需要确定我们需要考虑的问题是否属实，在什么条件下属实。</p><p>互夸互卖的风气着实是存在的，但它存在在哪里呢？在别的学科，比如人文社科的学科上，大家也这样吗？在相对一般的大学中，大家也这样吗？这些先不管，虽然它们和我们要考虑的变量间也存在着一定的相关关系而可作为证据佐证我们的观点（因为懒得调查所以懒得管）。我们来yy一下，在工信学子中，在计院学子中，互夸互卖为何能成为一种历久弥新的风气。</p><h1 id="计院？"><a href="#计院？" class="headerlink" title="计院？"></a>计院？</h1><p>是否计算机专业的学生更能膜人呢？从专业，蔓延到其他领域，似乎是这样。</p><p>计算机课程较适合自学，其起点较低而终点难以估量。于是，同一年龄段的学生间往往差异较大。另外，计算机学科的实践性也使得其与数学物理这样的学科有明显的差异，在计算机学科上的领先能直接表现为可见的成果：动不动就能搞看上去很厉害的项目。这能给其他同学造成较大的冲击。</p><p>这套理论听上去很正确？但它能够解释OI选手间的互膜吗？另外，所谓“看上去很厉害的项目”实际上并不一定有难度。世界上有很多封装好的轮子和实现好的库，许多项目只是调库而已，很容易实现，但效果往往不错。</p><p>个人认为，互膜始于计算机课题的难以描述，还有难以把握，而非其难解性。对于同一个问题，或许大家都有些想法。但是要把它具体地实现，则要考虑许许多多的细节，其中许多并不好描述。于是在问题比较复杂的情况下，对这样的问题的解答有一定“玄学”的特质。一段程序，它为何是正确的呢？它这样不可名状，逻辑这般诡异，却又能得出正确的答案？在能够理解者与无法理解者之间，仿佛存在着语言上的隔阂，虽然处理的都是一样的作业，但二者对程序的理解是完全不同的。这层隔阂，或许是造成互膜风气的一个重要原因。开始这样的“膜”是敬畏性的，但逐渐地它演变为游戏性质的meme。</p><h1 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h1><p>单纯把这一行为视为一种游戏的话，它似乎也有可探讨的余地。</p><p>互夸与互卖似乎是一体两面的，表面上，前者是对他人的赞同，后者是对自身的否定。其目的也是相同的，这在之后讨论。但在操作的难易度上，二者并不相同，夸人可以因人而异，抓住对方的vulnerability猛夸猛奶；卖弱则要更深入的挖掘自己，挖到什么宝都能拿出来卖，以增强说服力。夸和卖也要有新意，有气势，这样效果才好。</p><p>夸人-被夸-夸人-被夸……简单的闭环系统，或者简单的博弈。当然，决策也可以是多样的，比如夸和卖可以结合在一起，这样博弈树的当前节点便能得到转换，其走向也能得以改变：“哎哟，我哪有您强啊，您看看您，①②③；您看我多菜啊，①②③”……</p><p>虽然作为调剂而言，偶尔互膜卖弱还是好玩的。但频率多了会感觉这样的对话真的很像小孩子吵架，只不过内容从“我是你爸爸”“我是你爷爷”变成了“您多强啊”“不不不还是您更强”。追求一个虚无缥缈的无法达到的共识，无法达成的认同，这从方向上来说就错了吧。网络上的辩论家们也沉浸在类似的行为中，不过他们争执的内容也不太一样。重复性强迫行为。自虐。Fort-Da。</p><p>是否我们永远长不大？</p><h1 id="认知"><a href="#认知" class="headerlink" title="认知"></a>认知</h1><p>我们为何而互膜而卖弱？因为我们关心自己在他人眼中的形象。</p><p>感到弱小倒是很稀松平常的状态。在庞大的知识体系面前，在生活的无字之书面前。学得越多，越能感到前人已经将弯路都走遍了，可探讨的问题也探讨个遍了，但自己还有很多细节没明白，对于宏观的知识架构也不甚清晰。面对这样的知识大厦，感到弱小，或者更确切些，敬畏，再自然不过的了。我不相信存在热爱数学而不敬畏她的人。</p><p>但是由热爱、信念、意志出发的作研究，与一般的考试，又是两种状态。既然是敬畏，何必要宣扬呢？对于考试，我们在题目之外，也相当看中排名，会自觉地不自觉地关注自己的，别人的位次。</p><p>惧怕形象在他人心目中跌落不起。无法在成绩上做补救，只得在其他方面上做努力。不去想关于考试的细节，假装看淡一切。拒绝交流，做些无关紧要的事情，划水，摸鱼。</p><p>当然，情况也不尽然，以上是我的情形。不过其他情形也就不讨论了吧，没什么好讨论的，大抵在行为上表现出“卖弱”的同学可以分为四五类，每类有不同的特征。但总归，我们当为自己的言行负责。即便是真的不满意，总是表现出来也不免会让他人不舒服，这是客观结果。在游戏的同时应兼顾他人的感受，尤其是因考试而心情不佳的同学，这并不容易，但我认为是必要的，至少自己要做到（似乎，并非人人这么想，这不是普适的价值观）。</p><h1 id="态度"><a href="#态度" class="headerlink" title="态度"></a>态度</h1><p>所以面对这样的风气，我们该怎么做呢？随意。</p><p>以下是笔者的态度：</p><blockquote><p>世人皆浊，何不淈其泥而扬其波？</p><p>众人皆醉，何不餔其糟而歠其醨？</p></blockquote><p>毕竟，主要是你的综合能力，而不是你的言论，决定了你到底是什么嘛。</p><hr><p>初稿写于2019-07-02</p><p>完稿写于2019-07-18</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“我最菜了，您最强啦。”金牌玩家如是说。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随想" scheme="https://nessoffice.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
</feed>
