<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ness</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nessoffice.github.io/"/>
  <updated>2020-01-23T11:33:39.211Z</updated>
  <id>https://nessoffice.github.io/</id>
  
  <author>
    <name>Ness</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【朝花夕拾】吉静文选 象牙塔</title>
    <link href="https://nessoffice.github.io/2020/01/23/History-My_Essays-Ivory_Tower/"/>
    <id>https://nessoffice.github.io/2020/01/23/History-My_Essays-Ivory_Tower/</id>
    <published>2020-01-22T16:00:10.000Z</published>
    <updated>2020-01-23T11:33:39.211Z</updated>
    
    <content type="html"><![CDATA[<p>未完不待续。</p><a id="more"></a><p>（版权所有，严禁转载。违者自行承担相应法律责任）</p><p>未完不待续。</p><p>Cthulhu风格的幻想小说。</p><h1 id="象牙塔"><a href="#象牙塔" class="headerlink" title="象牙塔"></a>象牙塔</h1><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>在我踏入这个古怪奇特的地方后，这是我第一次看见生物。此地的建筑形制为这个时代流行的式样，然而内部阒静无声，主楼内有十二小室，每间小室均是一个雕像馆，里面摆了台上的动态塑像和底下坐着的几十静态塑像。塑像神情肃穆，似在进行庄严的仪式，只是我所了解的任何文化内均没有类似的仪式。我是在另一幢楼中碰见这个生物的，那幢楼中的小室更多，其中盛放着不知名的各式器皿，应该是用于祭祀的。</p><p>我有生以来从未见过这种生物，其枯萎电线杆似的脖颈支撑着硕大无朋的头部，其上满是代谢秽物与金属制品。它直立行走，手有五指，正抓着某类方形物品用头部的发生器发出古怪的声音。“sun-yet-se？”我听不出什么有意义的话语，但直觉告诉我它念这段话或许有六年之久了。它似乎与这个族群格格不入，显得凄凉又悲哀。</p><p>待我走过它后，我开始思考这个个体的生命状态。雕像馆中的像无疑是这种生物塑的，但竟比活物更有生机。它们可能是一种社会型生物，由一个巨大的中枢牵动个体，构成了一种亚生命模式，而过于弱小或有叛离性的个体将被流放，它们若暴露在自然中，无疑马上会被天敌撕碎。而今却可在这样一个地方待着，活不算活，死不算死，如僵尸一般存在，倒也是件幸事。</p><p>智能无疑是对生命的毁灭。只有认知到这点并将理性由神坛中房放逐，群体才能享有无上的幸福。将灭绝了的高级智能生物留下的遗迹好好利用，如温水青蛙般想手幻觉的愚昧的快乐，这才是幸福的本义，这才是生命的目的，这才是世界的真谛。</p><p>我继续在楼层间移动，又遇着了不少这样的僵尸，专注于手中的物块。智慧，智慧，太智慧了。它们的自我早被所谓了本我占据，被献给了痛苦女士。这些异教徒是必然要付出代价的，就像那些曾自称“地球的主人”的小型哺乳动物一样。</p><p>我走进了一间敞开的小室，一些信息涌入了我的体内。我认得它们的文字了，这种可悲的存在似乎是我的同类。阴暗的小室里堆叠着一些“纸”，上面模模糊糊写了“反思表”还有什么数字，这可能是一种独特的编码。我听见有些声音在向我呐喊，是从“反思表”里传出来的。“学生”的灵魂被封存在这一张张纸片里了。</p><p>这里天黑得很快，不知从何时起太阳就消失了。</p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>自从小泉上次翻车被叫出去回来后，小泉的成绩就越来越差了。在那之前，小泉还是我们车队的二当家，是浮躁圈里的副领袖，每堂自修课都有他爽朗的笑声。</p><p>小泉回来时很失落，问他怎么了，他什么也不说，竟拿出本语文书专心复习。要知道他可有半年没碰过这书。</p><p>小泉不同我们一起大闹了，他总说：“我要好好学习”。晚自修前他竟和那班女生到隔壁阅览室自习，背的还是数学。搞什么啊，他。</p><p>但一切努力都挽救不了小泉越考越差的既成事实。他每每考完都忧郁地静坐在座位上，一言不发。对完答案也这样，考后分析也这样。老师们觉得他没救了，因为他怎么考成这样。班主任屡屡将他叫出去谈话，态度语重心长。我们想安慰他，但感到一种莫大的隔阂。</p><p>小泉不吃饭了，因为要学习；小泉翘副课了，因为要学习。甚至在寝室，大家都睡着后，有个身影窸窸窣窣地下床，拿了书本，幽灵般踱进厕所打开灯开始背书。因为我睡不好，我多次发现他这般行踪。背书声细微却无法忽视。我听不清他背的什么，只一次听到“孙中山……”他就这样，魔影一般，在这里那里，学习，学习，学习……</p><p>小泉在老师心中印象也在逐渐加深。领导有回把全校后几名的人叫到小屋子里开会，其中就有小泉。据门外的人说关门后领导破口大骂：“雾霾！流沙！□□中学的败类！”</p><p>有回夜自修巡逻老师到班内“逛逛”，拍了拍那个选考满分同学的肩膀。“小曹。”态度是温和的。再走到小曹前面的小泉身边，语气甚为严厉。“踱絮踱扩登里乡靠，作尬姆。”小泉一言不发。</p><p>小泉自杀死了，很悲惨。有女生打他尸体边上走过时笑着说这人真逊这年头还跳楼要是她们就怎样怎样。</p><p>小泉的位子空了。有时我们会看着那个位子回想起那个曾经朝气蓬勃的少年，怀念起我们一起打球一起欢笑一起放浪的时光。只是回忆逐渐多了很多不确定性。小泉真的跟我们一同挥汗球场过吗？我们开车时带过小泉吗？小泉在记忆里的影像越来越淡，他姓甚名谁？他容貌如何？越是回忆，就越回忆不起来……</p><p>小泉……是谁？</p><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><p>这一卷坏掉了，没有留下任何拷贝。</p><h2 id="四"><a href="#四" class="headerlink" title="四"></a>四</h2><p>（未完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;未完不待续。&lt;/p&gt;
    
    </summary>
    
    
      <category term="创作" scheme="https://nessoffice.github.io/tags/%E5%88%9B%E4%BD%9C/"/>
    
      <category term="回忆" scheme="https://nessoffice.github.io/tags/%E5%9B%9E%E5%BF%86/"/>
    
  </entry>
  
  <entry>
    <title>【朝花夕拾】吉静文选 郝景芳与其无类型文学</title>
    <link href="https://nessoffice.github.io/2020/01/23/History-My_Essays-On_Haojingfang/"/>
    <id>https://nessoffice.github.io/2020/01/23/History-My_Essays-On_Haojingfang/</id>
    <published>2020-01-22T16:00:00.000Z</published>
    <updated>2020-01-23T11:33:45.269Z</updated>
    
    <content type="html"><![CDATA[<p>无简介。</p><a id="more"></a><p>（版权所有，严禁转载。违者自行承担相应法律责任）</p><h1 id="郝景芳与其无类型文学"><a href="#郝景芳与其无类型文学" class="headerlink" title="郝景芳与其无类型文学"></a>郝景芳与其无类型文学</h1><p>第一次看郝景芳是在某个深夜，十几点钟。看的是《莫比乌斯》，一部我现在看来相当不错的小说。当时一个字也看不进去，只觉得：这也叫科幻？再看《去远方》，没看几页，书就扔一旁去了。</p><p>之后感觉《去远方》有深意，想看，就又把书捧了一回，看到一篇《癫狂者》，感到耳目一新。再是零零星星地看了她其他小说，逐渐喜欢上了这种风格，于是把书放下时会深深一叹，不错，实在不错。</p><p>郝景芳的小说一般都很有特色，现实加上现代，科幻与纯文学的元素并重。如《我们的房子会衰变》中，房子会一路衰变下去，在不同的元素时会呈现不同的性质，给房客带来不同的感受，这样的设定很新奇，很好玩。但小说不止于此，会衰变的房子衬托的是不会衰变的大地。房子化为氢气飘走，房客掉落在地上，准备再找一座房子时，他这般发问：“为什么，为什么我们的大地不会衰变？”这样的叩问是很有力的，大地可以是人生，是外界，但私以为这样的解读没意思，远不及那句叩问，包含了千言万语。这一篇，和她很多其他小说一样，不符合上面“现实加上现代”等概括，很难明确其归宿，但就是那样独特、新颖、深邃。郝景芳称她这些小说为“无类型文学”。</p><p>“无类型文学”，正如其名，与其说是种新的类型，毋宁说是一种感觉，就如“cult”，有大体上的特点，但相当难定义。《西游记》，依郝景芳的看法，也有一些“无类型”的成分，其中的旅途可以看作是一个人足不出户，其中的猿是心猿，马是意马。再如李商隐，其诗作也不好用八大题材归纳，大多朦胧而诗意，直通现代。而在一些比较流行而大众的作品如动漫作品中，我们也能看到一些这样“无类型”的元素。如《游戏王DM》的主线剧情可以看作是一次找寻自我的求索之旅，而《游戏王GX》“darkness”篇中人类的消失也可看作现代人在生活中的迷失。这样的例子还有很多很多，举例的目的不在证明往“无类型”这个词上贴金，而在发掘文艺作品中的亮点。这些亮点（我称为“现代感”）有的难以言说，但却深入而锋利，直击人心。现代艺术的一大特点为陌生感，情节/绘画/旋律虽怪诞纷纭，但它们多是可感的，以形式上的陌生拉近了与受众在情感上的距离。卡夫卡的现代的伟大在他描绘了无数个同样自感卑微渺小者艰难的生存状态。郝景芳的“无类型”亦多着眼于个体的忧郁、无助、疑虑、徘徊。我认为她是有现代感的，不过一个词语往往有其归宿，正如一个个类型在人们心中有固有印象。提及现代，我们多想到卡夫卡；提及后现代， 我们多想到卡尔维诺和博尔赫斯。“无类型”一词，可作为郝景芳的标签，这其中也蕴含了她对文学的一些看法。</p><p>郝景芳的小说——除了“无类型”，主要的特点，可谓“丰富”“精深”“忧郁”。“丰富”体现在小说的各外在方面：题材、人物等。以题材为例，有黑帮，有宇宙，也有当代社会。同一题材也可以表达并不类型化的主体，如《九颜色·红》借宇宙航行写爱情，《流浪苍穹》则借宇宙航行写人与人之间的隔阂。社会现实的背景在郝景芳小说中出现得较多，但故事也是多元的，像工地工人与中产阶级小女的交流（《莫比乌斯》），两代人有所不同又有所相似的成长经历（《生于一九八四》），大学生对未来深感迷茫时的选择（《祖母家的夏天》），亲密关系由热烈转向平淡的困境（《九颜色·黑》）等等。还有些故事基于幻想，背景独特，如《山中问答》。也有的故事将现实与虚幻相叠加，如《去远方》《生于一九八四》。作者甚至能用完全合乎现实的故事营造极虚幻的效果（《癫狂者》）。郝景芳的作品总是给人强烈地陌生感，仿佛在色彩绚丽的房间间穿梭，能品味不同房间的美与整体布局的独到与特色。</p><p>郝景芳小说的丰富还体现在别的方面，像人物、意象。人物与题材相通，此处便不再展开。至于意象，小说中出现很多理科的专业术语与一些较罕见的意象：G蛋白偶联受体被拿来印证观点，引力红移与暗能量被用以表情达意，至于罕见的意象，淤青便是一例。《祖母家的夏天》中写主人公躲避现实“如牛顿躲避瘟疫”，其最后的归宿，专利局局员也与爱因斯坦的人生遥相呼应，很有意趣也很有深意。《山中问答》则将不同时期不同国别的思想家汇聚起来，实则在探讨生命与宇宙的真谛。谈到以理科知识写文学故事，王小波也是一个好的例子。他用拉格朗日微分方程，偏导数作意象，小说中时常出现化工上的物质。个人认为，这样的写法远比理科生“强说愁”来得精彩，来得个性，来得有趣。</p><p>“丰富”是广度上的特点，而“精深”则是针对深度而言的。《弦歌》中“我”对音乐有独到见解，对世界名曲如数家珍，感受贴切。《生于一九八四》中平生精于西方启蒙思想家的著作，言语行为均体现出他阅读之深。《莫比乌斯》中小舟与阿木交谈时引用的例子无不体现了她对现实世界的无奈与期望世界能更有温情的强烈愿望，一个无力改变世界而又怀有美好愿望的女孩形象便跃然纸上了。其他短篇中涉及的科学原理也较为专业，如《九颜色·黄》，利用颜色形成的原理组织文章；《九颜色·蓝》中则聚焦了全息技术。</p><p>事实上，上面的论述大多聚焦的是形式上的方面。私以为艺术的灵魂之一在于传达情感。缺乏真情实感，所谓艺术作品也不过如工业上的零件一类，只是技术产品。情感是寄宿于作品中的，以主体为灵魂，以形式为外壳。形式在很大程度上能影响情感的传达，如对笔者而言，现代小说较之现实主义小说更能产生精神上的震撼。郝景芳小说有趣的形式能让人对其产生兴趣，但这种表层的兴趣尚是为深层的精神冲击——情感蓄势的。郝景芳小说的深度更是蕴含在小说所寄予的情感上的。依我所见，她的小说是饱含深情的，犹如一颗水滴，足以激起读者心中一片片涟漪，经久不息。</p><p>郝氏文学多是卒章显志式的，前面提到的《我们的房子会衰变》自不必说，《最后一个勇敢的人》也将对谜团的揭秘放在了最后两段，还有《孤单病房》的组织也类似。小说前面往往会设置很多悬念，这使读者有一种解密的代入感与刺激感，而最终又可以豁然开朗，接受这颗情感炸弹，体味其袅袅余音。</p><p>除了情感上的饱满，深入，一如忧郁，是主题上的特点。可能忧郁是郝景芳小说最大的特点。举《生于一九八四》为例，这是郝景芳为数不多的长篇之一（无类型文学的形式更适合短篇，故本书整体上现实主义色彩更浓厚），也是部自传体小说，它反映了一个人，一代人乃至整个人类族群的生命困境及两代人在不同社会环境下对世界的认识，郝景芳本人的人生观或许也蕴含其间。《生于一九八四》以《1984》为隐线，但政治并非其主体。“they are watching you”在文中表达的是主人公轻云在人生路上惴惴不安茫然若失的感觉。这是一种心境，可以由小说感受到，但并不好阐述。即使在十七章（最终章）轻云找到了心灵的平静，脱离了苦海，她还是在零零零零零章（最终章）被否定而毁灭，“书页将尽，我也将不复存在”。这里情感与主题是多元而复杂的，但其中的忧郁明显而强烈。小说的形式灵活多变，但其中的悲伤痛苦没有改变。</p><p>“忧郁”一词，我在郝景芳的小说中只见过一回，她用的词更多是“孤独”：《孤单病房》，《孤独深处》（文集命名），《九颜色·紫》的阿莲，《九颜色·白》文末的小说……更多的时候她并没有诉诸词语，只是叙事，但情感藏在事里。“忧郁”与“孤独”，更多是一个形式上的问题，不同的用语指向的都是一个点，生命的困境，这是个比较大的话题，这里就不深入讨论了。对这一问题的思考使人痛苦也使人深沉，这也可以印证前面提到的“精深”。深入与愁苦，在郝景芳的小说中是交织在一起的。</p><p>“忧郁”一词，出现在《生于一九八四》第十三章，轻云回忆起自己的往昔，回忆起自己的读书处。她说自己爱读忧郁的书，包括尼采、塞林格、威廉·福克纳等，下面跟着自己的感受。“明明是没有故事的故事，但忧郁的气质滚滚而来”，这是她对塞林格的评价。的确，许多人能从《麦田里的守望者》中读到一种现代人常有的辛酸，这可能是我们一代人的普遍心结：物质生活条件虽然优渥，出路虽然多种多样，但内心时常突然感到一种惶恐，一种迷茫与失落，对生命无意义的困惑。“诗苦而后工”，工则工矣，内心仍不得解脱，包括艺术在内的许多东西无法帮助我们脱离苦海。痛苦无形无踪且无处不在。郝景芳小说的主题主要是关于这一心结的，虽然她写的只是个体的困境，但字里行间无不显露出一整代人的迷茫。</p><p>小说的忧郁还体现在人物的设定上。不同于许多现代作家笔下人物被放到次要位置甚至消失，郝景芳小说中人物占的地位是较为重要的。她笔下的主要人物（或叙述者）一般都是忧郁的、迷茫的、不自信的，就连《山中问答》中的主人公也有一丝这样的气质。在《九颜色·黑》中，主角心理活动中反复琐碎的语言很好地体现了人物这些个特点。不过，人物虽忧郁但并不怨天尤人，他们熟知是他们自己的悲观主义倾向与社会规律决定了自己的郁闷，愤世嫉俗没有意义且他们也不敢，所以它们的心理倾向是忧郁的，幻想隐居但又囿于现实（轻云）。《生于一九八四》诡谲的第十二章是轻云的梦呓，但即便在潜意识里她也并没有责怪他人。《报告》中的男主人公或许是郝景芳小说中最勇敢的角色了，但这份勇敢是基于厌倦的。《九颜色·紫》中的“我”显然外强中干且心思细密，否则他怎能凭报纸一版就体味阿莲的孤独？《莫比乌斯》中的小舟抑郁倾向比较严重，且由阿木视角展开的叙述下不少细节让她的性格更显立体。除去忧郁的主人公，郝景芳小说中也有一类闲云野鹤式的主人公，像《看不见的星球》中的叙述者，不过这样的人物只出现在幻想成分较多的作品中。事实上上文的这些例子也可用于印证郝景芳小说“丰富”的特点。</p><p>与主要任务的郁闷相对的，次要人物常常表现出乐观、自信、博学的特征。《生于一九八四》中平生博学且谈吐非凡，他的外部知识储备强大得足以掩盖他的内心。《最后一个勇敢的人》里斯杰47以死捍卫自己的思想。以及《九颜色·蓝》中的谭飞，自信而机智。“天为什么是蓝的？因为有太阳的存在”。他分明在说自己是他人的太阳！当然，太阳只有一个，主人公们明白这一点，故而他们在旁人的优秀中会转向低沉愁闷。</p><p>我是较推崇郝景芳的作品的，故介绍这三大特点或者优点。犹记得刚接触《看不见的星球》时，看到达尔文主义与拉马克主义的星球、旅人的星球、说谎者的星球……多有意趣多有意味啊！我想我一直想写的小说可能就是这样的。尤其是这一篇中星旅人的语言，空灵而饱含哲思。当然，郝景芳并非美玉无瑕，私以为其一大失败之处便在语言上。</p><p>郝景芳主要操两手语言，一套现实一套理想（或怪诞）。前者比较缺乏特色，尤其碰到平淡无味的剧情时，很催人入睡。后者往好了说是空灵，往坏了说是飘，飘到哪里都不知道，可能叫人看得云里雾里的。像很多学理的人一样，郝景芳的文字干净简练，只是其中缺少诙谐，这可能与她的创作理念也有关联。我是喜欢幽默的，因为幽默可以视作对荒诞的一种反抗。</p><p>她的第二大失败之处不在自己，而在读者身上。因为我们常常带着偏见看事物，觉得事情应该如何如何，以自身的意志评定创作者的意识。我是在《北京折叠》出名之后买的《去远方》，以为这是本科幻集，所以看到《莫比乌斯》时感觉很奇怪也很师往。但在尽力消除偏见，怀着探索的心态重读时，这一篇便又显示出其独特魅力来。很多情况下带着有偏颇的固有观点看问题，问题常往无益无趣的方向发展。或许是不喜欢类型文学与纯文学自扫门前雪吧，郝景芳创作了这些“没有归属”的小故事，它们启示我们类型不是最值得关注的，真正重要的是作品的思想与情感，这是标签无法标签的。</p><p>最后提一点，郝景芳的短篇不适合一口气读下来，不像很多作家的作品，可以一连读好几篇。她几乎每篇都有许多亮点，情感真挚而深沉。看完一篇总免不了要把书放下，到一边走走，回味回味刚才读到的故事，思索故事背后的人生。她的小说也经得起反复欣赏。在这个意义上，这些故事对我会有很大影响，即使以后我把它们否定了，我也会记其当初自己是如何在其中找到了自己，找到了自己想找的路。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;无简介。&lt;/p&gt;
    
    </summary>
    
    
      <category term="创作" scheme="https://nessoffice.github.io/tags/%E5%88%9B%E4%BD%9C/"/>
    
      <category term="回忆" scheme="https://nessoffice.github.io/tags/%E5%9B%9E%E5%BF%86/"/>
    
  </entry>
  
  <entry>
    <title>【艺苑偶得】吉静文选 关于《世界尽头》</title>
    <link href="https://nessoffice.github.io/2019/12/10/Composition-My_Criticism-About_The_End_of_the_World/"/>
    <id>https://nessoffice.github.io/2019/12/10/Composition-My_Criticism-About_The_End_of_the_World/</id>
    <published>2019-12-09T16:00:00.000Z</published>
    <updated>2019-12-10T15:14:50.698Z</updated>
    
    <content type="html"><![CDATA[<p>“外面，斑驳的，漆黑的树。”</p><a id="more"></a><p>叙述者的语调看似冷漠，实则温暖。这种温暖也构成了小说的基调（“柔和的微黄路灯光”是其象征）。叙述者佯装漠视被叙述者，实则关心。在这层意义下，叙述者与被叙述者是统一的，因为叙述者在叙述中也从被叙述者中找到了自我。</p><p>为什么要前往世界尽头呢，因为世界予人不如意。世界既有工作场所的属性，也有“家”的属性。工作的压迫使主体，即作业做不来的，缺乏学力的无识阶级，受到恐怖的无声的压迫。因为知识便是一种权力一种资产，世界（学校）是没有情面的筛选器。异化的学习也使得学生发生了异化在名利场中挣扎。而世界（家）的缺失则使得这份异化无以扭转。强关系的缺失让人与人的联系退化，人们相互间没有认识没有理解而只能建立虚伪的建立于资产之上的脆弱的膜关系。世界（家）没有温暖没有爱也发生了异质。世界本身的变异导致在世界以内无法解决世界的变异，而要改变世界，只能在世界之外找寻答案。</p><p>小说似乎没有给出世界变异的出路，被叙述者似乎什么也没有改变，但实际不然。世界始终是封闭的场所，问题在于封闭性所带来的是压抑还是温暖（联通），即应取得工作场所与家这存在互斥性质的属性间的平衡。被叙述者改变了世界的结构，这是他给出的出路。当然世界总会向更糟的方向改变，周期性地改变。在这层意义上，世界仍然是无可改变的。</p><p>所以主题实质上还是在呼唤爱呀，被叙述者的选择是自我肯定或爱自己，通过流放自己。可能有其他出路吧，但我不清楚。</p><p>流放的场所不多，老是流放的话原本有的意境也会消失的。如果我们去的每一个地方都一样安全，那么我们要从哪里去寻找温暖呢。这是一个问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“外面，斑驳的，漆黑的树。”&lt;/p&gt;
    
    </summary>
    
    
      <category term="创作" scheme="https://nessoffice.github.io/tags/%E5%88%9B%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>【图灵之路】踏过的坑（2019-11-08更新）</title>
    <link href="https://nessoffice.github.io/2019/11/08/Other-Programming_Pits/"/>
    <id>https://nessoffice.github.io/2019/11/08/Other-Programming_Pits/</id>
    <published>2019-11-07T16:00:00.000Z</published>
    <updated>2019-11-08T14:59:40.565Z</updated>
    
    <content type="html"><![CDATA[<p>伤痕，与并不美好的记忆……</p><a id="more"></a><p>（不定期更新，一般心情好的时候会咕）</p><h1 id="2019-04-15"><a href="#2019-04-15" class="headerlink" title="2019-04-15"></a>2019-04-15</h1><p>Merge的函数题，没有保存变量就直接elem[i] = elem[j++]，导致数据丢失。从22：06：04到23：26：41，提交共十次。</p><h1 id="2019-04-16"><a href="#2019-04-16" class="headerlink" title="2019-04-16"></a>2019-04-16</h1><p>大数阶乘，压位做法。在j从0到len遍历的前提下把res[j] *= i和res[j+1] += res[j] / MOD混在一起写，这样的运算顺序是有误的。从1：36到1：52。</p><p>最近点对问题。将Points_x与Points_y混淆以致造成了难以发觉的错误。疯狂对拍但几无成效，在四个点的情况下还是直接调试更能发现问题。一开始在Merge中使用了n导致超时。从18：30到20：00再到22：00。</p><p>文件名的问题倒是一下就能发现。</p><h1 id="2019-04-17"><a href="#2019-04-17" class="headerlink" title="2019-04-17"></a>2019-04-17</h1><p>有序序列中位数问题，一直纠结于二分，没想到顺序一下就成。思路没打开。</p><h1 id="2019-05-06"><a href="#2019-05-06" class="headerlink" title="2019-05-06"></a>2019-05-06</h1><p>凸包旋转卡壳的算法中，用$&gt;$出现了问题，换成$\geq$则没事了。凸函数不一定严格单调啊。</p><p>调试时候把数组改小了记得做标记……不然看到RE很惭愧。</p><p>括号很多的时候记得检查，否则调试起来心情差。</p><h1 id="2019-05-10"><a href="#2019-05-10" class="headerlink" title="2019-05-10"></a>2019-05-10</h1><p>这一个标题下尽是，愚蠢的问题和糟心的状态……</p><p>5月8日期中考，旁边的人键盘敲得很响，想起了校赛时候的不适应，我的心境仿佛又回到了高中时代……偏执、疑虑、焦躁……今早的离散考试时状态亦复如是。</p><p>得冷静下来。这不仅是关于programming的问题了，它关系我的学习观，关系我对自己与他人的看法。Just admit it, scorn it, surplus it.</p><p>最后，“Cheers to the goddamn life, society, and everything.”</p><p>①他妈的”由裁判实现细节不表“！Sample都跑不起来的代码就交上去，这是计算机学院的学生做的事情吗？但不光是这一项，对dev的不熟悉，对于win7环境的不熟练还有内心世界的混乱都给解题的过程添了不少堵。一项一项的，都给我去死吧！</p><p>猪头临沂大学的漂亮代码是这样得：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span>  <span class="keyword">int</span>  KeyType;</span><br><span class="line"><span class="keyword">typedef</span>  <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  KeyType *elem; <span class="comment">/*elem[0]一般作哨兵或缓冲区*/</span></span><br><span class="line">  <span class="keyword">int</span> Length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">CreatSqList</span><span class="params">(SqList *L)</span></span>;<span class="comment">/*待排序列建立，由裁判实现，细节不表*/</span></span><br></pre></td></tr></table></figure><p>那这个CreatSqList怎么实现呢？从Sample可以看出是要先读长度，然后一项一项读进来。因为参数是(SqList *L)，所以下面都要用-&gt;，直接L.Length就报错。但是实践之后发现只能读Length，读elem就会报错，为何？因为没有分配地址。所以这笔函数要这么写：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">CreatSqList</span><span class="params">(SqList *L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">L-&gt;elem = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span> *));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;L-&gt;Length);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= L-&gt;Length;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;L-&gt;elem[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我一万年没有用malloc了，写这个函数的时候就慌得一批，之后想着要分配元素嘛，就写L-&gt;elem = 1000<em>(int </em>)…，但是这样是不行的。因为它elem啊，只是一个指针而已。</p><p>我不喜欢指针所以平时也不怎么用指针，自己写写代码基本不会有这方面的问题，但一到考试就凉透了！5月7日晚”复习“的指针完全没用。</p><p>这些几把考试不让查资料，所以把语法搞清楚很重要。血的教训！</p><p>②快排在5月7日晚上有“复习”，但是考试的时候还是一团乱麻。要理解快排，先要用例子建立直观的概念模型，从简单的例子到复杂的例子。简单的例子不包括重复项如“3 2 4 1 9 0 7”，还有不直观但容易调试的例子如“1 2”“2 1”等，乱七八糟的例子如“1 1 1”。理解之后是处理细节，考虑重复项他喵的该怎么搞，这样这样，基本就没问题了。</p><p>③有理数均值，特判！0/10这样的。要么在输出分母的时候加上去，要么把euclid写得更鲁棒一点，而不要少怀疑sscanf的有效性，虽然我之前的写法也很漂亮。</p><p>④整数分解，又是傻逼题一道……复习还是有一丁点用处的，因为当时也没有用心对待这题。本质就是个dfs，参数里设m——本次要分解的数，last——上次传下来的最大值，d——当前层数。对于;和\n搞个全局变量mark还有其函数专门处理。就这样，然后细节瞎搞。有的地方?:之类能让代码更简洁。</p><p>综上，关键词如下。<strong>高效复习</strong>、<strong>语法</strong>、<strong>模拟</strong>（从易到难、细节）、<strong>代码风格</strong>（优雅、鲁棒）、<strong>心态</strong>……</p><p>层层深入。</p><h1 id="2019-06-10"><a href="#2019-06-10" class="headerlink" title="2019-06-10"></a>2019-06-10</h1><p>今天补CF的状态……实在……一言难尽。题目是<a href="https://codeforces.com/contest/1176/problem/D" target="_blank" rel="noopener">这个</a>，看着很像密码题，它勾起了我关于ACTF的一些回忆……</p><p>一开始先是把题目看错了，不知怎地就把$p_{a_i}$理解成了$p_i$，导致处理$a_i$为质数和$a_i$为合数的方法产生了很大的分离，代码很冗长，而且写完后才发现有细节没想到，要处理非常麻烦。重新看题才发现是自己理解有误，只得把代码推倒重来。</p><p>之后是采用贪心的思路，分别用last_prime与last_composite维护$a_i$为质数/合数时$b_i$的index。但是在处理$a_i$为质数时，没有真正搞清楚变量的真实含义，以致屡出问题。在认识到所谓last_prime本质上是一个index后才对代码的正确性有了更深入的感受。</p><p>但这样还是碰到了一个很诡谲的error……本地测试没有问题，但是提交到服务器上便出错，此记录如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// origin</span></span><br><span class="line"><span class="keyword">while</span>(primes[nodes[last_prime].num] &gt; nodes[i].num)</span><br><span class="line">last_prime--;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// polished</span></span><br><span class="line"><span class="keyword">while</span>(nodes[last_prime].num &gt;= <span class="number">200000</span>) <span class="comment">// caution</span></span><br><span class="line">last_prime--;</span><br><span class="line"><span class="keyword">while</span>(primes[nodes[last_prime].num] &gt; nodes[i].num)</span><br><span class="line">last_prime--;</span><br></pre></td></tr></table></figure><p>隐蔽的数组越界。以后在手工模拟是要尤为注意，越界与否，这样的问题。</p><p>在越界的问题上，还碰到了RE的问题。RE是因为题目中给定的n最大规模为2e5，但是输入的是2n，故而该规模需×2。在校赛时也碰到了类似的问题，还需要多加注意。</p><p>之后在跑一个点时出现错误。debug的思路为：判断output和answer中不一样的数，发现answer中一个位置为质数而output中对应的位置为合数。猜想nodes[last_composite].used = 0出现问题。调试发现last_composite对应的位置存在问题！last_prime确实可用贪心维护，但是last_composite并不能用贪心维护！于是手写了一个lower_bound，才得以通过此测试点。</p><p>然而这样还是碰到了TLE的问题。观察测试点发现它有相当多的重复数据。于是此时，lower_bound的复杂度会由二分退化为线性。需要添加记忆化的操作。至此，此题成功AC。</p><p>有何启示？明天再说……</p><h1 id="2019-11-08"><a href="#2019-11-08" class="headerlink" title="2019-11-08"></a>2019-11-08</h1><p>ds的bonus 2，再次在这些睿智课上感到了自己的睿智。</p><p>题目要求MST，我们的老师只给C，所以sort啊priority_queue呀用不了了。要么prim，要么kruskal。简单回忆了一下，前者要手打堆，后者要手写归并。因为不想手写归并，就手打堆了。把自己之前写的prim粘了出来，然后修修改改调了老半天，代码又臭又长，整整130行，交上去，一半点没过。</p><p>把手打的堆换成priority_queue试试看，然后还是有1WA2T。理论上不该T啊，prim不是适用于稠密图的么，那个WA又是什么情况。浪费时间猜想猜了半天啥也不懂。</p><p>assert半天，测了一下PTA速度，发现读3e5的数据就要个70ms，离谱。prim里面也没有死循环，应该就是复杂度炸了。（但是为什么呢，不懂不懂不懂啊）</p><p>搜题解，发现别人的prim里没堆，就直接搜。咱也不懂为啥这样能对……反正能对就能对吧，默写一遍……</p><p>还是有两个点过不去，memset啊assert啊又调了老半天，最后发现prim的松弛和dijkstra是不一样的……wsdsb。</p><p>心态得调整好啊还是。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;伤痕，与并不美好的记忆……&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://nessoffice.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>【艺苑偶得】吉静文选 世界尽头</title>
    <link href="https://nessoffice.github.io/2019/11/03/Composition-My_Novels-The_End_of_the_World/"/>
    <id>https://nessoffice.github.io/2019/11/03/Composition-My_Novels-The_End_of_the_World/</id>
    <published>2019-11-02T16:00:00.000Z</published>
    <updated>2019-11-13T11:45:39.918Z</updated>
    
    <content type="html"><![CDATA[<p>“外面，斑驳的，漆黑的树。”</p><a id="more"></a><p><strong>一 出逃</strong></p><p>出了东四，就到了世界的尽头。</p><p>世界是环形的，上面是无尽的天，下面是无尽的地，只有在地之上，世界是有界的。世界很小，沿着边境走上半个钟头，就能回到原点。</p><p>世界之外是什么，没有人知道。</p><p>每个人来到世界上都是有任务的，要做课题，要作报告，所有人都很忙。没有人关心世界之外是什么。</p><p>某在边境上看到了外面，斑驳的，漆黑的树，于是他想要到世界之外看看。</p><p>从世界中出去并没有什么后果，每个人都很忙，没有人管他。</p><p>借着单车，他出了东四，看到了世界的尽头。</p><p>前方是楼房，无尽的楼房，蔓延到无穷远点。清一色的浅黄色四层楼房，阳台上晾着五彩的衣服，蔓延到无穷远点。</p><p>楼房间并无空隙，他知道，如果进去，便会迷失在那无尽之中，再也回不来了。</p><p>只有沿着边境行走，才是安全的。</p><p>单车在呼啸，在风中呼啸。咆哮的风，吹来生命的气息，吹来死亡中摇曳的生命之息。</p><p>世界之外，不仅是安然的居民区，亮起星星点点的灯；还是诱惑的人造光，光之内繁华商场，商场内人头攒动；还是望不见头的黑暗分岔路径，通向看不见的所有的可能性。在黑夜中，一切都无比真实，真实得有一丝虚幻。</p><p>他有点害怕了，但他别无选择，只能向前走，向前走。至于前面有什么，他并不知道。</p><p>此时虽只是下午七点，但天黑得不可思议，似乎太阳永远不会再升起。</p><p><strong>二 光柱</strong></p><p>他绕了个弯，从那片诱惑与商场中逃出了。他松了一口气。</p><p>如以方向来说，他此时正处于世界的西面。西面是不稳定的，边境是一片废墟。往常只有工人们会出入世界西境。</p><p>因为不清楚西境的地形，即便他贴着边境走，他也不知道自己会不会走到其他地方。</p><p>但是四下里光很明亮。柔和的微黄路灯光，相当温暖。</p><p>此外，他还在东方，看到了操场上，射向天穹的那道光。准确的说，那是一道光柱，是■■■■结束时亮起的光。■■■■虽然让世界外的人涌入世界，侵占了他们的资源，引得民不聊生。但此刻，他突然对这■■■■充满了感激之情。</p><p>这样走下去的话，就能返回了吧。他想。</p><p><strong>三 出逃</strong></p><p>走了不知多久，他经过了若干通向东边的路口，有的是不与世界联通的，很明显；有的或许是与世界联通的，但他并没有验证过。此刻他停留在一条宽敞的路口。他看见一幢自己曾见过的塔楼，他看见微弱的灯光下蓝色衣服下的保安人员。无疑，这里能通向世界内部，能通向那片光所在的操场，能通向自己的寝室，而且这是他验证过的。</p><p>那是若干月前抑或若干年前，他并不记得或是并不知晓自己出逃的原因，正如此刻他并不记得或是并不知晓自己出逃的原因。那时他逃向了西边，在下午四点的阳光下，在西边徘徊游荡，在空无一人的新楼外游荡，在崎岖的石子路间游荡。最后，他在回程途中把车摔坏了，拉着破败的自行车走回了寝室。</p><p>他清晰地记得这一条路，这一幢塔楼。这是一条安全的路，没有任何危险，能够让他平安回到寝室，回到寝室做并不存在的课题，回到寝室思考自己为什么而活着。这样一想，他感到有些害怕。</p><p>所以他没有进去。</p><p><strong>四 黑夜与立交桥</strong></p><p>如果按原路返回，那么必可回到原点。这样证明不了世界是联通的，但可以回去，好让他继续做他不存在的课题，思考生存的目的。这是很没意思的，因为是一条已经走过的路。但这是最后的手段。如果他迷失了，这是他唯一的出路。无趣，但是安全。</p><p>但是绕过又一个弯之后——此时他理应处于世界的北面，他发现原路返回已是不可能的了。一座巨大的立交桥横亘在他与对面之间，立交桥似乎通往无穷远。因为这座桥，他到达不了对面，他的一条路径被割断了。只有前方能走了。充满不确定的，通向美丽死亡的，前方。</p><p>柔和的微黄路灯光暗了许多。他朝右边望去，虽然光柱依旧在视力所及范围内，但前方的路似乎通往不了右侧。</p><p>他进入了一片密林中，耸立的黑暗楼房挡住了那光柱，阳台上看不见任何衣服，因为太黑了。他似乎已经迷失在这密林中了。</p><p>心脏在强烈地泵着，他确乎已经无路可走了，除了前进，除了前进。一旦停下来，他就会消失了。唯有更快地骑，唯有更快地骑，骑行便是他的意义所在。抱着这颗泵跳的心脏，他体味到了在世界之中未曾感受到的，存在的实感。</p><p><strong>五 港湾</strong></p><p>过了密林，又是一个转弯。</p><p>他看见些许人烟，看见平房门口的小卖铺老板还有他身后五光十色的零食，看见冒着热腾蒸汽亮着各色招牌的路边小馆子。他看得有些饿了。想吃东西。想吃好多好多东西。但不是现在，现在他要回去。</p><p>在人烟中穿行和在无人区穿行不同，前者是只要行进便会有安定感，后者则是要在速度中获取安定感。他一向不喜欢人烟，但此刻这些擦肩而过的人们却让他感到了些微妙的温情，即便他们与他毫无联系。</p><p>渐渐地，他发现这片区域自己似乎来过，这些招牌，这个地形。确实，再转一个弯，他便到了■■街，他已经回来了，他已经回来了。</p><p>他有点想哭。</p><p>他没有买夜宵，径自回寝了。路上枯萎的树似乎活过来了。</p><p><strong>六 莫比乌斯</strong></p><p>第二天，他发现自己没有感冒。</p><p>今天虽然也没有事情可干，但生活还是要生活的。</p><p>起码我到过世界尽头了，世界是联通的，如同一个环，一个莫比乌斯环。他想。</p><p><strong>日后谈</strong></p><p>取材于某人的亲身经历，基本是如实记录，对乌七八糟的意识过程。</p><p>出于文学意义考虑，把现实的地名事件名全隐去了。本来小说所选的意向比较现实偏工业化比较无趣，就尽可能往魔幻里改了，但还是很现实很工业化很无趣。</p><p>灵感来源：</p><p>①《世界尽头与冷酷仙境》，村上春树著，仅仅是取个标题而已，两篇差得挺远的，个人感觉。</p><p>②《莫比乌斯》，郝景芳著，主要灵感来源，个人特别欣赏的一部作品，很浪漫，也很悲哀。</p><p>③《逃离》，爱丽丝·门罗著，主题有一定的相似。个人很不喜欢这一篇，也没用心看。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“外面，斑驳的，漆黑的树。”&lt;/p&gt;
    
    </summary>
    
    
      <category term="创作" scheme="https://nessoffice.github.io/tags/%E5%88%9B%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>【围炉夜话】《天气之子》简评：古典神话的现代演绎</title>
    <link href="https://nessoffice.github.io/2019/11/02/Animes-tenki_no_ko/"/>
    <id>https://nessoffice.github.io/2019/11/02/Animes-tenki_no_ko/</id>
    <published>2019-11-01T16:00:00.000Z</published>
    <updated>2019-11-07T14:13:10.822Z</updated>
    
    <content type="html"><![CDATA[<p>十六岁真好啊。</p><a id="more"></a><p>和同学去看了&lt;天气之子&gt;，新海诚作品。影片开头比较主流，中期发展略奇怪，结尾有一丝悲哀的意味（可能是因为我肚子痛）。总体而言，还是部相当不错的电影。</p><p>影片的亮点非常多，尤其在画面上。新海诚动画的画面风格尤其在人物特写，风景类场景上表现得特别明显：色彩明亮和谐，线条细腻柔和，较为唯美。画面上，女性角色的足部演出，尤为出彩。</p><p>影片音乐以摇滚电音为主（？），较为现代。音乐同场景间的联系非常紧密，烘托氛围的效果尤其好。</p><p>影片的世界观还是值得一说的，这也是贯穿剧情的主线：在神存在的巫女存在的世界中，神的心情表现为天气，而巫女作为神的使者能够通过祈祷来改变天气，为人们带来幸福，但巫女实质上是神的祭品。女主人公阳菜便是这样一个巫女，男主人公帆高启发她利用自己的能力来养活自己，来为人们带来幸福。之后阳菜了解到了真相，发现自己成了祭品被禁锢在云上，然后帆高用爱的力量把她救回来了，然后天气也一直很坏，就是这样一个故事。</p><p>（突然想到了&lt;秽翼的尤斯蒂娅&gt;，同样是多灾多难的土地，同样是祈祷的圣女，这大概是日本文化的一项表征吧）</p><p>这样的世界观能够诞生很多不同类型的作品：古典神话，克苏鲁神话，政治小说，等等。&lt;天气之子&gt;，实质上便是一个古典神话的现代演绎，里面充满了超自然的难以解释但又能够解释（引入神即可）的要素。影片的主题似乎多元似乎不清晰，但至少爱是一个清晰的主题，爱就完事。</p><p>我比较关心的是对那些超自然现象的社会解释：为什么要设置阳菜成为巫女的原因？神的目的是什么？等等。从这个角度看，我看到的是一个小圆式或者克苏鲁式的故事：愚昧的神在进食本能的指引下选择少女成为巫女，神因吃下少女而欢愉，因吃不下少女而愤怒。每个时代都会出现成为祭品的巫女，但男主人公为了女主违逆神的意志，展现了人类的勇气与抗争。</p><p>影片里很多细节很棒，比如对人物的刻画(男主的腼腆，女主的善良，nagi的风骚)，比如突然紧张的气氛，还有还有，此处不一一列举。</p><p>但电影在主题上显得较为混乱，这是硬伤：中途似乎在强调天气对人心情的变化，后期似乎在探讨人与世界的选择，但并未做深刻的诠释。</p><p>我对影片中的一些细节也不甚满意，比如异地三年（太不负责任了，电影的处理也太理想太浪漫了），比如拿枪指人，霹雷。毕竟十六岁啊，不是出个门就是麦田里的守望者来着，得有思想才行啊。推荐同学们不要学男女主翘课打工早恋，学习知识才是正道。</p><p>如果我还是十六岁，我可能会很认同这样的主题与价值观吧。</p><p>十六岁真好啊。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;十六岁真好啊。&lt;/p&gt;
    
    </summary>
    
    
      <category term="动漫" scheme="https://nessoffice.github.io/tags/%E5%8A%A8%E6%BC%AB/"/>
    
  </entry>
  
  <entry>
    <title>【围炉夜话】番剧推荐及简评——第一辑：cult</title>
    <link href="https://nessoffice.github.io/2019/10/20/Animes-My_Recommendations_Cult/"/>
    <id>https://nessoffice.github.io/2019/10/20/Animes-My_Recommendations_Cult/</id>
    <published>2019-10-19T16:00:00.000Z</published>
    <updated>2019-11-08T01:19:15.840Z</updated>
    
    <content type="html"><![CDATA[<p>虽然标题是番剧，但所推荐内容是较广义的……咱对这些名词归属也不大懂。</p><a id="more"></a><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>模仿steam商店简介所做的娱乐向简介。</p><p>排序与喜好程度无关，随性的排序。</p><p>含一定量的剧透。</p><h1 id="简评"><a href="#简评" class="headerlink" title="简评"></a>简评</h1><p>被标上cult的作品一般会有哪些特点呢？似乎不好说清楚。这更多是从观众行为而非作品本身特点出发的分类。</p><p>《兽爪》是从头cult到尾的，看似随性实则认真的作品。</p><p>《小圆》的cult性质完全不在于剧本而在于魔女结界的艺术风格，虽然这部作品的剧本足够优秀。</p><p>《大护法》的血腥程度已经足够了，虽然杀的不是人流的血也是绿色的，但这是真正意义下的恐怖统治。</p><p>《怪化猫》画面谈不上cult，但分镜是的。</p><p>《柯赛特的肖像》，也是因为画面入选的，还有其中梦幻的镜头。</p><p>《大世界》是优秀的国产动画电影，很荒诞，也很现实。</p><p>《Psycho-Pass》不算。</p><p>（其实这里面贴的除了《兽爪》其他cult意味不是特别浓重……）</p><h1 id="1-兽爪"><a href="#1-兽爪" class="headerlink" title="1.兽爪"></a>1.兽爪</h1><p>ED：<a href="https://music.163.com/#/song?id=826418" target="_blank" rel="noopener">好き</a></p><p>深刻（？）而混乱的世界观，故事线。乌七八糟的哲理。</p><p>草稿式的粗犷的画面，时而会出现写实的元素。</p><p>不时闯入画面中的超现实场景与荒诞。</p><p>血腥，暴力，性。</p><p>纯粹的爱情，纯粹的浪漫。</p><h1 id="2-魔法少女小圆"><a href="#2-魔法少女小圆" class="headerlink" title="2.魔法少女小圆"></a>2.魔法少女小圆</h1><p>OP：<a href="https://music.163.com/#/song?id=489998110" target="_blank" rel="noopener">コネクト</a></p><p>红蓝主题曲：<a href="https://music.163.com/#/song?id=28138667" target="_blank" rel="noopener">and I’m home</a></p><p>高度个性化的人物，从形象到性格。</p><p>萌萌的小圆脸，超治愈。可爱的外星萌兽，和少女并肩作战，拯救宇宙。</p><p>充满艺术感的魔女结界，包括11种以上不同的富有冲击力的艺术风格。</p><p>富有未来感的前卫建筑风格，取材自全球各地。</p><p>悠扬咏叹的音乐，出自梶浦由记之手。</p><p>无处不在的象征。</p><blockquote><p>我，真是个笨蛋呢。</p></blockquote><p>（不是很推荐《叛逆的物语》）</p><h1 id="3-大护法"><a href="#3-大护法" class="headerlink" title="3.大护法"></a>3.大护法</h1><p>纸片眼睛，注视着你。不说话。</p><p>蚁穴，死镇。从始至终平静之下的惊悚。</p><p>极富文学性的台词。</p><p>什么，是人呢。</p><p>（想不透为啥会有人觉得里面的台词尴尬）</p><h1 id="4-怪化猫"><a href="#4-怪化猫" class="headerlink" title="4.怪化猫"></a>4.怪化猫</h1><p>流动的浮世绘。</p><p>迷幻的世界。</p><h1 id="5-柯赛特的肖像"><a href="#5-柯赛特的肖像" class="headerlink" title="5.柯赛特的肖像"></a>5.柯赛特的肖像</h1><p>玻璃器皿，娃娃，眼球。</p><p>意识流下的叙事。</p><p>哥特式恐怖。</p><hr><p>初稿写于2019年08月02日</p><p>完稿写于2019年10月20日</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然标题是番剧，但所推荐内容是较广义的……咱对这些名词归属也不大懂。&lt;/p&gt;
    
    </summary>
    
    
      <category term="动漫" scheme="https://nessoffice.github.io/tags/%E5%8A%A8%E6%BC%AB/"/>
    
  </entry>
  
  <entry>
    <title>【图灵之路】应用快捷键提升效率（更新至2019-09-25）</title>
    <link href="https://nessoffice.github.io/2019/09/25/Other-Hot_Keys/"/>
    <id>https://nessoffice.github.io/2019/09/25/Other-Hot_Keys/</id>
    <published>2019-09-24T16:00:00.000Z</published>
    <updated>2019-10-13T12:39:39.602Z</updated>
    
    <content type="html"><![CDATA[<p>熟练地掌握快捷键，在很大程度上能够提高使用计算机（不仅仅是编程）的效率。</p><a id="more"></a><p>熟练地掌握快捷键，在很大程度上能够提高使用计算机（不仅仅是编程）的效率。</p><p>至于能提升多少，我就不知道了……这个应该由人文社科的同学来研究。</p><p>作为平凡的学生，熟练掌握快捷键是很爽的。本来要3s做的一个动作，现在0.5s就能做了；本来要按4步的动作，现在1步2步就能做了。没试过不能体会这种感觉，试过了就回不去了。因为是真的爽啊。</p><p>（文中涉及的很多快捷键不好归类，推荐随意浏览，或是想找快捷键时F3）</p><h1 id="平凡的快捷键"><a href="#平凡的快捷键" class="headerlink" title="平凡的快捷键"></a>平凡的快捷键</h1><p>F1：显示帮助</p><p>F2：重命名</p><p>F3：搜索（文本编辑器中、文件夹中、浏览器中）</p><p>F4：显示最近浏览目录（文件夹中）</p><p>((ctrl)+(shift))+(fn)+arrow：到达/选中 文章/页/句/词 首/尾</p><p>ctrl+L：选中一行（删除时用）</p><p>win+V：剪切板</p><p>win+R：运行（cmd、注册表等）</p><p>win+D：显示桌面</p><p>win+E：资源管理器</p><p>win+L：锁屏</p><p>win+shift+S：截屏</p><p>win+W：windows ink（包括便笺、草稿、截屏，弱弱吐槽一句，这个便笺和草稿都为啥强制全屏啊）</p><p>ctrl+S：保存</p><p>ctrl+Z：撤销</p><p>ctrl+X/C/V：剪切/复制/粘贴</p><p>ctrl+‘+’/‘-’：页面放大/缩小</p><p>ctrl+滚轮移动：页面放大/缩小</p><p>ctrl+F/H：查找/替换（需要注意“全部替换”和“下一个”在不同文本编辑器/IDE/浏览器中可能不一）</p><h1 id="资源管理器中的快捷键"><a href="#资源管理器中的快捷键" class="headerlink" title="资源管理器中的快捷键"></a>资源管理器中的快捷键</h1><p>alt+2：创建新文件夹</p><p>键入文件(夹)名的前面部分，即可定位到该文件(夹)，这一性质也适用于其他场合。</p><h1 id="浏览器中的快捷键"><a href="#浏览器中的快捷键" class="headerlink" title="浏览器中的快捷键"></a>浏览器中的快捷键</h1><p>F11：全屏</p><p>F12：开发者工具</p><p>ctrl+H：历史</p><p>ctrl+B：书签</p><p>ctrl+W：关闭标签页</p><p>ctrl+tab：切换标签页</p><p>alt+tab：切换窗口</p><h1 id="vim中的快捷键"><a href="#vim中的快捷键" class="headerlink" title="vim中的快捷键"></a>vim中的快捷键</h1><p>gg：回到文首</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>fc：用以比较两个文件的差异，对拍的时候很好用。</p><h1 id="一些小结论"><a href="#一些小结论" class="headerlink" title="一些小结论"></a>一些小结论</h1><p>在文件夹中直接输入文件夹名/文件名即可定位到要找到文件夹/文件，这个性质可以推广到其他环境下。</p><h1 id="愿景"><a href="#愿景" class="headerlink" title="愿景"></a>愿景</h1><p>（所谓愿景，就是没有实现但是想要实现的功能）</p><h2 id="快速新建txt"><a href="#快速新建txt" class="headerlink" title="快速新建txt"></a>快速新建txt</h2><p>要顺手写一个.cpp文件怎么办？自然可以先打开IDE然后“新建文件”然后“保存”。但是“保存”要设置路径好麻烦。我习惯把文件分门别类放到不同的目录里，在这个前提下“保存”是真的麻烦。</p><p>个人一般都是在当前目录下搞事情。新建.txt改后缀为.cpp，有时候也改成.py，.md等等等等。这里头的问题主要在新建.txt上，因为要“右键，w，up，up，enter”，巨麻烦。然后w完电脑还要抽风一小会儿的。有没有更快的方式呢？</p><p>改了一下注册表，这样up，up，enter就没了。操作序列为“右键，w，t”，方便了一些，但电脑抽风的问题还是没有解决，而且既要用鼠标还要用键盘好拙劣呀，我想只用键盘实现。仿照alt+2能新建一个文件夹，我们能否给alt+3 bind 一个新建.txt的功能呢？</p><p>用AutoHotKey试了一试，发现电脑还是会抽风，好拙劣啊。</p><p>做不来，太难了。</p><h2 id="分组复制粘贴"><a href="#分组复制粘贴" class="headerlink" title="分组复制粘贴"></a>分组复制粘贴</h2><p>debug的时候常常会遇到这样的问题：代码里面有一些冗余要粘来粘去的，然后测试样例也要粘来粘去的。在win10 1809剪贴板更新之前，这样的需求只能通过重复劳动完成：先把代码复制粘贴，再把样例复制粘贴，经常要在代码与样例间跑来跑去。剪贴板更新了历史记录之后，我们只要规划好要复制的内容的顺序，就不用跑来跑去了，也不用重复复制了，好方便啊。</p><p>（虽然剪贴板已经很方便了，但我还是闲得没事想了一个新方案：分组复制粘贴。</p><p>类比《帝国时代》中我们能给部队编号然后快速定位到军队所在的位置，我们能否给要复制粘贴的内容编个号然后分组处理？比如ctrl+C+1与ctrl+V+1相对应，它们与ctrl+C+2/ctrl+V+2互不干扰，这样子？</p><p>这个方案首先键位比较奇葩……ctrl+C+1要同时用到三根手指然后三根手指还要旋成一个差不多等边的三角形，这对手不是很友好……</p><p>技术实现上，这好像不知是模拟按键了，涉及到剪贴板的工作原理，涉及到内存分配这种系统级编程的问题了……好难啊，做不来。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;熟练地掌握快捷键，在很大程度上能够提高使用计算机（不仅仅是编程）的效率。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://nessoffice.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>【围炉夜话】对高等教育中的评价体系的简单批判，以浙江大学为例</title>
    <link href="https://nessoffice.github.io/2019/09/14/Toughts-On_Evaluations_In_ZJU/"/>
    <id>https://nessoffice.github.io/2019/09/14/Toughts-On_Evaluations_In_ZJU/</id>
    <published>2019-09-13T16:00:00.000Z</published>
    <updated>2019-09-14T12:26:22.208Z</updated>
    
    <content type="html"><![CDATA[<p>人上人，人中人，人下人。尊卑贵贱，一目了然。</p><a id="more"></a><p>不开心。不开心就想打人，但是我谁都打不过。我谁也打不过，我什么也不是。</p><h1 id="从高考看评价体系的必要性与复杂性"><a href="#从高考看评价体系的必要性与复杂性" class="headerlink" title="从高考看评价体系的必要性与复杂性"></a>从高考看评价体系的必要性与复杂性</h1><p>我们在批判前先应搞清楚我们为何而批判。比如高考，天天有人在批判。为什么？因为高考决定了高等教育资源的分配，这对于今后发展的竞争力（无论是教学资源差异造成的能力差异，抑或毕业院校在各高校、机构中的认可度，抑或其他）也有极大的影响。相较之下，批判高中期末考的人就少得多，因为期末考在教育资源的分配上影响相对较小。所谓“一考定终身”，便是对高考在影响资源分配上的决定性作用的肯定。当然，这句话也是可以批判的，你可以感性感受，抑或理性分析，此处略去不表。</p><p>再以高考批判为例。既然高考这般重要，在国计民生中占有此般地位，它理应有高认可度的评价体系，理应有完善的公平的程序。而事实上，许多高考批判的文章，都是针对评价体系（高考所涉内容）及其影响（应试教育模式）。我们争论某块内容值不值得考，争论一些具体的题目是否合理，争论以高考为导向的应试教育模式是否让我们的孩子。这些每个都是较大的话题，此处略去。</p><p>但在高考作为决定资源分配的属性上，人们大多是持肯定态度的。显然，这里也有不公平，资本对于基础教育资源有一定的影响，但无可否认的是，1978至今，无数出生卑微的人们通过高考实现了阶级跃迁，改变了自己的生活，改变了在没有高考的时代中趋于固化的人生轨迹。这样的一种制度在血缘、资本之外引入了新的为大多数人所肯定的变量，从而让人们能够通过学习改变人生，也使社会发展更具活力。</p><p>（以上陈述均无数据支撑，欢迎批评）</p><p>从高考的例子中我们不难看出，人们对于“依据学术评价分配资源”这样一种模式多是肯定的，但对于评价的宏观方向还有细则则各具不同看法，这些不同的看法多是从对个人有益的角度出发的，如要求调整学科难度，改变学科权重，实行南北榜制度或是全国一卷制度，采用赋分制度，等等等等。高考常常会改革，几乎每项改革都会伴有一定的争议。总而言之，高考是一个极为复杂的系统，里面所涉的变量极多，要实现全局最优是尤为困难的（如何定义“全局最优”也是一个问题）。</p><p>另外，虽然高考总体而言较为公平，能够以相对平均的方式实现资源分配，但它在个人层面上存在一定的不确定性。大数定律能够保证“清北实力”的学生不掉到一本，但无法保证他们稳上清北。故而，高校的自主招生政策成为了优生的一份保险，增加了高校优生共赢的可能性。</p><h1 id="浙江大学评价体系中的一些不合理要素"><a href="#浙江大学评价体系中的一些不合理要素" class="headerlink" title="浙江大学评价体系中的一些不合理要素"></a>浙江大学评价体系中的一些不合理要素</h1><p>在高等学府中，评价体系变得更加复杂。学校往往会依据GPA对学生进行综合评价，结合其他乌七八糟的制度。以下内容仅与GPA而不涉及其他乌七八糟的制度。所批判院校为浙江大学。</p><p>GPA的计算方式大抵是课程学分越高，其权重越大。课程按百分制或是五级制计分，依据赋分制给出绩点。这里明显继承了赋分制度的缺陷：变化率过于陡峭。分数差一分，绩点可以没差，也可以差出0.3，这就造成了卡绩的现象。尤其是微积分等5学分的大课，卡绩对总绩点影响巨大。在80分段，80分只有3.6，而89便有4.5，于是落于此分段常会叫人心惊胆战。分数的密集与绩点的疏松间的矛盾导致非核心考核项会对绩点产生较大冲击（尤其C语言程序设计这类水课，题目没得往深度出，就考视力考所谓“细心”了？都什么阶段了还这样搞学生？有意思的很，有意思），这对能力极值较高而均值较低的同学而言是不利的，而私以为这样的同学应受到更高的评价。</p><p>另外，不同教师的个人评价体系也不尽相同。有的教师站在学生的立场思考，觉得大家拿了高分会开开心心，就尽力把分数往高处打，这样的教师往往较受欢迎。有的教师比较苛刻，不擅长站在学生的立场思考，打的分数一般都比较低，这样的教师往往会被唾骂。还有一些教师，打分搞两极化。还有一些教师，评价标准奇葩，生物课按字的美丑打分，你妈的怎么不去开书法课？还有一些教师，随机打分。还有一些教师……在“查老师”上，教师下方的评论不光与其个人对课程的表达相关，更和学生的绩点挂钩。于是在攻击教师的陋习之外，不少评论也会攻击其给分（当然，如果是第一类教师，那么下方会有很多赞美，各种角度来的赞美）。不得不承认，这很功利。但也不得不承认，这正是我们趋利避害，希望高绩点心理的直接作用。</p><p>学生选课种存在的变数导致同一个学生的绩点走向会依据课程不同而不同。不同课程导致的变数很明显，同一门课程也能因教师不同而造成较大变数。有的教师事多，有的教师事少。若前者均绩高于后者，则无可厚非；若前者均绩低于后者，就挺滑稽。私以为个人历史素养不算太差，写了一学期论文，也给老师看看做了一些修正，到头来成绩低得离谱（其他班的同学则不然），就挺滑稽。生活本身也很滑稽，表面上，大家都笑嘻嘻的，但大家心里怎么想，又有谁知道呢。又有谁知道呢。</p><p>这些是存在的问题，我并不知道怎么解决。学校也有一些调整方案，比如正态分布，比如互评制度。这些制度引得学生怨声载道（也有老师表示否定这样的制度），校方的态度则是坚持这些制度并不做调整。难道这些制度很完美不需要调整么？人家改革开放都永远在进行时你一个正态分布完美地可以传之无穷了？具体问题具体分析，难道所有通识课的设置都可能符合正态分布么？我不知道。互评制度则更为人所诟病。如果大家做的工作都差不多，态度也都较积极，硬是要分出个级别是什么意思？提前感受社会险恶人心冷暖？在一个小组中，存在划水的同学是可能的，但大家都认真的情况也不在少数，这是很可能的情形。校方做出的制度不能让多数同学认可，校方也不对其做出符合历史潮流的修正，不能给出让大家信服的解释，而是听之任之，固执己见，视学生为任己宰割的鱼肉。这样的大学，是国内一流的大学么？这样的学校，是培养人才的学校么？培养技工差不多，查脸色，搞关系，抄文章的高级技工，很棒哦。</p><p>（只是偏激的一己之见，暂不接受反驳，如不赞同，略去此段即可）</p><p>我们的学校讲“求是”。在学术上，实事求是固然是好的，这是为学应秉持的态度。但在管理层面，所谓“求是”也有丝“古板”“缺乏变通”的意味，仿佛校方是一个大家长，学生就该听家长的话，不该质疑。但是，这样不合理的预设自然不会有合理的结果。骑在自行车上的打卡一族，传了一代又一代的物理实验报告，求是么？教师们基于这些事实所给的成绩，求是么？三本之名，看上去是对浙大学术成就的否定，但我更觉得，这是对于浙大管理与制度设置上的否定。说了这么多GPA相关的，其他能说的还很多，例子过多，只举一个。把学校当公园建，校外人士直接放进来，抢学生的饭，堵学生的路（暑期旅游团），很求是哦，很创新哦。</p><p>觚不觚，觚哉！觚哉！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人上人，人中人，人下人。尊卑贵贱，一目了然。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随想" scheme="https://nessoffice.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>【白冠之礼】深入浅出密码学：第二章 序列密码</title>
    <link href="https://nessoffice.github.io/2019/09/08/Notes-Understanding_Cryptography-CH02/"/>
    <id>https://nessoffice.github.io/2019/09/08/Notes-Understanding_Cryptography-CH02/</id>
    <published>2019-09-07T16:00:00.000Z</published>
    <updated>2019-09-08T01:51:50.107Z</updated>
    
    <content type="html"><![CDATA[<p>密码学！</p><a id="more"></a><p>（这篇文章本该有图的，实际却没有，因为画图太累惹……LFSR的部分对着图看效果会好很多，但我懒得画，同学们请自己脑补吧~）</p><h1 id="何谓序列密码"><a href="#何谓序列密码" class="headerlink" title="何谓序列密码"></a>何谓序列密码</h1><p>上一章中我们了解了对称密码的一类炒鸡简单的情形：替换密码，这一章我们继续讲对称密码学。</p><p>通过对现有加密算法类型的归纳，我们发现对称密码主要可分为序列密码（Stream Ciphers）还有分组密码两大类。其差异是较大的：序列密码对每位加密，而分组密码将原文分成若干块进行加密。</p><p>序列密码相较分组密码使用较为不广泛一些，但它适合在计算资源受限的设备上运作（因为小而快？）。在效率上，二者的所差实际不多。</p><p>本章我们主要讨论序列密码，因为这是一个大话题。</p><p>序列密码分<strong>同步序列密码</strong>与<strong>异步序列密码</strong>两类。前者是在线的：实际使用的密钥由预设的密钥与原文一并生成；而后者是离线的，所设的密钥就是加密的密钥。容易看出，前者的安全性更高一些，但是所耗时间更久（因为不能并行计算了）。但实际生活中，还是同步序列密码用的更多一些。</p><p>至于序列密码的加解密，非常简单：加密是$y_i = e_{s_i}(x_i) = x_i + s_i \ mod \ 2$。解密是其反函数也便是其本身。</p><p>为什么序列密码的加密解密可以这么简单呢？因为在模二加法等价于异或，而已知$x_i, y_i, s_i$的一个元素无法求出剩下两个元素。只要$s_i$有良好的随机属性，那么已知原文的部分片段及密文是无法解出其他原文的。书上说，异或运算具有可逆性，是完全均衡的（输出有多原像且它们出现的概率均等）。这二者保证了序列密码是一种良好的对称密码。</p><p>从上文的表述我们容易发现：序列密码的安全性完全取决于密钥序列。故而密钥序列的生成是序列密码的关键。密钥序列必须有良好的统计属性，足够“随机”，这样才能提升安全性。故而，我们需要了解随机数相关的知识。</p><p>（序列密码也被称为Vernam加密，因为它最早在1917年由Gilbert Vernam发明）</p><h1 id="随机数生成器"><a href="#随机数生成器" class="headerlink" title="随机数生成器"></a>随机数生成器</h1><p>在讲随机数生成器之前，我们就不讲随机数了。顾名思义，随机数是数列中的概念，表明这一数列足够“随机”。至于“随机”，这是一个玄学词汇。我们往往会依据数据的各项统计属性刻画它的“随机性”，或，可预测性。在计算机中，我们会使用三类（其实是两类）随机数生成器（Random Number Generator）。</p><p>其一，TRNG（T for True），真随机数生成器，即通过各式物理过程生成随机数。这样做的好处在于输出几乎具有不可复制性。</p><p>其二，PRNG（P for Pseudo），伪随机数生成器，是可以计算出来的，但具有良好的统计属性（<del>至于是什么属性，就别问啦</del>）。比如ANSI C中的rand()函数，就是通过一个初始的种子还有一个运算实现的。</p><p>其三，CSPRNG（Cryptographically Secure Pseudo-Random Number Generator），密码学安全的伪随机数生成器。它是PRNG的一种特例，具有更多的属性：它不可预测（当然，这是不可能的，毕竟是伪随机数。这里不可预测指给定部分密钥，计算出前继位/后续位在计算上是不可行的，即不存在时间复杂度为多项式的算法能够确定前继位/后续位）。</p><p>我们先不管随机数生成器的实现细节，假设我们有了足够标准的上述三类随机数生成器作为我们的密钥流生成器，那么我们要怎么得到一个完美的序列密码的密钥呢？在此之前，我们需要看这个“完美”要如何定义：密码体制若在无限计算资源的情况下也无法破译，则其为无条件安全的，或信息理论上安全的。</p><p>很明显，这个定义和计算安全不一样，它更强一些。那么是否存在无条件安全的密码呢？一次一密（OTP，One-Time Password）便是这样一种无条件安全的密码。它有三个条件：①通过TRNG生成密钥序列；②有且仅有合法通信方知道密钥序列；③每一密钥序列位$s_i$仅被使用一次。</p><p>很明显，这样的OTP是无条件安全的。我们把等式系统写出来，容易发现这样一个等式系统是不可解的，知晓$s_i$与知晓$x_i$完全等价。这里用到了第一个条件：随机数是通过TRNG生成的。如不然，各位间存在这样那样的函数关系，即使求解很困难，这样的等式系统在理论上仍是可解的（因为它们彼此不独立），已知部分明文的话。</p><p>这样的OTP虽然理论上似乎很理想，但它的使用并不广泛，条件一首先是一个限制，但主要的问题在条件二与条件三，尤其是条件三。条件二要求信道绝对安全，但这并不容易满足。而条件三要求一段密钥只能用于一篇原文且密钥需与原文登长。这里，密钥只能使用一次的限制要求通信双方频频交换密钥，而密钥与原文等长的条件则大大提高了交换密钥的成本（想象一下，你在传输1GB的机密视频前要先交换1GB的密钥……）。</p><p>因为这些原因，实际生活中我们很少使用OTP。但它启迪了我们，只要密钥足够随机，攻击者便无法通过破解得到原文。所以问题在于如何设计随机数生成的算法使得得到的随机数足够随机，这是一个被研究了很久的话题，而我们不妨看看现实生活中的序列密码是生成随机数的，具体是如何运作的，它们与OTP存在怎样的不同。</p><p>需要说明的是，实际的序列密码均不是无条件安全的，我们期望它们是计算安全的，即采用最好的算法的操作数的下界也在我们的期望之上。但这一定义里存在许多问题，其中一个便是：“最好的算法”如何确定？</p><p>为了避免OTP多次交换密钥的麻烦，我们采取新的模式：通信双方交换一次短密钥，通过密钥序列生成器来依据初始密钥（它很像是种子）生成实际使用的密钥。</p><p>那么这个密钥生成器要如何设置呢？我们能否通过线性同余发生器（比如ANSI C中的rand()），一种PRNG得到密钥序列呢？很明显，不能。因为简单的已知明文攻击足够帮助攻击者计算出整个密钥。</p><p>所以，我们需要CSPRNG。利用反馈移位寄存器可以得到CSPRNG的一种可能。那么我们就来学学吧。</p><h1 id="基于移位寄存器的序列密码"><a href="#基于移位寄存器的序列密码" class="headerlink" title="基于移位寄存器的序列密码"></a>基于移位寄存器的序列密码</h1><p>本节所述“移位寄存器“均为线性反馈移位寄存器（LFSR，Linear Feedback Shift Register）。它由若干时钟存储元件（触发器）还有一个反馈路径组成。触发器的个数称LFSR的度。LFSR通过反馈网络计算一些触发器的异或和，将其作为上一触发器的输入，重复此过程，这便是LFSR的基本运作模式。</p><p>书上给出了一种度为3的简单的LFSR模型，我们能够通过它对LFSR的运作模式产生一些感性的印象。于是，我们可以抽象出LFSR的数学描述。我们注意到，触发器输出后的开关决定了该输出是否参与反馈，故我们可以$p_j$，反馈系数刻画某一输出对整一反馈路径的贡献。而本次输出与且仅与反馈系数、此前的输出（输入也算在输出里了）存在关联。简单归纳后我们不难得到：</p><p>$s_{i+m} = \sum\limits_{j = 0}^{m-1} p_j \cdot s_{i+j} \ mod \ 2, s_i, p_i \in \{ 1, 2 \}, i = 0, 1, 2, \dots$。</p><p>显然，本次输出是此前输出的一些线性组合，故LFSR也被称为线性递归（为啥不叫递推呢）。</p><p>很自然，LFSR中可能的状态共$2^m$种，其中全0的下一个状态还是全0。至于其他状态，它必然绘在若干步之后陷入某个循环之中。故度为m的LFSR可产生的最大序列长度为$2^m - 1$。</p><p>我们如何确定LFSR的循环节，换言之，我们如何确定$(s_i, s_{i+1}, \dots, s_{i+m-1})$在给定的递推条件下多少步后会走进一个循环里呢？我们考虑这一LFSR的特征多项式$P(x) = x^m + p_{m-1}x^{m-1} + \dots + p_1 x + p_0$。那么当此多项式为本原多项式时输出序列的周期能取到$2^m - 1$。证明？我不懂哦。</p><p>至于LFSR的安全性，其实它是堪忧的。如果LFSR被作为序列密码使用，那么密钥k便是反馈系数向量$(p_{m-1}, \dots, p_1, p_0)$。假设攻击者知道一些明文，一些密文，他还知道LFSR的度m，那么他便可以展开攻击了：把$s_m = \dots, s_{m+1} = \dots$写出来，只要m个方程就够了。然后我们发现这是一个由m个方程组成的m元一次异或方程组，跑个高消就能解出密钥了。这足以说明LFSR的密码学属性之差了。这也反映LFSR是一个具有良好统计属性但密码学属性的PRNG实例。</p><p>然而，LFSR并未丧失其所有密码属性，我们可以把多个LFSR垒在一起得到一个健壮的密码体系。比如Trivium就是这么来的。至于为什么垒在一起就更安全了呢……这我就不懂了。</p><p>书中介绍的Trivium是一种较新（新？2005年呀）的序列密码，它是否安全还是有待时间检验的（好像是有不少攻击，网上能搜得到，虽说并未细看）。它是把三个移位寄存器垒在一块，然后它的独特之处在于放了个AND操作，这样Trivium的数学描述便不完全是线性的了。这Trivium的设计初看也挺复杂，就不分析了。</p><p>事实上，序列密码非常非常容易受选择明文攻击。因此，我们需要在输入参数里加入一个nouce，它是随机生成的，并不需要保密，只是用于让同一密钥每次生成的密钥序列都不相同，以抵御选择明文攻击。</p><p>Trivium的加密分三个阶段：初始化，热身，加密。初始化阶段用于读入nonce还有清空寄存器；热身阶段计时4×288=1152次，用于充分随机化密码；加密阶段从第1153周期开始，每位吐出的位便是密钥序列位。</p><p>Trivium的一大特点在于它的紧凑性（硬件实现上的紧凑）。Trivium由288位长的移位寄存器组成，其所占面积约为4000个门，大致可以16位/时钟周期的速率计算密钥序列（为什么是这样的呀）。来做一下简单的计算，假设硬件设计的主频是125MHz。那么加密速率为16位×125MHz=2G位/秒。（当然，没有比较，我们并无法知晓这快在哪里）</p><h1 id="要点回顾"><a href="#要点回顾" class="headerlink" title="要点回顾"></a>要点回顾</h1><p>1.在绝大多数领域，分组密码的使用要广泛于序列密码，当然也有例外的情形，尤其是计算资源受限的情况之下。</p><p>2.在对随机数的要求少，很多时候PRNG就够了。但在密码学这一块，我们需要CSPRNG或是TRNG。</p><p>3.OTP是无条件安全的，但是它的应用比较受限，因为它苛刻的条件。</p><p>4.LFSR虽具有良好的统计属性，但它并非很好的序列密码，除非我们把多个LFSR组合起来。</p><h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><p>2.1是个人应该都会吧。顺便，<em>Kaspar Hauser</em>我个人并不是很喜欢。</p><p>2.2中提了一些概念：密钥的生命周期，生命周期内与外密钥的存储，密钥的生成与分发。要求我们以OTP为例解释这些概念。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">一次一密系统在实际生活中的意义：在需要近乎绝对安全且对资源消耗几乎没有限制的场景下</span><br><span class="line">密钥的生命周期：使用前无限期，使用后作废</span><br><span class="line">在生命周期内密钥的存储：安全地存储</span><br><span class="line">在生命周期后密钥的存储：无需存储</span><br><span class="line">密钥的分发：通过安全的信道</span><br><span class="line">密钥的生成：物理手段</span><br></pre></td></tr></table></figure><p>2.3是找出多次使用的假OTP（不满足第三条件）的vulnerability。很明显，它易受已知明文攻击或者选择明文攻击。</p><p>2.4没意思。2.5让手工模拟LFSR的计算过程。</p><p>2.6已知明文攻击即可，解50个异或方程组即可。复杂度为$50 \times (200^3) = 4e8$，标准PC可以一跑。</p><p>2.7不懂。表2-3里没有m=8的本原多项式。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Understanding Cryptography exercise 2.8</span></span><br><span class="line"><span class="comment">// code by Ness</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LEN = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> feedback[LEN+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> seq[(<span class="number">1</span>&lt;&lt;LEN)+<span class="number">5</span>];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; hash_pool;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">encode</span><span class="params">(<span class="keyword">int</span> begin)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; LEN;i++)</span><br><span class="line">&#123;</span><br><span class="line">ans *= <span class="number">2</span>;</span><br><span class="line">ans += seq[begin + i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> begin)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; LEN;i++)</span><br><span class="line">ans ^= (feedback[i] * seq[begin + i]);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">load_feedback</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">feedback[<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(id == <span class="number">1</span>) feedback[<span class="number">0</span>] = feedback[<span class="number">1</span>] = <span class="number">1</span>; <span class="comment">// x^4 + x + 1</span></span><br><span class="line"><span class="keyword">if</span>(id == <span class="number">2</span>) feedback[<span class="number">0</span>] = feedback[<span class="number">2</span>] = <span class="number">1</span>; <span class="comment">// x^4 + x^2 + 1</span></span><br><span class="line"><span class="keyword">if</span>(id == <span class="number">3</span>) feedback[<span class="number">0</span>] = feedback[<span class="number">1</span>] = feedback[<span class="number">2</span>] = feedback[<span class="number">3</span>] = <span class="number">1</span>; <span class="comment">// x^4 + x^3 + x^2 + x + 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">load_feedback(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> seq_encode = <span class="number">1</span>;seq_encode &lt; (<span class="number">1</span> &lt;&lt; LEN);seq_encode++)</span><br><span class="line">&#123;</span><br><span class="line">hash_pool.clear();</span><br><span class="line"><span class="keyword">int</span> seq_encode_copy = seq_encode;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">seq[i] = seq_encode_copy % <span class="number">2</span>;</span><br><span class="line">seq_encode_copy /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">hash_pool.insert(encode(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> step = <span class="number">0</span>;;step++)</span><br><span class="line">&#123;</span><br><span class="line">seq[step + LEN] = calc(step);</span><br><span class="line"><span class="keyword">int</span> hash_val = encode(step+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(hash_pool.count(hash_val))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= step + LEN;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, seq[i]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d\n"</span>, step+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">hash_pool.insert(hash_val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（当然，2.8背后的数学原理我一点也不懂不要问我）</p><p>2.10也不知道什么情况就有点不想做……这本书的印刷是怎么回事？</p><p>2.11就一综合题，要求我们把之前所有的口胡都转化为实践，有点烦的……（还是口胡舒服啊）懒得跑高消，就手解方程组了。</p><p>2.12手工模拟即可，因为寄存器里的1很少（良心出题人），关于当下的1什么时候会转移到会有影响的位置就好了。算出来只有第2、3、68、69位是1。从这个例子我们可以看出来，Trivium的周期是较大的，某一位要经过较多shift操作之后才能影响到全局。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;密码学！&lt;/p&gt;
    
    </summary>
    
    
      <category term="信息安全" scheme="https://nessoffice.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
      <category term="课程笔记" scheme="https://nessoffice.github.io/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>【图灵之路】从零开始的ICPC：杂项整理（2019-08-12更新）</title>
    <link href="https://nessoffice.github.io/2019/08/25/ICPC-Naive_Items/"/>
    <id>https://nessoffice.github.io/2019/08/25/ICPC-Naive_Items/</id>
    <published>2019-08-24T16:00:00.000Z</published>
    <updated>2019-09-16T05:45:50.416Z</updated>
    
    <content type="html"><![CDATA[<p>杂项\cry指的不是不好归类的算法，而是一些简单的需要注意的事项。</p><a id="more"></a><p>杂项\cry指的不是不好归类的算法，而是一些简单的需要注意的事项。</p><p>这篇文章很多该写的地方并没有写完甚至没有开写。</p><p>常读常新，提醒自己哪些错误经常犯，有意识地矫正。</p><h1 id="二分中的细节"><a href="#二分中的细节" class="headerlink" title="二分中的细节"></a>二分中的细节</h1><p>左闭右闭：mid = l + r + 1 &gt;&gt; 1，l = mid + 1，r = mid</p><p>左闭右开：mid = l + r &gt;&gt; 1，l = mid，r = mid - 1</p><p>l = mid - 1找区间中满足条件的最大索引；r = mid + 1找区间中满足条件的最小索引</p><p>如果数组是a[] = [1, 3, 3, 3, 5]，那么</p><p>lower_bound(a, a+5, 3) = a+1, upper_bound(a, a+5, 3) = a+4</p><p>lower_bound(a, a+5, 4) = a+4, upper_bound(a, a+5, 4) = a+4</p><p>lower_bound(a, a+5, 5) = a+4, upper_bound(a, a+5, 5) = a+5</p><p>lower_bound(a, a+5, 5) = a+5, upper_bound(a, a+5, 5) = a+5</p><p>概括起来，就是lower_bound返回大于等于x的最小地址，如寻找不到这样的下标，则返回尾地址；至于upper_bound，则把上文的大于等于改为大于。</p><p>常见</p><h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><p>忘记特判。</p><p>未认真读题/关注clarification或notes。</p><p>未初始化全局变量（特例：树状数组在清空后无需初始化）。</p><p>变量名重复。</p><h2 id="关于溢出（数值）"><a href="#关于溢出（数值）" class="headerlink" title="关于溢出（数值）"></a>关于溢出（数值）</h2><p>取模不及时常会导致数字溢出模数，或者忘加LL可能导致中间结果溢出int。</p><p>为防止溢出，最好处处取模，处处用LL（包括所有常数），这是一个ctrl+F/H的事，却能节省不少的没有必要的心思。</p><p>需要指出的是，处处取模只针对大多数情况，如果数字在指数上（如Polya定理的题目），则万不可取模。某些毒瘤出题人把模数取小后会这样坑人。</p><p>有些题目的中间结果可能溢出double，而又只涉及乘法运算，这种时候可以考虑取对数。</p><h2 id="关于溢出（内存）"><a href="#关于溢出（内存）" class="headerlink" title="关于溢出（内存）"></a>关于溢出（内存）</h2><p>把数组开到maxn不一定总是能防止runtime error，具体把数组开到多大，需要留个心眼。</p><p>把数组开到多大才能足够安全并且不会MLE呢？可以采用简单的费米估算：1e6大小的int数组所用空间约为4MB（另，1Mib≈1MB）。</p><p>FTT/NTT中数组必开到二的幂次+eps。</p><p>无向图连边时数组需开到maxn&lt;&lt;1。</p><h1 id="简单的结论"><a href="#简单的结论" class="headerlink" title="简单的结论"></a>简单的结论</h1><p>1.求$x \cdot (x-1) \geq y$的最小解，无需二分。只要检查$x = \lfloor \sqrt y \rfloor$是否满足即可。如不满足，则x++。</p><h1 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h1><p>1.ctrl+H可快速替换int为LL，%d为%lld，1为1LL。</p><p>2.ctrl+F在修改代码中的某类对象时可以指出这类对象都在哪出现过。</p><p>3.namespace中存板子可以降低程序的耦合度，提高程序员的效率。</p><p>4.python极其适合用来生成随机测试数据，图论题的数据除外。</p><h1 id="带东西"><a href="#带东西" class="headerlink" title="带东西"></a>带东西</h1><p>算法书要自己读过理解过，对里面的内容有结构性的认识带过来才派得上用场。<del>当然现场学算法也无不可</del></p><p>语法书在不让使用通讯工具的场合是必要的，比如JAVA的语法书，PYTHON的语法书。C中一些不常用库的语法也要记记，比如time.h等（带小册子也行打印稿也行）</p><p>数学书：数分、线代、概统、离散、数论、<del>图论、抽代</del></p><p>字典要带也带吧，虽然感觉并不能派上用场。（这些出题人怎么都这么骚，经常出阅读理解题，还有unidirectional可还行）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;杂项\cry指的不是不好归类的算法，而是一些简单的需要注意的事项。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机" scheme="https://nessoffice.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>【围炉夜话】历史档案：废弃项目&quot;whatolearn&quot;</title>
    <link href="https://nessoffice.github.io/2019/08/15/Project_History-Whatolearn/"/>
    <id>https://nessoffice.github.io/2019/08/15/Project_History-Whatolearn/</id>
    <published>2019-08-14T16:00:00.000Z</published>
    <updated>2019-08-16T15:33:54.479Z</updated>
    
    <content type="html"><![CDATA[<p>今天没什么想法继续这个项目了。</p><a id="more"></a><p>（目前看来，<a href="https://oi-wiki.org/" target="_blank" rel="noopener">OI Wiki</a>在很大程度上可以代替这个项目？我还要给它找准定位才可能继续下去……）</p><h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>大一下的生活略硬核（但我居然海在划水），涉及了我很多的知识盲区，尤其是web相关的开发知识，我很不是很懂，于是ACTF、设计课、MG比赛就都凉了（就算懂也救不回来，确信）。</p><p>这个设计课其实是比较浮夸的，什么专业的同学都有，他们什么点子都敢提（如果产品经理是这个样子的……突然担忧自己的未来），有的有意思有的没意思，反正我上课基本都在划水，没怎么听大家的展示。（说是设计，但workshop就前几节课有……后面全是作报告搞展示，差评，退化成PPT课了）</p><p>虽然这个课很浮夸跟技术很不搭嘎，但我还是想借着这门课学些东西的，不然太对不起自己了。学什么好呢？借着把大作业的项目做好的机会学一学相关的知识吧！这也是一开始的想法，但是，过了大半个学期都没决定好要做什么。一开学两周想这个想得头晕，想了两周突然想搞个人工智能·卡尔维诺，能续写《看不见的城市》，但是完全不知从何搞起，我也对它最终该如何也没有一个概念模型，于是就咕咕咕了。</p><p>但是助教和张sir还是要应付的，于是学长一开始提的方案就变成我们组的救命稻草了，虽然这个方案大家一直感觉它有什么地方不对，即便改了又改改了又改。虽然最后大作业就是这个方案的调整，但是这个方案实质上是不具有实现可能性的，它所需的技术与数据均于我们的能力范畴外，只是在设定”技术可能实现“的前提下的有一丝应付性质的课程作业，而非完整的项目。我对此并不满意。顺带一题，这个方案名”肴想“。</p><p>想不出好的方案就很烦，每过一节课，就离DDL更近了一周，而我们还一点想法都没有。某夜，我在空虚而毫无头绪完全不知道该想什么东西的时候想，为什么不能做个东西告诉我现在可以想什么，学什么呢。嗯，这个方案好像可以。回寝室把想法整理了一下，在草稿纸上就糊出了“whatolearn”的初代。</p><p>我对这个想法信心满满，感觉大家看到后肯定会赞同然后我们肝一肝就能出项目然后这门课就圆满了因为这个项目实现起来真的很简单，且有一定的实际价值。但是群里没一个人回我，什么消息也没有。cwy学长认为这个项目很不可行，而我说服不了他，争了若干周，还是谁也说服不了谁。我甚至不能把自己的想法说清楚，组员们似乎完全不能理解我的感受。我觉得闲得发慌的时候找点东西学很充实啊。比如现在我在准备暑假的集训，然后我得学些专题，学什么好呢？打开whatolearn，随便刷一刷，刷到“多项式”，嗯，好像一点也不会，那就点进去学吧。选个level 1，看到FFT，嗯，不会，那就去学吧。我觉得这样的项目很有价值，但他们完全get不到我的点，倒是问“为什么闲得没事会去学啊”“这里面有放具体的说明吗”“这和Google有什么区别”这类问题。我一点也回答不上来，就很尴尬，感觉人与人之间还是有代沟的。</p><p>这个项目自己做的话倒也可，可我太废了，想做到网站上但对web一窍不通，想做个app看那些配环境的教程都看得心烦，想写个微信小程序然而看着花花绿绿的界面走马观花了一下就开始自闭。再不济就拿qt糊个板子出来试试看效果吧，可这样又感觉跟实际用起来不一样，又不想做。总之whatolearn搁了好多好多周都没啥进展。我文档倒是写了一点，但也只是自己看得舒心，同学们一点也不理解，这就很打击。</p><p>之后不知怎么又想着拾起来了，然后开始做最容易的用户调研。问了问ljq，很意外，她了解完我的想法后觉得这个项目很棒。看到这句话很开心呀！之后问了问xn，他也很支持这个项目觉得挺有创意。还有蒋哥那句“很有ACMer的风格”的评价很凝练也很有趣。为了完善对照试验，找个非计院的同学测试一下。问了问zwk，他觉得不行。于是我归纳出，他们支持或否定这个项目一般是基于第一印象的。如果不支持，我磨破了嘴跟他们讲也没用，他们理由一堆接一堆的，我反驳不过来。既然如此，我就只给可能使用的同学做吧，把用户群体缩减一下。这样信心有了，我可以继续了？</p><p>事实并非如此……上面提到的探索是我在有一定信心之后才做的。但我的前置技能树太枯了导致学习曲线抖得不行。之前的话，因为没啥信心，就一直在摸鱼。（其实一开始是希望能利用好学长的，利用学长对项目的热情学习web学习db学习blablabla，但是完完全全的，失败啦）</p><p>虽然做不来，交流还是要交流的。因为之后要打ACTF了，就把文档里添上“仿CTF模式”这类关键词，然后cwy学长居然就理解了这个项目的要义……就理解了这个项目不是拿来放水题的是拿来放牛逼（？）板子题的，然后就跟我的思路对上了……虽然他还是不支持我在这门课上用这个项目作为作业，因为画风不一样。</p><p>总之，这个项目是咕了，有点辜负了ljq的期待呢……启示自然是有的：①要把web开发的前置技能点上；②要提升沟通能力，抓住关键点。等等“提升沟通能力”这话我tm讲了多少遍了……</p><p>第二点完全不知道该怎么办。第一点的话，大一下大二上的暑假里租了台服务器学了点皮毛然后上了个贼简单贼简单的项目，名字和whatolearn差不多，叫whatstoday，“今夕是何年”。话说whatolearen我根本找不出一个像样的中文名，太惭愧了……</p><p>如果您对whatolearn译为什么比较好有想法的话，欢迎联系我呀。特别地，如果您对自己的文学素养与语言能力有信心的话，也可以联系我哦（一直想找个文学顾问，不是正经的那种）。联系方式在这个网站上的某处，找隐藏信息非常好玩的呢……</p><p>下面是whatolearn的策划，之前写的，就不放历史版本了，只有最新版。</p><h1 id="whatolearn"><a href="#whatolearn" class="headerlink" title="whatolearn"></a>whatolearn</h1><h2 id="需求来源"><a href="#需求来源" class="headerlink" title="需求来源"></a>需求来源</h2><p>试想这样的场景：你在等车的时候，因为无聊而刷起了微信公众号、知乎、抖音，或者其他。一时你感到愉悦，但刷了一个小时后一阵空虚突然向你袭来，它告诉你你什么都没有干，正如你之前的每一个被娱乐统治的碎片化的时段中一样，而你的微积分还没有掌握，你线代课上的知识点也未曾听懂。</p><p>是否有可能我能够将这些碎片化的时间拿来摄入更有效的信息呢？比如我现在正在学多元函数的极值问题，我怎样摄入相关的知识呢？那空闲时间看纸书并不是现实的，更好的方式是对于一个自己还了解不深的知识点深挖下去，如果有人给我一个“理解拉格朗日乘数法”的任务，我就会通过搜索通过他人的优秀文章自学“拉格朗日乘数法”，而这是能通过手机完成的。（不同领域用手机自学的难度不一，如果任务换成“理解梅涅劳斯定理”，这就很不适合没有纸笔自学了；而数学分析学科用手机自学的难度要稍小一些。whatolearn只聚焦于碎片化时间自学小知识点的学科）</p><p>碎片化时间学习的关键不在知识点要怎么学——网上很多优秀文章都会对知识点有所介绍，关键在于“<strong>给自己任务</strong>”的意识，还有什么样的概念是需要了解的（<strong>学什么</strong>），还有“概念间的层级关系如何”（<strong>知识网络</strong>），以理解自己学到了哪里，还要学什么。</p><p>针对上述同学在空闲时间学习知识的需求，我们开发了这款whatolearn，它能以任务的形式（CTF模式）要求你了解相关的概念，就像老师布置给我们的项目要我们掌握相关知识一样（这用于激发用户搜索的意识）。任务分不同难度，以体现知识的层级关系（简易的知识网络，也包括了关键点）。</p><h2 id="调研背景"><a href="#调研背景" class="headerlink" title="调研背景"></a>调研背景</h2><ul><li>当下答题app的社交化而非学习化倾向</li><li>大学生碎片化时间的浪费</li></ul><h2 id="主要针对的人群"><a href="#主要针对的人群" class="headerlink" title="主要针对的人群"></a>主要针对的人群</h2><ul><li>计算机专业的学生（在思维上或许更容易接受这样的模式）</li></ul><h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><ul><li>给予碎片化的时间以学习思考的可能（重视的是学习思考，而非刷题）</li><li>提升自学能力，培养全面的思维思维框架</li></ul><h2 id="设想的功能"><a href="#设想的功能" class="headerlink" title="设想的功能"></a>设想的功能</h2><p>比如，大一的你正在学习分治算法，你想在等车的时候了解一下里面的更多模型。</p><p>于是你打开了whatolearn，设置标签为“计算机-算法-分治”，难度为“level 1”，app中的任务显示为“掌握merge sort”。</p><p>你认为这个问题过于简单，于是你跳到了“level 2”，app中的任务显示为“掌握closest pair of points problem”。</p><p>你发现你还不知道这个问题，于是点了“接受”。通过两小时的自学，你掌握了这个算法。</p><p>在点了“完成”后又切换到了另一题，“掌握fast fourier transform”，这个问题的标签还写着“多项式”。</p><p>在完成之后，你跳到了下个level……</p><p>你发掘这里面的问题太少了，不够刷，于是你post了一个新问题：“掌握strassen矩阵乘法”，在数日之内，管理员将决定这个问题是否会添加，它属于哪个等级……</p><p>①测试阶段大标签暂时只有“数学”“算法”“信息安全”，下会设小标签</p><p>②本身是“学习+游戏”的定位，通过游戏（CTF模式）的方式增强用户黏性（成就系统等）</p><p>③项目本身在技术上应容易实现，主要成本应为维护成本，另题目的设置仍有待商榷</p><p>以下是题目的示例：</p><p><img src="/2019/08/15/Project_History-Whatolearn/examples.jpg" alt></p><hr><p>写于2019-08-15</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天没什么想法继续这个项目了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="生活" scheme="https://nessoffice.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>【通天之塔】游戏设计2：记《-4级战斗游戏》，及部分相关回忆</title>
    <link href="https://nessoffice.github.io/2019/08/08/Project-Simple_Simple_Battle/"/>
    <id>https://nessoffice.github.io/2019/08/08/Project-Simple_Simple_Battle/</id>
    <published>2019-08-07T16:00:00.000Z</published>
    <updated>2019-08-08T08:03:17.807Z</updated>
    
    <content type="html"><![CDATA[<p>无忧无虑（？）的高一生活……</p><a id="more"></a><p>无忧无虑（？）的高一生活……</p><p>项目地址：<a href="https://github.com/NessOffice/Game-Simple_Simple_Battle" target="_blank" rel="noopener">https://github.com/NessOffice/Game-Simple_Simple_Battle</a> 。虽然我觉得游戏性还是有的，但这毕竟有些黑历史的性质，我也懒得再改了……大哥们不要嘲讽鸭。</p><h1 id="回忆"><a href="#回忆" class="headerlink" title="回忆"></a>回忆</h1><p>时间约莫是高一下，此时<em>Hit The Boss</em>的demo已经出来了，虽然还在更新。在贴吧里看到了一篇用易语言写的“简易战斗游戏”，感觉还挺好玩的，简陋但不粗糙。只是这个“简易战斗游戏”流程太短了，一两分钟玩完有些不过瘾，想着自己拿VB也复刻一个试试，于是这个游戏便诞生了。</p><p>（今天那篇帖子已经看不到了。百度，说你什么好。好好的历史资料就这样被烧了？）</p><p>一开始游戏里怪物的名字还都是dungeon风格的，这个风格是之后改的，感觉这个样子更好玩更欢乐些（本来沙雕小游戏就应该这么有意思的嘛），虽然并不是很统一。</p><p>（欢乐吗……里面涉及到的人都已经好聚好散了，虽说之前也没什么交集，也只是用个名字而已）</p><p>（小孩子还真是一点不懂信息安全呀……不过，毕竟，已经，是历史了）</p><p>改名好像是在高二吧。那时候和蒋哥策划搞个沙雕卡牌游戏《火箭杀》。结果人家自己飞了，弄了个游戏模式与此相近的，还发布到抄作业大队里，强烈谴责。虽然蒋哥的游戏甚为粗糙（看不惯把一大堆网上搞来的风格不一的图凑一起，配上宋体，这种中老年审美），但把班里的人按某个排序作为boss这种做法还是值得借鉴的，于是就改名了……如此一来游戏的娱乐性略有增加，只是对外人而言仍一样罢了……</p><p>（之前在物理办公室玩《-4》的时候把VIP副本调了出来，然后和蒋哥抢鼠标的过程中把电源搞了……那是我们最后一次待那个物理办公室，不是因为翻车，只是到了，下一年了）</p><p>为什么叫“-4级战斗游戏”呢？随便取的，真的。（按我在高一上的风格，应该会取名《中环制霸录》）只是好像没什么人会这样瞎取名，所以好记。英文名叫“SimpleSimpleBattle”，倒是可能重名。顺带一提，“NessOffice”也是瞎取的名字，因为“Ness”太短了做不了用户名。</p><p>文件夹里的窗体叫“form18“（感人的起名方式），因为这本来是<em>Hit The Boss</em>内部的一个子游戏，然后越做越大，不适合做子游戏，就独立出来了。这篇随笔名《游戏设计2：……》，也是因为<em>Hit The Boss</em>是我的第一个作品（《魔·龟兔赛跑》不算），也差不多简陋，但也挺有意思（私以为），只是那个不完整的程度实在太高了，就不能作为项目发布了。也没心思改了。何况今天，我也不接触idle game，或是anti-idle game了。</p><p>整个游戏写了多久，已经完全没印象了。今天回头审视，自己以前真的什么也没做，什么也没学，什么都不会。代码中冗余遍地，变量名感人，等等。虽然什么也不会，虽然只是把基本的操作垒在一起，但还是好快乐的。想到一个新点子的时候会很激动，巴不得马上就能更新出来。写完之后虽说好累，但看着有个成果还是会好高兴好高兴。创造的，乐趣啊，与能力无关。</p><h1 id="游戏性"><a href="#游戏性" class="headerlink" title="游戏性"></a>游戏性</h1><p>游戏的生命周期大致是10-20分钟。游戏没有目标，可以把完成所有任务当成游戏的最终目标。但私以为探索所有可探索的元素才是游戏的目标。</p><p>（笔者一开始就去挑战VIP副本然后5分钟通了关……不过这样子意思不是很大）</p><p>游戏有12+2个副本，每个副本都是完全没有特点的只能在名字上加以区分的怪物（哦VIP副本的boss是有特点的，还有某个怪物也挺有特点），每个怪物有生命、攻击、一般掉落（exp、钱）、特殊掉落。这些怪物看上去都差不多，打多了很无聊的，所以得控制怪物的数目。12个基础副本还是有些多了（特殊怪物倒是不嫌多的），所以得在掉落，还有任务上做文章。</p><p>这个游戏里经验就是换钱的，钱归根究底都是拿来增强战斗属性：生命与攻击。（既然要简陋，那就简陋到底吧）对等级的忽视似乎值得诟病，这本应拿来和玩家当前可选操作挂钩，用来提升游戏性的。原版升级也是换钱，我也没啥创新，这很不行呀。</p><p>虽然等级设定地很鸡肋，但是熔炼等级的设定还是有意思的。熔炼系统虽内容不多，但在提升游戏的乐趣上还是功不可没的。（各位疯狂买熔炼石的时候想必也会这么想对吧）</p><p>修炼系统是从原版游戏里复制（chao）过来的，我一般都不怎么用。也就前期有用一点了，如要鼓励玩家修炼的话应该放到任务里来着，这样玩家在第一遍”wtf“之后第二遍就会有动力修炼了。</p><p>商店中有的商品设置地有些鸡肋？我似乎从没买过10生命……能打小潘一般就能买70的那个了，这性价比实在太低了。或许我应该给70金币区一个等级限制？似乎可……</p><p>战斗的话，就是标准的回合制了，双方无技能，就你抡一拳我回一腿，这样的神仙打架。原版生命药也是打架前用的，于是它就变成70金币区换生命的替代品了……这样战斗也退化为无脑点点点了。（不然就是嗑药点点点了，可只有一种药可以嗑有啥意义呢）</p><p>VIP区本来没想好要什么副本，抽奖搞什么的。看到某人那么跳就（笑）。如果高三还有写的话，AL等应该也会放上去的吧。抽奖虽然是后面才加进去的，此时我也江郎才尽不知道怎么抽奖有意思，但它的性价比还是高的。</p><p>武器系统都是个人的创意，毕竟游戏小流程短，弄一堆白板武器也没意思。金币刀刷钱汲血刃刷血（开出这个武器血就不用愁了，此时也应该到游戏的晚期了吧）。火箭筒做任务能拿来用用（不要用它打某个怪……）。钢管是白板武器，不过好用呀，一力降十会。复仇拳套的设定挺好玩的，用失败来刷攻击。事实上我是先设计出复仇拳套再设计出汲血刃的，但没有给后者加个上限……武器的信息在frm文件里都能看。有些很羞耻的话看到就不要念出来了……</p><p>任务的设定也多是个人的创意。原版的任务很少，基本只有打怪，这里改了一下，让任务帮助玩家熟悉操作。如果玩家之前没有修炼过，第二个任务完成后应该会自觉去修炼。然后熔炼出五级装备的任务提醒了玩家现在熔炼系统更新了，比直接提示要有趣，个人认为。这些创意化的引导，或许是这一游戏的生命所在吧。</p><p>游戏的平衡性不知如何，各个副本是否有足够的区分度呢？不知道。打出一些BT武器后真的只要无脑刷就好了……都不用考虑怎么刷来得快怎么刷刷得舒服。这固然也有一些乐趣，但也相应地降低了决策的乐趣，有好有坏，只能这么说吧。</p><p>游戏当然是还能再更新的，原来空的成就系统可以扔进去很多东西，修炼也要弄得更加有趣些而不能只是机械地让玩家点。熔炼系统效果不错可以扩大，这样副本的规模也能随之扩大（不一定是更多的副本，而是单个副本的强化，诸如此类）。平衡性还可以再调整调整，隐藏的怪物还可以增加，怪物的特殊性也要体现出来……</p><p>但这些口胡，也只能是口胡了。回不去了。</p><hr><p>开始于2019-08-08</p><p>完稿于2019-08-08</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;无忧无虑（？）的高一生活……&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件工程" scheme="https://nessoffice.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="设计" scheme="https://nessoffice.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="游戏" scheme="https://nessoffice.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>【通天之塔】记tetris的开发，借之略谈工程设计及管理的部分范式</title>
    <link href="https://nessoffice.github.io/2019/08/07/Project-Tetris/"/>
    <id>https://nessoffice.github.io/2019/08/07/Project-Tetris/</id>
    <published>2019-08-06T16:00:01.000Z</published>
    <updated>2019-08-07T02:39:33.186Z</updated>
    
    <content type="html"><![CDATA[<p>切身体验，何谓人月神话。同时享受，心态雪崩的感觉……</p><p>（更新于2019-08-07）</p><a id="more"></a><h1 id="tetris的开发"><a href="#tetris的开发" class="headerlink" title="tetris的开发"></a>tetris的开发</h1><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>整个过程中并非徒劳无功的，我收获了什么呢？友情，一些较软的能力，经验教训。只是在程序设计能力上的收获，简直是负的……或者说我原来的能力就是负的吧。这是个简单的项目，但我在管理上的失误，把简单搞得无比复杂。</p><p>C大程的大作业，有四个选题：学生信息管理系统、CAD、俄罗斯方块、自主选题。搞模拟题搞烦了，不想弄第一个；没玩过CAD，第二个也不成；对要玩什么没啥想法，自主选题估计选个题就能憋死。这样看来只有俄罗斯方块能搞了。虽然我不太喜欢玩俄罗斯方块，但也只能选这个啦。俄罗斯方块，有什么可以创新的地方呢……（谈到俄罗斯方块，谈到创新，总会想到《伊莉丝症候群(<em>irisu syndrome</em>)》，想到这个兔子和猫的故事……不过这里头的玩法是和剧情相关联的，和俄罗斯方块还有些差别，但我对剧情根本没有想法呀）</p><p>先不管这些，直接动手做吧。</p><h2 id="进展"><a href="#进展" class="headerlink" title="进展"></a>进展</h2><p>这个项目的进展……非常迷。题目布置得特别早，故项目的工时很长。</p><p>一开始的两三周先是研究这个libgraphics。通过demo看看它是如何运作的，学习回调函数的用法，学习基本的绘图套路。这个时候的心态尚不是很好。因为这些东西跟环境也有关联。明明知道这个东西这么写是对的，可为何就运行不起来呢？总归是某个小地方出了问题，但就是不知是哪里的问题，就很烦。搞前端的时候也经常碰到这样的问题，trivial，麻烦。</p><p>知道了库该怎么用，接下来该是游戏的设计阶段了（需求理解的部分被跳了）。我的想法是先搞下落、消行这些东西，再来搞tetris的类型，旋转啊那些。于是先把所有tetris简化为1*1的方块。下落便是改变中心点的位置，消行便是检测单行的block数。这些现在看来非常容易实现，但写的时候想法很多，一会感觉可以这么写，写着写着感觉那样会更好，就经常重构代码，一会儿换成这种风格，一会儿又是那种风格。重构一时爽，但重构完后就会发现自己啥也没干，就会开始怀疑自己。这是很不好的。探索固然有趣，但要有规划的探索，那样应该更为有趣且更有收获吧。</p><p>上面那些写好，又过了若干周，感觉可以开始设计tetris的结构了。怎么设计呢？考虑邻接矩阵吧。设个数组存邻接点的个数，再设两个数组存邻接点的坐标。好，那先弄个“田”出来吧，这一搞发现出了好多问题……比如在边界上的处理。等等。这些解决方案也是一点一点试出来的，主要是细节没搞清楚，我好像也没仔细记录。</p><p>后面的思路好像比较乱了？每次都不知道自己在搞什么，就东搞搞西搞搞，时间就搞过去了。这或许是需求理解和进度规划上的不明确导致的。</p><p>另外，整个项目没有一气呵成的感觉，往往是干个两三天，停个十几天，再来干两三天。然后中间把锅分出去之后就收不回来了，直到快交作业那星期进度才开始提上来。此时我的psycho-pass陡增。看着屏幕上的代码，时常会感到一阵，持久的，沉重的，虚无。</p><h2 id="亮点"><a href="#亮点" class="headerlink" title="亮点"></a>亮点</h2><p>我不喜欢仅完成老师给的要求，这样显得我很没水平。创新自然是要创新的，关键在于让自己满意，而不是恶竞。我相信我的想法并不是每个人都能想到的，故而我的创意还是有创意的。</p><p>本次的创新点主要有以下三个：技能，计分方式，tetris的种类。</p><p>技能我设计了三个技能，本来是有四个的：①定色爆破，爆破屏幕上所有同色的方块；②变幻之术，将当前tetris的type转化为single；③冰封之术，降低tetris下落的速度；<del>④定域爆破，爆破当前tetris邻近的方块。</del>（好吧，下次写游戏一定要找个文学顾问，技能名字不对称好难受）</p><p>定色爆破的效果一般比较迷，会把方块搞得支离破碎的。变幻之术用得比较多，也很方便。冰封术我都没怎么用，level 5的时候救场效果也不是很好。</p><p>计分方式的话，我不太喜欢整数，喜欢带些小量，比较独特的分数，但一般这类“休闲游戏”不会考虑这种问题（<em>irisu syndrome</em>不是休闲游戏，它的亮点不在这里），我只能自己想想如何创新啦。想了不知多久，搞出来个这样的方案，感觉挺优雅的。（虽然得分还是容易重复，尤其是单行的情况下）</p><p><img src="/2019/08/07/Project-Tetris/scoring_scheme.jpg" alt></p><p>然后是tetris的种类，十字型，X型（不可变幻），还应该有更多类型的，但是我懒得做啦，就这样。</p><p>下面是鸽掉的内容：冒险模式（15关，每关胜利条件不一，有坚持时间/分数/时间+分数/特殊条件，有些关无法旋转，有些关tetris的类型会有限定）、疯狂模式（zyls的创意，自己选tetris但是不能重，好像大致这样）、沙盒模式（让玩家自行设计tetris的种类，及其他参数）、地形（永恒之方块，生长之方块）、加密……如果加上去，游戏应该会很有趣的（？），我也讲不好。</p><p>互评的时候还碰到了其他同学做的tetris，发现了他们的一些创新点。我并没有往这些个方向上思考，而这些点子还是值得记录的：上升行，限时模式。</p><p>zc他们搞了个双人模式，然后暂停的时候还有特效，不过我对其兴趣不是很大。</p><h1 id="需要提升的能力"><a href="#需要提升的能力" class="headerlink" title="需要提升的能力"></a>需要提升的能力</h1><h2 id="个人层面的管理"><a href="#个人层面的管理" class="headerlink" title="个人层面的管理"></a>个人层面的管理</h2><p>首先是心态的管理。一方面是要有信念，对自己的信心，对别人的信心，对emergency的解决方案的信心。同时，需要有足够的管理能力提高对项目的把控能力以支撑信念。以下，是此次项目中没能表现出来的能力。</p><p>组织思路与组织代码。不需要很详细的文档，可以是函数调用关系图，可以是对一个功能在实现前的规划草稿，还有把类似功能的函数集中到一块。在开始想好方案不要改，或者事后再重构。封装常用功能。通过肉眼查重降低冗余度。保留档案。</p><p>文件管理。把不同类型的文件搞到不同的文件夹里面，保持树状结构。文件名规范化（”tetris-ln-190616-2117”），并维护更新信息。</p><p>预设测试情形，想好有哪些功能是需要测试的。每拿到一个新的不同版本的文件测试并做标记（“ranklist——符合预期”，“editbox——异常退出”）。</p><h2 id="ui设计中的管理"><a href="#ui设计中的管理" class="headerlink" title="ui设计中的管理"></a>ui设计中的管理</h2><p>（好吧这个标题和上面的标题下面的标题都不对应，不过这个东西有必要讲讲的）</p><p>ui的设计是所见即所得的，能够给予开发者一定的成就感，但也容易利用这成就感极大地耗散开发者的时间与精力，降低其效率。故ui的设计虽然好玩，但也不能仅仅抱着玩的心态看待，它也是需要分析的。</p><p>怎么分析呢？可以先明确一下一个小的阶段中要达成的效果：设计出ranklist的实现样式。这需要先搞出一个原型，提炼出需要使用的控件，确定好控件的颜色，确定好背景，等等。有了原型，设计的时候能更有针对性，而不是这搞搞那搞搞。</p><p>放置控件时我们也经常会想“欸这个放在这里是不是更好看”“欸这个拉长一点会怎么样”。这些常常会在占去大量的时间，但最终效果相差无几。修参的工作最好集中出一块时间来做，同时在这过程中要保证有效的调试手段，如键入位置信息、颜色信息等，而不能总是关闭-重运行。</p><h2 id="沟通与团队协作"><a href="#沟通与团队协作" class="headerlink" title="沟通与团队协作"></a>沟通与团队协作</h2><p>个人观察发现，三人小组往往会退化为两人小组或是一人小组，尤其在组员间相互不是很熟的情况瞎，因为团队的凝聚力不总是很高。作业做着做着有时候就感觉累了，宁愿自己做也不想把任务分出去，或是对这个项目不上心就把它鸽了。但在tetris这个项目中，团队的凝聚力还是较高的，个人认为原因在于组员间有一定的了解，能够相互理解与体谅，所以退化并没有发生。（如果我前几个星期不是特别忙也对tetris特别感兴趣的话，也许io、加密、ui还有其他部分我都揽过去了？这样项目的结束可能会早一些，但也只会像我高中时候的其他作品一样吧，其间我无法收获管理等其他方面的教训。然后我和她们也不会有更多的交集了，应该。）</p><p>一个团队是否总会发生马太效应？能者往往多劳，故强者愈强，弱者愈弱。“弱者愈弱”指的并非在能力上发生倒退，而是指的不受待见的沮丧，对自身能力的怀疑，这么一种心态。这在计算机学科的学习中是非常危险的，因为实际上，许多课程并不难，需要的更多是信心而非能力。个人常秉持这样的观念：别人的东西看不懂，主要原因不是我太弱（这种话该事后说），而是对方写得不够清晰。变量名混乱，代码冗余度高，逻辑清奇（尤其这一点！）都是对方而非自身的过错。我已尽自身一部分所能梳理清楚其逻辑但仍对其总体架构抑或细节实现不甚明了，这反映了对方在对程序的运行逻辑的理解上也不够清晰（至少没有表现出来），故我当见不贤而内自省。</p><p>当然……问题也不尽是别人的问题，很多也是自己的问题。只会写hello world然后被lisp系的语法绕晕难道总是语言设计者的过错？在连最基本的图遍历算法都没写过的情况下看不懂人家的tarjan算法难道应该怪对方的代码不友好？这些问题，确实是自身能力不足所造成的，故我们在骂街之余当积极寻求解决方案。这个过程中尤其要注意解决方案面向的对象。在赛场上可以不加注释，但写题解时还应将各个细节点得清楚明白而不是把AC的代码往上一扔。要读懂这段代码需要什么样的前导知识，这些，我认为都是必要的，是将零散的知识点串成一环的有益疏理，也为对这一知识点尚不熟悉的同学提供了学习的方向。但遗憾的是，至少我很少看见这样的尝试，而与之相悖的做法（扔代码，玄学证明）倒是数见不鲜。</p><p>以上的情形更多发生在个人中，与团队中的情形略有不同。团队降低了沟通的成本（在网上发问，指不定有人会理你），但并没有降低沟通的难度（“你在说什么？”）。在这样的情况下，简单的沟通能够传递一些好的习惯，同时解决一些琐碎的问题；而更深入的沟通呢？至少还没想清楚……这或许还需要在长期的实践中思考才好得出一般性的方法论。</p><p>团队协作无可避免地涉及到交易成本——在软件工程中，集中表现为沟通的成本，理解代码的成本，等等。看自己的代码交易成本往往是比较低的，因为潜意识中对一些细节大脑已经做好了思考，整个程序的脉络也往往较为清晰。但是如果过了几个月，代码逻辑比较复杂还没什么注释，那么看自己的代码交易成本可能就上来了。至于看他人的代码，一般也都要付出高额的交易成本——时间、精力、信心。</p><p>那么如何降低交易成本呢？我们注意到，项目的一部分的代码是整体性的，是许多点连成的面，很稠密，复杂度很高。虽然理解整个面或许较为困难，但是理解一些要点相对来说会简单一些。（CTF一般都是找关键点，在复杂的题目中）于是可以提取关键点，抓住主要矛盾，逐个击破，同时准备好打持久战的意识，可能会有一些帮助。</p><h2 id="Leadership"><a href="#Leadership" class="headerlink" title="Leadership"></a>Leadership</h2><p>（我可能不具有这个东西，但理应具有这个东西）</p><p>一般而言，组长对项目的把控等级是最高的，ta决定项目宏观的方向，整体的架构。这些尚是个人层面的。在团队的层面，协调就麻烦了……</p><p>要分工，需要要了解他人的相性，了解其所面临的问题，了解其心理状态。这些都不容易做到。机器式的监督只会降低团队的凝聚力，但深入的了解也并不容易，这需要机遇，需要耐心，等等。</p><p>可能还是solo比较容易吧？</p><p>但把有着坚韧意志的厉害的女孩子一直置于对项目的焦虑与对自我的否定中，这实在不应该吧。</p><p>于是我只能随性地瞎指挥了。结果尚可，只是本来能更好。</p><hr><p>开始于2019-06-07</p><p>完稿于2019-06-16</p><p>更新于2019-08-06，添加了“亮点”的部分</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;切身体验，何谓人月神话。同时享受，心态雪崩的感觉……&lt;/p&gt;
&lt;p&gt;（更新于2019-08-07）&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件工程" scheme="https://nessoffice.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【通天之塔】游戏设计5：记《门神眷顾》，及开发过程的的心路历程</title>
    <link href="https://nessoffice.github.io/2019/08/07/Project-MenShenJuanGu/"/>
    <id>https://nessoffice.github.io/2019/08/07/Project-MenShenJuanGu/</id>
    <published>2019-08-06T16:00:00.000Z</published>
    <updated>2019-08-07T02:43:55.776Z</updated>
    
    <content type="html"><![CDATA[<p>三年前与三年后。</p><a id="more"></a><p>三年前与三年后。</p><h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>今年五月到六月，因为某个原因和蒋哥一起开发了个小游戏。虽然比较粗糙，也没有取得什么，但不管怎么说也是心头肉呀……我比较没用，前期因为ACTF在划水，后期因为ICPC在划水，中间信心满满地接过蒋哥扔过来的锅，但打开sublime就陷入了看着代码痛苦不堪地“这是啥呀”“天哪这代码怎么这么乱”的死循环，这就比较累。其实自己没有写多少（程序上只是完成甲方的要求，话说哪有这么靠谱的甲方……游戏的平衡性和测试上也没有做太多工作。音乐放了等于没放。io又鸽了，话说我是讨厌io吗……写文档做PPT……），辛勤耕耘的都是蒋哥。虽然结果尚可（我觉得这作为一个游戏还是有可玩性与创新点的，虽然小瑕疵有些多……），但这样劳累的过程实在是不应该，而应该是happy coding的。那么问题出在哪里呢？在探讨之前，还是先来看一看这块心头肉。</p><p>（总算有一个不是以组长的身份参加的项目了……虽然我还是名义上的组长。为啥我总是组长啊orz还总是很糟糕的那种组长。）</p><h1 id="《门神眷顾》日后谈"><a href="#《门神眷顾》日后谈" class="headerlink" title="《门神眷顾》日后谈"></a>《门神眷顾》日后谈</h1><p>一开始的题目是“和门相关的游戏”（<del>暴露了呢</del>），然后我们觉得和传统文化挂钩比较好，就先独立地策划游戏策划了若干天。我的想法呢，是这个门，要大气，要恢弘，应该是“Gate”，整个部落的守护之门，而不能是“door”这种。既然如此，那么时间就得拨到部落时代，游戏得是生存向的。玩家是gate中的神灵，白天作为部落的一员参与活动，晚上作为神守护部落。这样玩家既是见证者，又是守护者，但不是决策者（部落首领）。游戏是rougelike性质的：有经济生活，政治生活，有军事要素，科技水平随部落规模不断提升后会出现更多要素……因为我不会画画所以游戏画面就走<em>dwarf fortress</em>这种风格好了，越简陋越好，以此作为卖点，突出游戏性。游戏的主题也能在这个设定下往高大里走：“反映整个部落乃至全世界中人类的不屈斗志与乐观精神”“门之守护神的守护即人类的自我守护；它也使向往安宁的人们汇聚在一起，构建出社会的原型；它还象征着人们对美好生活的憧憬与希冀。”……就叫它《巢湖志》吧。故事，发生在有巢氏所领导的部落……</p><p>然后蒋哥跟我说，要求里面有“致力于中国传统文化在游戏中的传承与创意呈现”。然后我就“嗯……”。如果坚持这个方案的话主导权就在我了，而我现在都很忙，对《巢湖志》在细节上当如何设计还不是很清楚，而蒋哥似乎颇有想法的样子，所以就决定改策划给蒋哥打工了……</p><p>（中国传统文化？Freud Gate体现了哪门子的传统文化啊怎么大家都在关心抑郁症患者啊这跟中华传统文化有个球的关系啊）</p><p>蒋哥设计游戏是以《金庸群侠传》为原型的（疑似），而我压根没接触过这个……于是策划全权交给蒋哥了，伴随着leadership。</p><p>蒋哥的《门神眷顾》是strategy game，钓鱼/砍柴-&gt;买门神-&gt;斗夜魔-&gt;钓鱼/砍柴，游戏模式就是这样，很简单，但挺好玩。游戏特色啥的全部写在游戏说明文件里，这里就不放了，这里毕竟是日后谈呀，该谈些没有写出来的东西……</p><p>一开始游戏的画风并没有确定，我想的是简约风（我也只会简约风了hhh），花13笔画了个“関聖帝”，蒋哥感觉不可，想试试Q版画风。虽然我一向不大喜欢Q版风格（国内很多辣鸡游戏都这种风格，不喜），但看到蒋哥画出的第一张“神荼郁垒”感觉还是好萌的，很可。于是之后蒋哥就进入了肝画的境界……咱也没体验过，咱也不知道什么样。</p><p>噢，说到游戏文件，我把它托管在github上：<a href="https://github.com/NessOffice/Game-MenShenJuanGu" target="_blank" rel="noopener">门神眷顾</a>。游戏的<a href="https://nessoffice.github.io/Game-MenShenJuanGu/">链接</a>也在里面。</p><h1 id="问题1-初始的游戏策划"><a href="#问题1-初始的游戏策划" class="headerlink" title="问题1.初始的游戏策划"></a>问题1.初始的游戏策划</h1><p>一开始蒋哥把大框架给了我，也就是游戏有哪些form，主界面是怎样的。不过看完这个框架后我还是一脸茫然并不知道蒋哥想要怎么设计，不知道这个village放在这是干嘛用的，不知道这个fish的模式是如何的，啥也不知道。直到蒋哥把魔物的属性发给我让我写Monster.js，我才猛地发现这游戏的游戏模式就这么简单……</p><p>设计课上提到，“原型设计”是设计中的一个关键步骤（真要说起来，没有哪个步骤不关键，嗯）。原型设计不仅表现在设计师对产品须具有初步的全局性的认识上，还表现在设计师同设计师，设计师同用户的交流上。</p><p>前者大家都明白，但后者不亲身经历并不好理解，尤其是设计师同设计师之间的交流。如果是两三个人的小作坊，大家对彼此的想法能很快理解，对于一个模型能够快速达成共识，这就几乎不存在交易成本，合作的效率也能比较高。</p><p>但如果人变多了，或者相互不能很快理解对方的想法，此时有效进行原型设计就比较重要了（要不然得用f(n)次研讨会替代，还不是等价的替代……），因为它能够让一方的想法能够快速被大家接受，以此提升合作的效率，同时避免错误理解造成的“走弯路”。原型设计的方法有很多，糊个交互界面出来固然是一种方法，但这个交互界面也不能过于简陋，必要的说明应当加上。不过个人更倾向于以故事板的方式呈现游戏的原型。</p><p>在这一次的游戏策划中，蒋哥有设计游戏的原型，但其保真度过低，缺乏说明，连基本的游戏模式都不能让别人领会。这样的原型无疑是失败的。而没有即时指出它的失败而是选择摸鱼的我也相当失败。第一步选择摸鱼，往往在后面因为信息不对称也补不回来，只能摸鱼了。所以这第一步得走好呀。一是摸鱼可耻，二是沟通技巧需要加强（不光是通过自然语言沟通，用原型沟通也是沟通）。</p><p>（谈起游戏策划，回想起以前和蒋哥口胡游戏的某几个中午，两支笔，一张草稿，两张嘴，一个主题。一个中午就这么过去，一个游戏，从大纲到细目，就全部清晰了。虽然还有很多要糊的dlc还没糊出来。有点累，因为没睡午觉，太过兴奋以至于头脑发胀，但还是兴奋地回不过神来，脑袋里一直盘旋着这个还没出生的游戏，想象着它这里这么做会更好，那里也能加点料，还有……真好啊，这样的感觉）</p><h1 id="问题2-交易成本"><a href="#问题2-交易成本" class="headerlink" title="问题2.交易成本"></a>问题2.交易成本</h1><p>策划已经确定，那么接下来就可以码代码了。在一番协商之后，我和蒋哥决定了合作的模式：</p><p>1）最新的代码（以日期区分版本）只能在一个人手里；</p><p>2）双方轮流更新，一方工作时另一方休息或处理其他工作（如绘图、搞音乐、学习要实现某一功能的相关知识等）；</p><p>3）维护log并每次在其中声明自己在本次更新中的done，to-do，对方的to-do。</p><p>这样的模式是较为高效的，它保证了版本清晰不会出现混乱（虽然最后还是挺混乱的，同一个名字下的“门神眷顾1.0.0”被传了好几遍，不过那个阶段已经不用写代码了）。但这样的模式的问题在于它仅适用于两人小组间的合作，而若要移植到三人小组上，就要做一些额外的工作，组员在更新之前需要声明自己要更新哪些内容，和其他同学的工作会不会产生冲突，并在各方均完成任务后由组长集成组员的更新。不然，版本一旦产生混乱，整个工程的进展也会被搅和地乱七八糟。MenShenJuanGu这一项目和Tetris这一项目是同时进展的，合作的模式大抵相同，但前者在版本管理上做得较好，而后者的版本管理在后期陷入严重的混乱。（zyls的RankList和ljq的StartMenu同时进展，她们把代码发给我，我不知道她们更新的代码基于哪个旧版本，也不知道她们彼此交流地如何，只能手动fc手动整合，也算是一种补救措施了，虽然这样比较累）</p><p>但模式的高效并不意味着实际操作的高效。蒋哥每次把代码发给我，我都得先略读一遍他的更新，以找出自己完成to-do所需要与之关联的变量、函数等。起初我还想着要重构蒋哥的代码的，但这实在太耗费时间耗费精力却不带来多少成就感，只得自降要求，只完成蒋哥给的to-do了。</p><p>即便如此，工作也并不轻松，一开始的困难显然是阅读蒋哥的代码，这个过程……一言难尽。</p><p>不得不承认，蒋哥代码的冗余度相当高。比如声明一个按钮，每次都得六行，中间一堆相似的变量名。这一做法的罪恶不仅在增加代码的冗余度，使本当精简的代码变得肥硕而丑陋。更罪恶的是，它使得代码更难分析更难找出要点了。F3变量名的跟踪效果变差了，因为要按F3的次数基本都乘上了个6，虽然听起来没什么，但是谁试谁知道，这到底有多难受……</p><p>代码中的冗余当然不止这一个地方。场景转换时的addEventListener/removeEventListener，一个文件存天下的模式，等等。这些有的解决了，有的没有解决，但总之都让分析代码的复杂度提高了若干个层级。</p><p>相对于对代码逻辑的理解，冗余还是小问题。接过一个涨了若干KB的文件，看到一大推完全不认识的新函数新变量，还要理清楚它们之间的关联，以开始自己的工作，这想想就可怕。更何况这些代码并不友好，没有显示函数调用关系的流程图，没有说明函数功能的注释。所有这些，都使得分析代码的工作痛苦非常。</p><p>写好注释，说明大框架下的小框架，讲明白函数的内容，这是对coder的要求。而对于analyst，也不能对着代码就这么看，还是要拿起纸拿起笔，梳理清楚代码的逻辑的，如果这个逻辑比较复杂。事实上蒋哥的代码并不复杂，静下心来就能看懂，但我的状态实在是太差了。后期蒋哥疯狂提醒我没时间了得肝肝Monster.js的部分，但我一直都不在状态。倒数第二天随便写写，也就写完了。不在状态的原因，一来是心理状态不佳（可能这个学期就没好过），二来是对代码逻辑缺乏认同吧。</p><p>我看蒋哥的代码看得挺难受，但想想如果自己是他的话写下这些代码的时候相比是充满激情有一定成就感的，而没有太管他人在阅读这样的代码时候是如何感受的……想到这里感觉有些愧疚（tetris一来就写了50%，只顾自己写得爽，没有考虑到她们在之后接锅时候的感受），就问了问ljq“我的代码冗余度是不是很高”“看我的代码的时候有没有很难受”。并没有得到有效的信息，反而让人家感叹“我太菜了”……明明应该是我的问题，你们要指出的呀。</p><h1 id="问题3-心理状态"><a href="#问题3-心理状态" class="headerlink" title="问题3.心理状态"></a>问题3.心理状态</h1><p>正反馈过少。这是在玩js时不太可能出现的一个问题，但它毕竟还是出现了。</p><p>为何会如此呢？首先是读蒋哥的代码读得很累，然后就不想读了，也不想完成任务。想摸鱼，可又想到有其他项目在身：whatolearn（我好棒哟，又咕咕咕了呢），史纲论文，物理考试，对微积分的理解，英语六级，打CF并写题解……其实这些都不算难，虽说有的可能比较烦。但没有祭出对它们在战略上的轻蔑就会导致心态很崩，感觉自己什么都做不好，什么都不想做，又水，又咸，就会很难过。写游戏应该是快乐的事情，解压的事情，但也加入了“锅”的行列，扩大了它们作为一个整体对我的影响，这很不应该呀。</p><p>这一学期的状态差得可怕，原因何在呢？我对事物的认识似乎发生了一些错位。不应该天天觉得自己很菜什么都做不成因为这种状态本身就很糟糕，没有认识到写游戏的快乐而只是抱着摸鱼的心态和蒋哥合作，没有发现史纲论文是一个晚上就能搞出来的而是让它烦了自己一个月，没有体会到英语六级的重要性及紧迫性故而在最后的关头才开始慌张，没有想到……这么多错位都叠在一块，也真是够可以的。更糟糕的是，我好像还一直把负能量传播给同学……我应该看开一点，心态摆好一些，这样应该就能，享受写游戏的乐趣，享受探索的乐趣，享受生活的乐趣了吧。</p><h1 id="问题4-知识掌握程度"><a href="#问题4-知识掌握程度" class="headerlink" title="问题4.知识掌握程度"></a>问题4.知识掌握程度</h1><p>我们是用的一个js库，但对库的用法，对js内对象的特性还不是很清晰，以至做不到把对按钮的声明封装起来以降低代码冗余度。</p><p>不太熟悉web相关的操作，在io上毫无头绪，游戏的一些功能（“昔日荣誉”）也就被鸽掉了。</p><p>不懂音乐也不会创作，不懂在这个库里循环播放的正确用法，这个功能又鸽掉了。</p><p>以上……</p><p>前端的事，很多查文档就好了，但在文档较少的情形之下， 必要的理解能够帮助解决问题，而这是我们所缺乏的，所不应该缺乏的。</p><h1 id="有趣的地方"><a href="#有趣的地方" class="headerlink" title="有趣的地方"></a>有趣的地方</h1><p>①游戏的demo出来后调参以调平衡性的这部分很有意思，玩过都知道，这就是很有意思。</p><p>②把游戏的demo发给同学后他认真地评测了……还提出了些有力的见解。</p><hr><p>开始于2019-08-05</p><p>完稿于2019-08-07</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;三年前与三年后。&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件工程" scheme="https://nessoffice.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="设计" scheme="https://nessoffice.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="游戏" scheme="https://nessoffice.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>【艺术其九】从艺术设计的角度看OneShot</title>
    <link href="https://nessoffice.github.io/2019/08/03/Game-OneShot/"/>
    <id>https://nessoffice.github.io/2019/08/03/Game-OneShot/</id>
    <published>2019-08-03T02:05:59.000Z</published>
    <updated>2019-08-08T02:17:41.974Z</updated>
    
    <content type="html"><![CDATA[<p>煎饼，灯泡，还有救世主。</p><a id="more"></a><p>（虽然标题写着“从艺术设计的角度看”，不过其他角度也是会涉及的。起这个标题主要是因为OneShot的艺术风格真的太棒了……虽然讲起来也说不出什么。然后我也不太了解艺术设计的理论，全程都在瞎讲，设计生不要生气呀……）</p><p>（虽然官方没有声明Niko的性别，但笔者倾向于把ta视作小姑娘。坚强的，善良的，但有时也会难过的，小姑娘。）</p><p>游戏名不知道怎么翻译。一次机会？怪怪的。solstice又怎么翻译？（第一次看成80L9TICE了）都不好翻译，伤脑筋。</p><p>OneShot，近来玩的一款metagame。一直以来都喜欢meta元素，喜欢metafiction，也喜欢metagame。喜欢对于真实与虚构的思索，也喜欢作品在展现meta元素中的独特表现。OneShot在结合meta元素的趣味性和艺术性上就做得比较好，虽然相比Undertale等其知名度或许比较低，但它的品质确实不错。虽然游戏很温馨，good end很美满，Niko和大家也很nice，但结束游戏时也能感到微微的一丝悲伤，是分别的难过。</p><blockquote><p>我在你的记忆里，你也在我的记忆里。</p></blockquote><p>游戏的情节就不细讲了，metagame嘛，自然是自己体验感受更深。本文主要聚焦的是OneShot的画面。</p><p>顺带一提，游戏的音乐也很棒，虽然并非能给人深刻印象，思想深邃，富于张力的那种音乐（玩完就忘了……），但和场景特别搭，尤其能增强你我的代入感。OneShot的音乐基调，总体而言，是舒缓的，平静而祥和，但在一些场景也会呈现出诡异的面貌（毕竟metagame呀……不过放心好了，游戏是单线的，最后很治愈，不会出现糟糕的发展）。</p><h1 id="情节"><a href="#情节" class="headerlink" title="情节"></a>情节</h1><p>虽说情节不细讲，不过还是要提的，因为这情节真的好治愈。</p><p>（世界观的话，非常自洽，从细节可以看出。世界中有城市有计算机有机器人有人工智能，但没有飞机也没有其他交通工具，或许是因为这个世界太小了？光能是主要的能源来源，无论在哪个区域都如此。其他……光这样讲讲也不足以描绘一个世界的）</p><p>OneShot开始时所展现的剧情比较“正统”：主角Niko一觉醒来发现自己身处异世界。世界已走到了尽头，因为曾经的太阳殒灭了，只有将新的太阳致于The Tower的塔顶之上世界才能重归稳定，Prophetbot这样对Niko说。于是，Niko抱着太阳（灯泡）踏上了前往The Tower的朝圣之旅，从Barrens，到Glen，到Refuge，再到The Tower。然而，事情的真相并非Prophetbot所描述的这么简单……</p><p>游戏的第一周目充满了悬念：Barrens中的机器人口中的“制御”是何意？一直给我们，而非Niko传递信息的终端又是谁？为何这世界中满是方块？我们的目的又是什么，拯救世界还是让Niko返回她的世界（终端告诉我们的任务是后者，而NPC们告诉Niko的任务是前者）？图书馆中众人口中的“他”又是谁？三叶草的意义？为何游戏要频频加入meta元素？如此种种的困惑，相信玩家们在探索时都会产生。而无论是Barrens，是Glen，还是Refuge，无论在哪个场景中NPC们都不会回答玩家的这些困惑。直到来到The Tower，直到solstice线开启，直到……</p><p>（开始剧透啦）</p><font color="FFFFFF">直到最后，我们发现游戏里没有反派，没有阴谋。此前所有的诡异的出发点都是The Entity（The World Machine，个人更喜欢The Entity这个名字）对Niko的保护。<br></font><font color="FFFFFF">每位NPC都很善良，表现在细节里。比如给Niko做煎饼，给大家提供避难所的咖啡店老板。比如在最后关头仍维护土地完整的植物精灵。比如陷入悖论的困惑而后被Niko制御的The Entity。<br></font><font color="FFFFFF">还有Niko对我们的信赖，她勇于拯救世界的坚强，她在吃煎饼时候的想家，都是一个平凡而不平凡的女孩子的表现，令人欣赏，惹人怜爱。<br></font><font color="FFFFFF">（虽说如此，但Niko以外的人物塑造地不是特别有特点，个人认为。OneShot在人物塑造上还是有些弱了。）<br></font><font color="FFFFFF">虽然是末世，但是完全没有末世的样子。大家都很乐观，相信希望，相信Niko，也相信我们。<br></font><font color="FFFFFF">这样的善意，渗透在作品里，使整部作品的色彩基调明亮无比（虽然实际上游戏的色彩基调都是比较暗的，这将在后面说）。这些人物的生命之光，展现了作者可贵的人文关怀。<br></font><font color="FFFFFF">既然是metagame，何谓真实总归是一个主题。在不真实的世界里，拯救有意义么？真实又是什么呢？我对这些问题不是很感兴趣，因为我们的情感，我们的体验总归是真实的呀，虽然有点唯心。<br></font><font color="FFFFFF">然后制御这个概念真的挺棒呀……因为认同，所以真实。<br></font><font color="FFFFFF">（说句实话，感觉游戏里的文本总体而言不是很吸引人，很多地方都想跳，有的地方有点太工科了？有的地方又感觉这个人就是会讲这样的话的，总归没什么信息量）<br></font><font color="FFFFFF">（还有steam界面那个游戏介绍……感觉都不像是中文，很西式中文）<br></font><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><p>(星号)困惑的猫叫声(星号)</p><p>在图书馆看到羽毛笔的时候，Niko会想起我们在Glen也碰到过羽毛笔。</p><p>（在初版的游戏中，游戏只能玩一次，按×之后游戏就继续不了了。而且MessageBox还会弹出“You killed Niko”这种比较可怕的字样。）</p><p>The Entity的形象是Niko的黑白镜像。</p><p>在告别的时候，Niko会叫我们好好照顾自己。（上一次被告诉要好好照顾自己，是几年前呢？除了我妈……）</p><h1 id="画面"><a href="#画面" class="headerlink" title="画面"></a>画面</h1><p>好，到重点了。</p><p>OneShot的过场CG表现极为出色。CG往往出现在一些重要的场景，或是转场时刻。CG在/Graphics/Pictures文件夹内（网上都没见大佬整理呢……），此处放上一些笔者所喜欢的。</p><p><img src="/2019/08/03/Game-OneShot/cg_barrens.png" alt></p><p><img src="/2019/08/03/Game-OneShot/cg_refuge1.jpg" alt></p><p>容易发现，CG中的物件要素总体而言较为简单，但它在画面中突出了重点（The Tower无疑是第一张的亮点所在，而第二张中飞机和其眼睛也正是这一画面的眼睛）在色彩和明暗也下了较大的功夫，故而富有表现力。在色彩和明暗上做的文章也正是OneShot在画面上能吸引人的主要原因，依余愚见。</p><p>前面讲到，在OneShot中世界分为四个region：Barrens，Glen，Refuge，The Tower。前三个region各有不同的主色调：蓝，绿，红（RGB）。以Barrens的地图为例，请看：</p><p><img src="/2019/08/03/Game-OneShot/stage_barrens.jpg" alt></p><p>整个地图以蓝黑白三种色调为主。布满荧光矿石的地面，闪着粼粼波光的水池（动态效果很棒很到位），以及波纹纹路清晰的海洋。要素间的和谐也造就了场景的和谐。</p><p>再如refuge，个人格外喜欢这个region的风格。紫色的楼房，红色的灯光，没有夜晚的都市，富有冲击力，诡谲又美丽。虽然是暖色调，但又给人一种微妙的距离感。</p><p>再来是The Tower，它的色调是纯黑和纯白，伴随着昏暗的深蓝。秩序在此陷于混乱。这个场景比较有《梦日记》那样的感觉，但它称不上猎奇，主要是崩坏。</p><p>地图的色调如此，而Niko，太阳，她们都是黄色的。黄光在游戏中无疑象征希望，象征拯救。尤其给人留下印象的是，Niko在穿过场景时，周遭一片漆黑，可见的只有她的眼睛，还有她手中的太阳。（虽然略显恐怖）将颜色用作象征并不罕见，但OneShot此举在视觉效果上显然取得了非常不错的成效，这或许要归功于纯色和像素风的契合。</p><p>色调之外，明暗也是OneShot画面之所以和谐动人的另一大要素。据设定，此前的太阳毁灭了，于是世界处于一片黑暗之中（但各个region还有一些荧光体，颜色各不相同，为人们提供了生存的资源）。故，游戏的画面虽然并不昏暗，但也不明亮，barrens尤其。这样的暗使得故事更有戏剧性，也更能调动玩家对于未知的恐惧，同时也加强了画面的表现力。在一周目若是选择拯救世界，那么会有太阳降世以后的一些CG，很明亮，但也少了各个region独特的艺术风格。</p><h1 id="游戏性"><a href="#游戏性" class="headerlink" title="游戏性"></a>游戏性</h1><p>游戏性，私以为，是OneShot主要的不足。虽然游戏中一些puzzle相当精妙而有趣，但一些puzzle的设置私以为影响了游戏节奏，也不利于剧情的推进。</p><p>puzzle的设置上，大多数和meta相关的puzzle都是很新奇的，也容易想到（不过我并没有想到胶片要放到窗口之外曝光orz），做出来也有一定的成就感。而OneShot中传统一些的puzzle（寻物并组和）私以为还是不那么“自然”的，比如把镜片和空电池扔一块，比如给按钮上胶带（可能我缺乏常识吧），这就导致容易重复跑路，会卡关。而这对于游戏性的影响是致命的。虽然地图很漂亮，但重复跑仍免不了会陷入审美疲劳。或许是我不擅长解密吧，个人认为开始场景的puzzle相当精妙，但后面的略有些困难，跑路量也较大。</p><p>OneShot涉及的比较好玩的较为创新的puzzle，整理一下，如下：</p><p>①找文件，文件依据场景提供提示与剧情指引（The Tower），这个尤其赞。</p><p>②曝光相片（refuge），这个我并没有想到，不过被惊艳到了。</p><p>③踩格子画图案（The Tower第三场景）。</p><hr><p>初稿写于2019-07-31</p><p>完稿写于2019-08-03</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;煎饼，灯泡，还有救世主。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计" scheme="https://nessoffice.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="游戏" scheme="https://nessoffice.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>【白冠之礼】深入浅出密码学：前一章 密码学导论</title>
    <link href="https://nessoffice.github.io/2019/07/28/Notes-Understanding_Cryptography-CH01/"/>
    <id>https://nessoffice.github.io/2019/07/28/Notes-Understanding_Cryptography-CH01/</id>
    <published>2019-07-28T13:22:58.000Z</published>
    <updated>2019-09-06T08:47:20.021Z</updated>
    
    <content type="html"><![CDATA[<p>密码学！</p><a id="more"></a><h1 id="何谓密码学"><a href="#何谓密码学" class="headerlink" title="何谓密码学"></a>何谓密码学</h1><p>虽然密码学中充满了如RSA、AES、PKA等高端现代缩写，但事实上，这已经是门有千年之久历史的古老学科了。自文字出现以来，密码一般也会同步地出现在了人们的生活中。这些是古典密码学，形式古雅而简单，富于趣味性。与之对应的是现代密码学，更“科学”（因为它和数学间的联系较古典密码学更紧密些），更安全，更符合现代文明的需求，但入门难度也更高一些。</p><p>密码学相关的模型有enigma加密机，它背后有一段惊险刺激的故事。还有斯巴达密码棒，虽然常会被作为高中大学的编程水题，但不要因为题目水就瞧不起古人的创意，没准告白的时候就能用上呢（<del>然而这与我有什么关系呢</del>）。</p><p>密码学，cryptology，是个涵盖较广的词，包括cryptography和所谓cryptanalysis。前者包括加密解密的艺术还有一些协议，而后者则强调对密码的安全性进行理论化的分析。而这本书名为<em>Understanding Cryptography</em>，主要是在讲述前者。</p><p>Cryptography主要能分成以下三块内容：对称算法，非对称算法（或公钥算法），密码协议。其实这三者并不并列，只是这三个词出现的频率比较高而已。真要说起来，前两者都是加密的大类，而后者是对加密算法在实际场景下的应用。</p><p>对称算法与非对称算法分别有何优点有何缺陷呢？这是后文所将详述的。在此，我们只需知道前者是双方共享一个密钥，而后者是用户有一个公钥也有一个私钥。看上去后者不太好理解？没事，搜一搜“数字签名”就知道为什么要这样设钥了，而且它的用处远不止用作签名。</p><p>一般来说，对称算法更容易入门些，那我们就来学学吧。</p><h1 id="对称密码学"><a href="#对称密码学" class="headerlink" title="对称密码学"></a>对称密码学</h1><p>首先是概念，先举个例子吧。</p><p>Alice和Bob在通过QQ交流他们对某个题目的想法，然后Bob的手机很容易被黑所以他们的聊天记录可能会被监听。为了让交流的内容不被外人所知，Alice和Bob决定加密他们对话的内容。他们很有古典情怀，所以选择了凯撒加密，双方约定一个密钥，一方在发送时将原文通过密钥加密，另一方也通过这个密钥解密即可。</p><p>上面的例子模拟了一个典型的通信场景，信息源分别为Alice和Bob，他们使用的信道有两个：一个是不安全的QQ，还有一个是相对安全的用于约定密钥的食堂餐桌。然后在前一个信道上可能有非法用户监听。为了在不安全的信道上使通信相对安全，内容不外泄，他们用到了cryptography中的对称密码，其特点是双方共用一个密钥。</p><p>然后他们所用的凯撒加密是一种非常经典（也非常vulnerable）的替换密码。所谓替换密码，顾名思义，就是把一个字母替换为另一个字母。考虑英文字母表中的小写字母，一个字母可能被替换为二十六个字母中的任意一个，而为消歧义性，一个字母的原像应只有一个。（当然，你也可以搞个非单射，一个字母的原像有贼多可能，然后出个题，交代一下原文的hash值，来恶心人）这样的替换有多少类，也就是密钥空间有多大呢？$26! \approx 2^{88}$，很大了。看上去这种加密方式非常不错。</p><p>真的不错么？可以看得出来，bruteforce对于这样的加密一般是相当无力的。假设一台2019年的标准个人计算机每秒能够检查1e8个密钥，那么要遍历完大至1e26的密钥空间要多久呢？1e18秒，1e13年。就算搬来一千台计算机分工也得算到宇宙的寿命翻一倍，很安全。然而，这样的替换没有把原文的统计属性予以一丝一毫的改变。当样本足够大时，英语中各个字母的出现频率会有显著的改变，词频也会趋于稳定。于是，我们便可通过分析统计数据进行解密了。除字母和单词外，还可以通过字母元组的统计规律（如，q后面一般总是跟着u）来进行分析。当然，还需要一些语感和灵感……这是解密的有趣所在。随着所谓人工智能的发展，我们也可通过计算机对此进行分析。</p><h1 id="密码的安全性"><a href="#密码的安全性" class="headerlink" title="密码的安全性"></a>密码的安全性</h1><p>为了知晓密码是否足够安全，我们需要对密码进行攻击尝试。攻击的方式有哪些呢？首先是经典的密码分析，比较登大雅之堂，可以暴力枚举密钥，也可在获悉加密方法的内部结构后进行分析攻击。然后就是比较离谱的攻击方式了：implementation attack，物理玩法，比如测量处理私钥的处理器的功耗搞到密钥；社工，利用人性的弱点，比如冒充公安局说对方涉嫌违法犯罪需要提供密码。</p><p>后两个方法比较玄，不是很数学，所以书后面就不怎么讲了，不过这两个方法还是非常好用的，虽然随着时代的进步人们的防范还有设备的防范都加深了。</p><p>可靠的密码体制需要遵守Kerckhoffs原理，即即便公开密钥以外系统的一切，包括加密解密算法，系统也应足够安全。</p><p>这个原理看上去不太符合常理，因为隐藏细节不是也扩大了“加密/解密算法空间”吗？这样的方案被称为隐蔽式安全性，security by obscurity。但历史经验（书上的例子似乎不够多）告诉我们这样是有风险的。</p><p>遵守Kerckhoffs原理的话，安全传输信息的问题便可以归结到安全地传输、存储密钥的问题上了。所以密钥是否足够robust呢？首先我们得让bruteforce无效化。即密钥空间开得多大能够使密钥保证计算安全？简单计算一下可知，64位虽然不能马上破解但是耗费数小时数天还是能够做到的。而128位要让电子计算机算个几十年。（以上为口胡）这些估算是把计算机性能的提升（摩尔定律）算在内了的。</p><h1 id="两类替换密码"><a href="#两类替换密码" class="headerlink" title="两类替换密码"></a>两类替换密码</h1><p>了解了一下密码分析相关知识，我们来拿简单可爱的古典密码开刀吧！首先是凯撒密码，接着是仿射密码。在分析之前，我们先得用现代化的语言表述这两种（其实是一种）加密算法的内容，而这，涉及到了编码和模运算。</p><p>模运算，相信学过一点初等数论或是基础的计算机课程就不会陌生，此处就略去不表了。书中也便是引入模运算的定义，同余的概念，同余等价类的概念，整数环的定义和若干性质（封闭、可结合、可交换、加法乘法存在不变元、加法存在逆元而乘法不一定存在逆元），如此而已。利用同余等价类可简化计算。对于乘法逆元的存在与否介绍了基于两数是否互素的判别方法。这是两个要点。</p><p>所谓凯撒密码，便是把字母（广义）编码到整数环上，再在环上进行加法运算，仅此而已。这种方式非常的vulnerable，因为它的密钥空间只有26，52，或是其他（总归不会大，即便是用字母表是所有汉字的集合……但这个样子也太为凯撒而凯撒了吧？），计算机秒秒钟就能算出来，甚至都不用进行频率分析。唯一的麻烦就是要判定可能的plaintext是不是readable的，不过浏览26个字符串对人类而言还是容易的，尤其很多扫一眼就能退出check了。（当然，也能用计算机分析readable指数，训练个模型什么的，可是咱也不会呀\cry）</p><p>然后是仿射加密，affine。凯撒的加密是$e_k (x) = y \equiv (x + k) mod 26$，则仿射加密便是$e_k (x) = y \equiv (ax + b) mod 26$。解密找反函数就好了。需要注意的是，此处密钥需满足$gcd(a, 26) = 1$，不然没有乘法逆元解密不总是能进行。仿射加密看上去比凯撒牛逼了很多，真的如此？并不是。由乘法原则，密钥空间=（a的可能取值数）×（b的可能取值数）=12×26=312，还是小的可怜呀，不过对入门级CTFer来说可能要难一丢丢（笑）。</p><h1 id="要点回顾"><a href="#要点回顾" class="headerlink" title="要点回顾"></a>要点回顾</h1><p>1.不要乱开发自己的加密算法。（这主要是在实际应用中，瞎搞很容易出问题；不过在学习生活中瞎搞还是好玩的，比如把告白用的text加个自己瞎搞的密然后把代码给妹子让她分析得出原文，<del>然而这与我有什么关系呢</del>）</p><p>2.不要使用未经证明的加密算法或未经证明的协议，基本同上。这也是对Kerckhoffs原理的强调。</p><p>3.攻击者总是试图寻找密码体制的最薄弱之处，大的密钥空间并不保证密钥的安全性因为它不一定能抵抗分析攻击。</p><p>4.用于防御bruteforce的对称算法的密钥长度为128位或以上为宜，64位存在危险。</p><p>5.模运算是一种以严格数学方式表示古典密码方案的工具。</p><h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><h2 id="替换密码解密题"><a href="#替换密码解密题" class="headerlink" title="替换密码解密题"></a>替换密码解密题</h2><p>以下密文是使用替换密码加密得到的，请在不知道密钥的情况下解出原文。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lrvmnir bpr sumvbwvr jx bpr lmiwv yjeryrkbi jx qmbm wibpr xjvni mkd ymibrutjx irhx wi bpr riirkvr jx ymbinlmtmipw utn qmumbr dj w ipmhh but bj rhnvwdmbr bpr yjeryrkbi jx bpr qmbm mvvjudwko bj yt wkbrusurbmbwjk lmird jk xjubt trmui jx ibndt</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wb wi kjb mk rmit bmiq bj rashmwk rmvp yjeryrkb mkd wbi iwokwxwvmkvr mkd ijyr ynib urymwk nkrashmwkrd bj ower m vjyshrbr rashmkmbwjk jkr cjnhd pmer bjlr fnmhwxwrd mkd wkiswurd bj invp mk rabrkb bpmb pr vjnhd urmvp bpr ibmbr jxrkhwopbrkrd ywkd vmsmlhr jx urvjokwgwko ijnkdhrii ijnkd mkd ipmsrhrii ipmsr wdj kjb drry ytirhx bpr xwkmh mnbpjuwbt lnb yt rasruwrkvr cwbp qmbm pmi hrxb kjdjnlb bpmb bpr xjhhjcwko wi bpr sujsru msshwvmvwjk mkd wkbrusurbmbwjk w jxxruyt bprjuwri wk bpr pjsr bpmb bpr riirkvr jx jqwkmcmk qmumbr cwhh urymwk wkbmvb</span><br></pre></td></tr></table></figure><p>这很明显是频率分析。虽然已经有造好的<a href="https://quipqiup.com/" target="_blank" rel="noopener">轮子</a>了（一开始不会做就直接丢进去了，也是一种选择啊），但还是想自己瞎搞搞搞看。写完了之后封装了一下，就是这样的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LEN = <span class="number">26</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Letter</span>&#123;</span><span class="keyword">char</span> ch;<span class="keyword">int</span> fre;&#125;; <span class="comment">// fre for frequency</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Letter&amp; lhs, <span class="keyword">const</span> Letter&amp; rhs)</span></span>&#123;<span class="keyword">return</span> lhs.fre &gt; rhs.fre;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FREQUENCY_ATTACK</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Letter letters[LEN];</span><br><span class="line"><span class="keyword">char</span> cipher_text[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">char</span> in_table[LEN];</span><br><span class="line"><span class="keyword">char</span> out_table[LEN];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">char</span>&gt; dict;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">load_cipher_text</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span></span>&#123;<span class="built_in">strcpy</span>(cipher_text, str);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_letters</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; LEN;i++)</span><br><span class="line">&#123;</span><br><span class="line">letters[i].fre = <span class="number">0</span>;</span><br><span class="line">letters[i].ch = i + <span class="string">'a'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_frequency</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="built_in">strlen</span>(cipher_text);i++)</span><br><span class="line">letters[cipher_text[i]-<span class="string">'a'</span>].fre++;</span><br><span class="line">sort(letters, letters + LEN, cmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_frequency</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> ch = <span class="number">0</span>;ch &lt; LEN;ch++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c: %d\n"</span>, letters[ch].ch, letters[ch].fre);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"order by frequency: "</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; LEN;i++)</span><br><span class="line"><span class="built_in">putchar</span>(letters[i].ch);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">analysis</span><span class="params">(<span class="keyword">bool</span> do_print)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">init_letters();</span><br><span class="line">get_frequency();</span><br><span class="line"><span class="keyword">if</span>(do_print) print_frequency();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dict_generate</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str1, <span class="keyword">const</span> <span class="keyword">char</span>* str2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(in_table, str1);</span><br><span class="line"><span class="built_in">strcpy</span>(out_table, str2);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; LEN;i++)</span><br><span class="line">dict[in_table[i]] = out_table[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">translate</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="built_in">strlen</span>(str);i++)</span><br><span class="line"><span class="built_in">putchar</span>(dict[str[i]]);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_letters_not_in_out_table</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; table;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="built_in">strlen</span>(str);i++)</span><br><span class="line">table[str[i]] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"letters that aren't in the out_table: "</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; LEN;i++)</span><br><span class="line"><span class="keyword">if</span>(!table.count(i + <span class="string">'a'</span>))</span><br><span class="line"><span class="built_in">putchar</span>(i + <span class="string">'a'</span>);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>思路就是先求出频率，再排序，再把这段文本中按频率降序的字母表和大量文本中按频率降序的字母表建立一个映射，思路是这样的，然后main函数里面是这样的，以第二段文本为例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// exercise 1.1.2</span></span><br><span class="line">FREQUENCY_ATTACK target;</span><br><span class="line">target.load_cipher_text(<span class="string">"wb wi kjb mk rmit bmiq bj rashmwk rmvp yjeryrkb mkd wbi iwokwxwvmkvr mkd ijyr ynib urymwk nkrashmwkrd bj ower m vjyshrbr rashmkmbwjk jkr cjnhd pmer bjlr fnmhwxwrd mkd wkiswurd bj invp mk rabrkb bpmb pr vjnhd urmvp bpr ibmbr jxrkhwopbrkrd ywkd vmsmlhr jx urvjokwgwko ijnkdhrii ijnkd mkd ipmsrhrii ipmsr wdj kjb drry ytirhx bpr xwkmh mnbpjuwbt lnb yt rasruwrkvr cwbp qmbm pmi hrxb kjdjnlb bpmb bpr xjhhjcwko wi bpr sujsru msshwvmvwjk mkd wkbrusurbmbwjk w jxxruyt bprjuwri wk bpr pjsr bpmb bpr riirkvr jx jqwkmcmk qmumbr cwhh urymwk wkbmvb"</span>);</span><br><span class="line">target.analysis(<span class="literal">true</span>); <span class="comment">// print the frequency</span></span><br><span class="line">target.dict_generate(<span class="string">"rbmkwjiphdvsunxyoatcqlegfz"</span>,</span><br><span class="line">                     <span class="string">"etanioshldcprufmgxywkbvzq_"</span>);</span><br><span class="line"><span class="comment">//                      etaoinrshdclmpufgwybkjvxqz</span></span><br><span class="line"><span class="comment">// the row above shows the frequency of letters in English</span></span><br><span class="line">target.translate(target.cipher_text);</span><br><span class="line">target.translate(<span class="string">"bjlr"</span>);</span><br><span class="line">target.print_letters_not_in_out_table(<span class="string">"etanioshldcprufmgxywk vzq "</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码应该比较容易看懂，但问题在于dict_generate对应的表是如何生成的呢？因为样本的问题，此表和普遍接受的英语字母频率表并不是完全一致的，所以需要微调，不然直接放进去搞出来的原文并不是readable的。那么怎么调呢？本人的做法是先把这个out_table全填上.（LaTeX不方便输入下划线，就用.替换了），方便确认各个单词的完整度和字母数。然后把et两个字母填进去，因为大数定律，它们更有可能占在原来的位置上。然后知道了et就能找the了。我们注意到，bpr在原文中出现了很多次，有理由相信它对应于the。这样之后发现了形如th.t的单词，就可以填a了。然后还有形如eas.，形如tas.的单词，都能填了。这样之后好像陷入瓶颈了？让我们来找一些特别短的差不多能够猜出来的词吧。已经知道了b对应t，那么bj能对应什么单词呢？也只有to了吧。确定了j对应于o，然后密文中又有很多的jx，又能确定x对应于f了。密文中有个单词w，而单个字母组成的单词似乎只有a和I，a又用掉了，这样就能确定w就是i了……如此。到后面几乎一下就能确定一个单词了，做得很快。print.letters.not.in.out.table是在大后期确定哪个单词还没有使用的。然后找到了一个差不多可以填的单词可以手工模拟一下（懒得写anti.translate这个函数了）其密文再搜索一下找到它。如此这般如此这般，就能做出来啦！（一开始对着书抄密文把y抄成v了，结果搞出来covement，soce这种单词……然后开始我不是用下划线占位而是用空格占位的，后面的单词看着特奇怪，很怀疑自己是不是有映射弄错了……）</p><h2 id="其他题目"><a href="#其他题目" class="headerlink" title="其他题目"></a>其他题目</h2><p>感觉只有第一个题目比较有意思（因为是手动造轮子吧，虽然扔到quipquip里面也是秒做的），其他题目都太简单了？不是很有挑战，但还可以。</p><p>第二题的话直接暴枚二十六个密钥然后找readable的原文，以前遇到凯撒我都是这么做的。今天它要我基于字母频率来攻击……其实也好办，跑一下频率，然后令k = ‘e’ + 26 - ‘t’就好了，大数定律（虽然一点也不大）。第十一题直接模拟，不过这行话是Dodgeson写的吗我居然毫无印象……</p><p>第三题这种费米问题，条件给得多了呀……不过我们现在也是在科学地分析嘛，精确点也好。注意对数的妙用，就差不多了。</p><p>第四题也足够让我们感受平时的8位密码有多么robust了，从而能够理解为什么各网站在检测密码强度时检测到只有小写字母是“弱”而有小写有大写有数字就是“强”，只要有一个位置的可能，密钥空间就能增加这么这么多。</p><p>第五六七八九十题，都是数论相关，包括等价类的应用，求逆元等，基础。其中1.9提到了“离散对数”的概念，这个东西后面还会讲的，在椭圆曲线加密那块。十是欧拉函数，看到它我想到了最近看到的欧拉乘积公式……</p><p>第十三题提到了选择明文攻击。这是个有趣的概念，想象两国交战中你作为间谍无法获取密钥的情报但能够发送加密的信息，也就是你能够选择一些原文，知道这段原文的密文。如果是这样，你如何攻击密码呢？仿射自然是很好破译的，但其他呢？</p><p>第十四题提到了多次加密。显然，对于仿射加密而言多次加密完全没有扩大密钥空间的作用，没有实质性的效果（除了唬人）。但是对于DES，多次加密就有意义了……</p><hr><p>初稿写于2019.07.23</p><p>完稿写于2019.07.28</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;密码学！&lt;/p&gt;
    
    </summary>
    
    
      <category term="信息安全" scheme="https://nessoffice.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
      <category term="课程笔记" scheme="https://nessoffice.github.io/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>【朝花夕拾】吉静文选 凝望</title>
    <link href="https://nessoffice.github.io/2019/07/27/History-My_Essays-The_Stones/"/>
    <id>https://nessoffice.github.io/2019/07/27/History-My_Essays-The_Stones/</id>
    <published>2019-07-27T11:53:50.000Z</published>
    <updated>2020-01-23T11:34:01.779Z</updated>
    
    <content type="html"><![CDATA[<p>塑料诗集。</p><a id="more"></a><p>（版权所有，严禁转载。违者自行承担相应法律责任）</p><p>塑料诗集。</p><p>（本来是叫“块砾集”的，取自《阿房宫赋》“鼎铛玉石，金块珠砾，弃掷逦迤。”但这个名字感觉实在太……微妙了，就换成里头一篇的名字了，希望不要重名了……）</p><center><strong>在海那边</strong></center><center>在山的那边</center><center>终于不是山铁青着脸</center><center>妈妈，那是海啊</center><br><center>我奔向蔚蓝色的梦想</center><center>却淹死了</center><br><center><strong>当你开始仰望星空</strong></center><center>三十五万年前你开始仰望星空</center><center>昨天你刚刚踏上月球</center><center>七百万年前你才诞生在这大地</center><center>诞生在这三十六亿年来无数生灵存活又死灭的大地</center><br><center><strong>凝望</strong></center><center>等待，漫长的等待</center><center>沉默，不尽的沉默</center><center>我等成了一座化石</center><center>可我手里的馍还没干</center><br><center><strong>现代文明</strong></center><center>飞天</center><center>向上</center><center>向上</center><center>向上</center><center>向上</center><center>向上</center><center>烟囱</center><center>楼栋</center><center>井盖</center><center>管道</center>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;塑料诗集。&lt;/p&gt;
    
    </summary>
    
    
      <category term="创作" scheme="https://nessoffice.github.io/tags/%E5%88%9B%E4%BD%9C/"/>
    
      <category term="回忆" scheme="https://nessoffice.github.io/tags/%E5%9B%9E%E5%BF%86/"/>
    
  </entry>
  
  <entry>
    <title>【围炉夜话】《论语》随谈</title>
    <link href="https://nessoffice.github.io/2019/07/27/Toughts-The_Analects_Of_Confucius/"/>
    <id>https://nessoffice.github.io/2019/07/27/Toughts-The_Analects_Of_Confucius/</id>
    <published>2019-07-27T11:50:59.000Z</published>
    <updated>2019-07-27T13:04:47.052Z</updated>
    
    <content type="html"><![CDATA[<p>这并不是本学术性或是宗教性的著作，这只是本有趣的书。</p><a id="more"></a><h1 id="缘起——《论语》的价值何在"><a href="#缘起——《论语》的价值何在" class="headerlink" title="缘起——《论语》的价值何在"></a>缘起——《论语》的价值何在</h1><p>一直不大喜欢儒家学派，不是很喜欢它对人伦方面的重视，对孔子还有他的弟子也一向没有感觉。但这些大都属于刻板印象（印象：陈腐、迂阔、古板、严肃），因为我并没有认真翻过这本书，只是单纯的不喜欢而已。</p><p>其实拨开偏见，《论语》还是挺有意思的。它的文学价值非常高，这是笔者的主要欣赏点。</p><p>当然，说《论语》，还是不能脱离儒学——它的环境的。那么我们也来聊聊儒学吧……就渗透到文章里，不单独拎出来讲了。</p><h2 id="记忆"><a href="#记忆" class="headerlink" title="记忆"></a>记忆</h2><p>高中语文课的某个阶段上的是《&lt;论语&gt;选读》，安排在《外国小说欣赏》之后。本以为会特无聊的，但其实这门课还不错（文史类的课程很看老师。至少在教学上，我认为自己以前碰到的文科老师都挺好），虽然现在我什么也记不起来了……</p><p>以前晚上有看闲书的习惯（在寝室里没话讲，也没有串寝的习惯），有一段时间看的就是《论语别裁》，老师在开《&lt;论语&gt;选读》之前推荐的若干注疏中的一本，想也不会看很多，就随便挑了一本。看看还挺好看。不过之后偶然想道“程子曰：今人不会读书。如读《论语》，未读时是此等人，读了后又只是此等人，便是不曾读。”不由得想到自己，突然觉得很悲哀。就没读了。对这一阶段的语文学习也感到异常的悲哀。这样的我只能把《论语》当文学作品看，否则只能为考试而学习了，而我不喜欢这样。</p><h2 id="历史价值"><a href="#历史价值" class="headerlink" title="历史价值"></a>历史价值</h2><p>对《论语》，人们的评价自然是两极化的。什么“圣人之书”“国学经典”，古人这么说，今天许多人也这么说（其实“四书”一个名号就够了，它较之“四大名著”更有推崇的意味）。或者“文化糟粕”，把孔老二和他提倡的旧道德都踩一踩。这在新文化运动时期，文革时期尤甚。今天很多人也这么说，一般语气都比较激进，看得出来心理年龄总体比较年轻。</p><p>所以我们该怎么看呢？辩证地看呗。首先《论语》它不仅仅是本书而已，它是儒学的代表作品之一，它的历史地位，还有它在历史进程中的影响都是至关重要的，不可不考察的。从思想史的角度看，《论语》显然是无法避开的在中华民族民族特点塑造上的一笔浓墨。对《论语》的接受，不仅仅是对这一本书的接受，更是对于一种价值体系的接受，也是政治相互作用上的文化表现。《论语》虽然是静态的事物，但人们对其的诠释与看法自然是随着时代变化而变化的——汉代的《论语》和朱熹以后的《论语》在思想体系建设上所起的作用自然不会完全相同，而是随着政治的趋势而有所改变。</p><p>我们当然有权利认为《论语》不足以被称为经典，及其背后儒学的无甚价值。比如王小波《我看国学》里这一段，就说得挺在理，至少我也是这么认为的。</p><blockquote><p>现在可以说，孔孟程朱我都读过了。虽然没有很钻进去，但我也怕钻进去就爬不出来。如果说，这就是中华文化遗产的主要部分，那我就要说，这点东西太少了，拢共就是人际关系里那么一点事，再加上后来的阴阳五行。这么多读书人研究了两千年，实在太过分。</p></blockquote><p>然而，我们否定不了《论语》，其背后的儒学在历史进程中所发挥的作用，它在国家治理、文化共同体构成、民族凝聚力提升上的作用。</p><h2 id="文学价值"><a href="#文学价值" class="headerlink" title="文学价值"></a>文学价值</h2><p>《论语》中的语言特别活泼具有表现力，倒装，语气词连用，反问，反复，对偶……应有尽有。许多语句脍炙人口，兼具诗歌的艺术性与格言的思想性。</p><p>《论语》的人物塑造是相当成功的，可谓形神兼备。一个表情，一句反复，便能把人物的亮点给点出来了。着墨较多的人物包括孔子、颜回、子路等。孔子很可爱，循循善诱的，和弟子的交流没有架子。子路就比较莽，看着傻乎乎的，但挺努力，结局也叫人唏嘘。</p><p>讲文学价值不能不结合文本，但手头没有《论语》……当年的笔记也在家里睡觉，改日再写吧。</p><h2 id="和《理想国》的比较"><a href="#和《理想国》的比较" class="headerlink" title="和《理想国》的比较"></a>和《理想国》的比较</h2><p>当然，我们也可以用比较的观点来看。一种比较是把《论语》和《理想国》放到一起，因为这两部作品比较像，都是语录体作品，都是古代社会差不多时段的经典，相关人物也有颇多相似之处。孔子与苏格拉底（虽然是披着苏格拉底外衣的柏拉图），相似而不相同，值得放到一块来研究。</p><p>这样的比较一般比较体系化，比如可以比较二者的教育观，二者对理想政治的看法，二者对世界本源的认识，等等。这些个意识和其社会环境也是不无关系的，于是我们还可以比较两个社会的分别……</p><p>书不在手里，没有史料，ddl也不在线，改日再写。（咕咕咕）</p><h1 id="《论语》的读法"><a href="#《论语》的读法" class="headerlink" title="《论语》的读法"></a>《论语》的读法</h1><p>就是本书而已，哪来那么多读法。瞎读即可。读得开心就读，不想读了就扔掉，这是看闲书的态度。没必要关注它的名号，没必要把它当正经书读，也没必要研究得很透（文科生自觉忽略）。喜欢谁的注疏就拿来看，就这样。</p><h2 id="个人读法"><a href="#个人读法" class="headerlink" title="个人读法"></a>个人读法</h2><p>个人是把《论语》作为格言集，随便翻翻，看到有感触的再细看，沉淀在记忆中，等到自己有了相似的体验后再把它拎出来，仔细端详……</p><p>可能对某一句会有很多很多想法，可能对另一句一点想法也没有（比如孝悌，说有什么意思，行动呗）。对后一类会忽略，对前一类则会把与之相关的思考挂在一起，等到什么时候堆足够高再把它们汇总起来，写到一块去。</p><p>不懂古文，只会望文生义，孔子的原意和我的想法可能差了十万八千里。不过话说回来意思不一样，又如何呢？我写的只是我眼中的，而不是大家眼中的《论语》呀。</p><p><strong>有朋自远方来，不亦说乎？</strong></p><p>以前我总觉得这不是废话吗……不爽，我哪来的朋友。这句话没意思。</p><p>而刘震云则能从这句话想到，什么才是朋友，这样一个尖锐的问题：</p><blockquote><p>如讲到“有朋自远方来，不亦乐乎”，徒儿们以为远道来了朋友，孔子高兴，而老汪说高兴个啥呀。恰恰是圣人伤了心。如果身边有朋友。心里的话都说完了，远道来个人，不是添堵吗？恰恰是身边没朋友，才把这个远道来的人当朋友呢；这个远道来的人，是不是朋友，还两说着呢；只不过措着这话儿，拐着弯骂人罢了。徒儿们都说孔子不是东西。老汪一个人伤心地流下了眼泪。</p></blockquote><p>选自《一句顶一万句》。全国卷有篇《塾师老汪》，是里面故事的缩写版，不妨一看（虽然经常在做语文《五三》的时候情不自禁地看阅读摸鱼，但还是不喜欢喜欢的文章成为高考题的感觉）。</p><p>于是乎，现在看到这句话，则会心生一丝凄凉的感觉。</p><p>但其实不应该这么割裂地看的。这半句话出自《论语·学而》，讲学习呢（虽说不是学术是伦理），前面跟着句“学而时习之，不亦说乎？”后面跟着句“人不知而不愠，不亦君子乎？”所以更好的解读是把这三句连在一起，放到这整篇里面看。于是，这三句主要在说学习的第一法则：复习并能从中得到快乐（这需要第一遍的学习形成了足够清晰完整度足够高的知识体系），和他人交流并从中收获友谊与喜悦，君子地处理学习中的信息不平等问题。看上去这三句内部关联不是很大？管他呢。如果我是孔子，我也不会把“不亦说乎”的充分条件枚举一遍列出来。而是，根据自身经验，感觉复习很快乐，和他人交流很快乐，把这些东西扔到“不亦说乎”堆里。平时聊天把堆顶的元素弹出来。啊，复习真快乐啊；啊，和朋友交流真舒服啊；啊，友善的交流才是君子啊。最后有个递进，还朗朗上口，好，徒儿们，记下来。</p><p>再比如这句。</p><p><strong>学而不思则罔，思而不学则殆</strong></p><p>以前只是觉得这句话很对，很合理，嗯，就这样。没啥感觉。</p><p>而这或许是因为没有体验过“罔”的感觉吧。这句和上一句一样，再小学课本里的《&lt;论语&gt;十则》这篇里都找得到。真的，小孩子对“罔”有什么感觉……</p><p>而在搞竞赛的时候，在被一个题卡了若干小时后翻看题解毫不意外地发现自己对这部分的知识一无所知的时候，翻开崭新的教程，准备接受知识的洗礼时，很容易会陷入迷惘。虽然想要学习想要提升，但在学了一页又一页的定理而面对例题仍手足无措，看到题解仍满腹疑惑，对自身的价值，对自己的学习能力，对自己过往的努力，也可能产生骤起的挥之不去的怀疑。学而不思，让我们只看到了知识海洋的浩淼与深不可测，于是乎我们开始迷惘。</p><p>每当此时，我们不妨放下脚步，停止打了鸡血一般的猛灌猛学，睡一觉，同时认真思考一下自己为何而迷惑，自己要学习些什么。总之信心不能耗散。</p><p>为什么这个题题解是这样的呢？它是裸题吗？它一定要用这种方法吗？这一方法体现了什么思想？用到了什么性质？还有什么样的模型可以用这种方法解决？等等等等。我们有很多的疑惑。首要的一步是把纷乱的疑惑归结起来，整理出其层次关系，再逐个击破。这样贯彻了自己思考的学习，往往较灌输式的学习（不仅包括没有思考地听老师讲，也包括没有思考的看书）来得有效果。</p><p>思考固然有乐趣，然而一味沉浸在自己的思索而妄图搭出学科的大厦来，对大多数人而言是不大可能的。思考之上，当思考我们思考时思考什么。什么样的问题需要考虑？知识点间能组建出什么样的联系？这些问题往往不能通过简单封闭的思索得出答案，而需要几代人的努力加上思想的沟通。而学习，便是让我们一窥这些问题的答案的大门。反过来说，思而不学，则无法更大地延伸自己的思维，反而可能造就井底之蛙般的学习态度乃至人生态度，这便是其有害之处。</p><h2 id="他人读法"><a href="#他人读法" class="headerlink" title="他人读法"></a>他人读法</h2><p>没读过相关的正经学术著作，只读过闲人写的闲文章，是语文老师发的若干课后阅读，她们整理的这系列阅读质量都挺不错。上到《知其不可而为之》这课时候课后阅读是相关的文章，都挺好，虽然我都忘掉了，只记得一篇周国平的《孔子的洒脱》，写得挺洒脱。</p><p>随着经济社会的发展，中产阶级队伍的壮大，市面上出现了许多和《论语》相关的一些“通俗著作”。这些作品的特点便是销量高但生命周期和出书周期短，内容和《论语》虽有关联，但夹杂私货甚多，可谓挂羊头卖狗肉。具体是哪些大作就不一一点名了。其他传统名著也有相关的“通俗读本”“xx解读”，不过近年来风向也有所改变。此类书市场的繁荣是营销的成功，但却是文化的失败。资本险恶的呀，我们当认清其本质，重视经济在这些社会乱象中的作用，用科学的理论武器分析这些社会现象的当下和未来（知道我在说什么吧，就不点出来了）。至少我们得清醒，媒体眼中的《论语》，不一定总是它原本的样子，也不要总是把其宣传信以为真，要保持自己独立的思考呀。</p><p>私以为将传承《论语》及其背后的传统文化的一种值得推崇的方式，不是营销式地推崇所谓国学，将其神秘化、功利化，而是将传统文化的精髓渗透在自己的理解中，同时加上自己时代的解读。除去上文所述刘震云从“有朋自远方来不亦说乎”引出其对于中式人际关系的思考（事实上，刘震云的小说更能让人想到《水浒》，在来与回之间的个体的无奈），笔者还很喜欢刘慈欣的《朝闻道》，从科研工作者对真理的求索中，我们可以看到古士大夫求索理想政治精神的影子，可以看到“人”的光辉。</p><p>或者是太祖的诗词中，《水调歌头·游泳》里的豪迈，“逝者如斯夫”，时间过得很快呀，已经是我们的时代了，小子们努力啊。</p><h2 id="印象"><a href="#印象" class="headerlink" title="印象"></a>印象</h2><blockquote><p>曰：“是知其不可而为之者与？”</p><p>暮春者，春服既成，冠者五六人，童子六七人，浴乎沂，风乎舞雩，咏而归。</p></blockquote><hr><p>开始于2019-06-03</p><p>完稿于2019-07-27</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这并不是本学术性或是宗教性的著作，这只是本有趣的书。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随想" scheme="https://nessoffice.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="阅读" scheme="https://nessoffice.github.io/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>【围炉夜话】吉静关于朋友的一些胡思乱想，及友链</title>
    <link href="https://nessoffice.github.io/2019/07/22/Toughts-On_Friends/"/>
    <id>https://nessoffice.github.io/2019/07/22/Toughts-On_Friends/</id>
    <published>2019-07-22T11:50:59.000Z</published>
    <updated>2019-07-26T14:28:27.343Z</updated>
    
    <content type="html"><![CDATA[<p>海水退去 露出了漫漫的旷野</p><a id="more"></a><h1 id="高中"><a href="#高中" class="headerlink" title="高中"></a>高中</h1><p>先讲朋友。ljq叫我广交朋友，但我不是很喜欢这样的建议。不是很愿意主动和别人结交。高中时候班主任也经常给我提这样的建议，我也都是“哦哦哦”过去的。你们不是我，也不了解我的平凡的普通的真实的我也不清楚为什么会感到的尴尬。</p><p>我没什么朋友，独来独往了若干年，没觉得这样有什么不好。自己学习，自己探索，自己难过。自己难过比较难受。可能和他人分享会好受些？不觉得。人真的能够理解他人吗？真正地，理解他人的痛苦，彷徨，徘徊与失落？我相信每个人都会有这样的感受，但不相信人能够<strong>理解</strong>他人的这番折磨。没有原因，仅是不相信而已。</p><p>有时候和同学走在一起，会有貌合神离的感觉。感觉大家都不喜欢我。和蒋哥们走一起时都是他们在聊天。感觉自己可有可无。好像是高二的时候吧，因为相关的原因不想吃饭，包括中饭，包括晚饭。饥饿很好，能把我的想法从那些乱七八糟的很烦很不爽的事情上转移到对饥饿本身的体味上。当然饿多了身体也吃不消，白天头会很晕，晚上会睡不着想着想吃东西想吃东西。于是就只能夜自修后去吃夜宵了。吃夜宵的时候，有时翔中会坐过来，这时候往往会感到一种莫名的感动。</p><p>感觉自己比较黏，谁都黏。大家似乎不喜欢这样的我？那我就只黏着自己好了。很多时候会很封闭，不愿意和人来往。宁愿盯着题目毫无思绪地发呆，宁愿一直一直生闷气，也不想去打扰别人。并不是没有尝试过，只是试的次数太多我厌倦了。错的似乎总是自己。我没有道理，我比较偏执。难过的也是自己，虽然别人也不好受？但我体味不到，理解不了。讨厌将心比心，当且仅当我很不很不开心。</p><p>高三时候心理可能正常了一些吧，虽然不是所有时候。晚上喜欢和阿彪聊天，虽然人家经常不理我。”睡觉。“但也不总是不理我。印象比较深的是四月选考结束后的晚上，我因为网络太崩成绩还没查出来，心还悬得很，完全睡不着。聊未来，聊选择，不知聊些什么，不知聊到几点。虽然我们基本都是自说自话，自问自答，但就是能沉浸在这样没有逻辑的对话中，在充满不确定的前方中感到一丝安定（当然，如果之后发现考试崩了，想必我的回味也不会是这个样子吧）。</p><h1 id="大学"><a href="#大学" class="headerlink" title="大学"></a>大学</h1><p>大学里朋友有很多划分：室友、课友、队友……反倒是“同学”用的少了。我用同学指代课友，同学还以为是高中同学。</p><p>这样的划分在“友”字之前更强调对方在己生活中的具体哪一部分（虽然说者不尽都这么想），更强调双方的共同点（或者说共同利益？），更社会了些，没有象牙塔里那么纯真（去他娘的纯真）。虽说是”友“，但终归只是个称谓而已，这很礼也很文明，但似乎也造成了成年人之间的一丝微妙的隔阂。</p><p>虽然结识很多厉害的人也是上大学的一个作用，但真的不喜欢主动。讨厌经营人脉。无聊。一般不会约别人出来。我对未来没什么想法也不想有什么想法。我只想过上平静的生活。</p><p>有时也会被认识，但并不是所有时候都想认识别人，也不是所有人都想认识。至于想认识和不想认识之间的区别，我也不清楚。私以为能力并不是重要因素。或许和开朗的同学更能聊得来吧。</p><p>有时看着大家都成双入对的会有一丝羡慕，但觉得自己并不是个能始终对女孩子负责的人。无意伤害他人，所以还是把可能的悲哀扼杀掉好了。</p><p>生活本就很拧巴。所以有一些隔阂，保持些距离似乎也不错。进了浙大以来心理状况比以前要健康地多了。庆幸自己能觉得自己是个正常人。这和所处的环境必然是有一定关联的。大家有了距离可以不相互打扰，我可以happy coding而不必在高考之外不自觉地考虑班级里年级里的partition问题，这很棒，对我而言。（当然大学的生活境况必然对每个人心理状况的影响是不一样的，起码我觉得自己的室友，碰到的同学，都很nice）</p><p>但下了雨还是希望能有人来给自己送伞呀。</p><h1 id="Cyber"><a href="#Cyber" class="headerlink" title="Cyber"></a>Cyber</h1><p>或许于我而言，朋友并不是个日常性的词汇吧。所谓“朋友圈”，里面却大都是陌生人的生活，真奇怪呀。</p><p>谈及朋友圈，及与之相关的social media，引一段卢昌海的相当有趣的思考：</p><blockquote><p>性格使然， 我较少与人互动， 微博微信都如此。 有时会想， 微信因为是朋友圈， 相互点赞比较频繁， 那里的点赞会不会无形中成为一种类似 “表忠心” 的行为？ 当一条微信被 N - n 个朋友点赞， 那没点赞的 n 个朋友会不会引起微信主人的留意 (尤其在 N ≫ n 时)？ 如果用 Ai 表示没给微信主人的第 i 条微信点赞的人的集合， 则 ∩Ai 会不会被当成 “叛徒” 集合， 那里的人会不会像《古拉格群岛》里那个在需要鼓掌的场合第一个停止鼓掌的人那样， 引起最高级别的留意？</p></blockquote><p>在信息流通渠道更加多样的今日，诚然人们能更加便捷地获取彼此的相关信息，但对于彼此的<strong>理解</strong>却并不较昔日有了同步的加深。相反，对于“友谊”的经营却更便捷，更快速，更细微化了，因为通信方式的变迁。看上去每个人的通信量都增加了故而朋友也更多了？但是人性并没有随之进化呀。表面稠密的friendship graph，实际上，各个edge的weight也并不像看上去的那么大。无往不在的枷锁呀。</p><h1 id="自己"><a href="#自己" class="headerlink" title="自己"></a>自己</h1><h2 id="其一"><a href="#其一" class="headerlink" title="其一"></a>其一</h2><p>不怎么打游戏，不怎么看番。</p><p>不怎么关注热点，包括科技，包括社会。</p><p>不敢在social media上说话，不敢水群，没有点赞的习惯。</p><p>不喜欢关于自己的照片。</p><p>不喜欢在所有人面前暴露自己。</p><p>不喜欢大的组织，不喜欢多人小组的退化，不喜欢不被搭理。</p><p>不喜欢碰到认识但是不熟悉的同学的时候被无视的感觉。</p><p>不喜欢应酬，不喜欢恭维与被恭维。</p><p>不喜欢从他人的身上看到自己的镜像。</p><p>等等。</p><h2 id="其二"><a href="#其二" class="headerlink" title="其二"></a>其二</h2><p>喜欢各式各样的童话。喜欢梦幻的环境，美好的结局。比如《爱丽丝漫游奇境》，作为数学家的Dodgeson自然也欣赏。</p><p>喜欢塞林格。喜欢没有故事的故事。</p><p>喜欢刘震云。喜欢无可言说无可表达的生命的苍凉。</p><p>喜欢余华，《世事如烟》。喜欢冷酷得看得有些难受的叙述，喜欢这样的真实。</p><p>也喜欢自己创作，乌七八糟的故事，思绪散乱的随笔，形式上的诗歌。</p><p>喜欢汤浅政明的动画。喜欢草稿的恣意，色彩的张扬，还有剧本的狂放。</p><p>喜欢《梦日记》。圆圆的树象征温暖。</p><p>喜欢马蒂斯的绘画，《舞》尤其。喜欢色彩和图案背后的洪流般的生命。</p><p>喜欢巴赫的音乐。喜欢天空。</p><p>喜欢逆向，喜欢密码学，喜欢隐写术，喜欢web，喜欢筋疲力尽而后看到“flag：xxx“的那一刻。</p><p>喜欢瞎搞，喜欢学习每个新算法时的苦涩和顿悟时的激动的兴奋，喜欢Accepted的绿色。</p><p>崇尚计算机科学家与数学家，尤其其中各个领域的开拓者。</p><h1 id="友链"><a href="#友链" class="headerlink" title="友链"></a>友链</h1><p>以文会友（可不是言在此而意在彼），是个人简单的希冀。当然以下很多都只是单向边……</p><h2 id="自己-1"><a href="#自己-1" class="headerlink" title="自己"></a>自己</h2><p>如果你能看到这个blog这篇随笔，你或许对一些文章的一些部分有一些想法？或许想交流？一种联系方式是与blog相关联的github账号，虽然通过github来交流感觉有一点点的奇怪……但是github是个交友网站不是吗（<del>划掉</del>）。</p><p>抑或，可以用更普遍也更俗套一点的交流方式，social media。鄙人的QQ号是第648647743个evil number（二进制表示中含有偶数个一的数字，第一个是evil number是0）。邮箱的话也是账号，因为并没有开其他邮箱。</p><p>我的称谓有很多（<del>因为喜欢胡乱取名字</del>），不过现在基本也固定下来只用几个了。作为successors of Alan Turing的我，作为艺术家与诗人的我，日常中的我，你们眼中的我，在不同维度下的同一个体。</p><h2 id="同期"><a href="#同期" class="headerlink" title="同期"></a>同期</h2><p>（排名，自然是不分先后的）</p><p>NCJ：<a href="https://ncj.wiki/" target="_blank" rel="noopener">https://ncj.wiki/</a></p><p>XTXTMTXTX：<a href="https://www.xtxtmtxtx.xyz/" target="_blank" rel="noopener">https://www.xtxtmtxtx.xyz/</a></p><p>chty_syq：<a href="https://chty.coding.me/" target="_blank" rel="noopener">https://chty.coding.me/</a> （那个nerds.pub好像是合作性质的，管理员还有logining等，不过其他我不认识/捂脸）</p><p>zkx06111：<a href="https://zkx06111.github.io/" target="_blank" rel="noopener">https://zkx06111.github.io/</a></p><p>知名退役选手jsb：<a href="https://www.cnblogs.com/jiangshibiao/" target="_blank" rel="noopener">https://www.cnblogs.com/jiangshibiao/</a> （其实只看学长的游记和好番推荐/捂脸）</p><h2 id="先辈"><a href="#先辈" class="headerlink" title="先辈"></a>先辈</h2><p>卢昌海（知名科普作家，物理/人文）：<a href="https://www.changhai.org/" target="_blank" rel="noopener">https://www.changhai.org/</a></p><p>matrix67（知名科普作家，数学，前OI选手）：<a href="http://www.matrix67.com/blog/" target="_blank" rel="noopener">http://www.matrix67.com/blog/</a></p><hr><p>初稿写于2019-07-21，夜</p><p>改于2019-07-23，昼</p><p>改于2019-07-26，夜，自己</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;海水退去 露出了漫漫的旷野&lt;/p&gt;
    
    </summary>
    
    
      <category term="随想" scheme="https://nessoffice.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
</feed>
