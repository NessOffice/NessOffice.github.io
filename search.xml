<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【艺术其九】runner game的困境——从“下百层”类游戏的游戏性谈起</title>
      <link href="/2020/03/22/Game-On_Runner_Game/"/>
      <url>/2020/03/22/Game-On_Runner_Game/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我一直觉得无尽跑酷充满象征意义，让人想起夸父或者西西弗斯。</p></blockquote><a id="more"></a><blockquote><p>我一直觉得无尽跑酷充满象征意义，让人想起夸父或者西西弗斯。</p></blockquote><p>这是一篇随笔，对游戏的理性的分析少，感性的认识多。</p><p>暑假的时候因为想做弹幕然后突然就想学unity。另一个原因则是之前和蒋哥合作后感觉用js做游戏不是很行。网上一搜，妈呀，都是那种几十小时几十小时的又长又细的视频，看个几分钟就会关掉而且好长时间不会再碰的那种。还好找到了个<a href="https://space.bilibili.com/370283072/" target="_blank" rel="noopener">入门up主</a>，是从例子着手的，能看得进去，学出一些小小的成就感。虽然我是从小狐狸那辑开刷的，但我对这种平台跳跃游戏无甚想法，准确地说是对其中占游戏性主要成分的level design无甚想法，最后也就只是试了试unity而并未做出一个真正能玩的游戏。</p><p>之后看了看up主的其他专辑，看到那个speed down，冥冥中似乎有了一丝想法。这种游戏虽然也很简单，玩一会就会感觉枯燥，但ln能否把这种类型的游戏整好玩起来呢，既然ln有办法对俄罗斯方块做出创新？</p><p>首先来分析一下这个游戏的机制：无尽的随机生成的平台是玩家的立足之地，顶上的尖刺与底下的深渊标志游戏结束，而平台则在种类上各式各样。我记忆中的“下百层”有这么些平台：普通型、蹦蹦床、转转、尖刺、传送带。虽然平台看上去很丰富，但其实都没什么意思：转转不能久待，传送带逆着走就会撞上顶上的尖刺，蹦蹦床同理。玩家的死法非常固定：要么是信仰一跃/被转转转后下面没平台摔死了，要么是在上面没反应过来给刺插死了。窃以为状态量的少这种游戏游戏性差的最大根源。</p><p>同理的还有各式各样的跑酷游戏，如若干年前火热的《神庙逃亡》《地铁跑酷》，这些游戏有个相同的标签“休闲游戏”，其特点是要素的随机的无尽的组和。准确地说这种游戏应该叫“runner game”，历史悠久，但一直以来就没能在游戏性上取得很好的突破，具体可以在这篇<a href="https://cowlevel.net/article/1861771" target="_blank" rel="noopener">当我们谈论跑酷游戏时我们在谈些什么</a>里找到更加细致的分析，我没深入研究过，就不再献丑了。既然无法在游戏性上吸引大众，商家一般在这种游戏上会以其他要素作为卖点，于flappy bird是社交元素，于某世界收入第一游戏公司是人物成长性，于doodle jump是视觉艺术。走视觉艺术路线的还有加拿大一名设计师Ferry Halim，<a href="http://www.ferryhalim.com/orisinal/" target="_blank" rel="noopener">这</a>是其主页，兔子跳铃铛一类游戏就是出自他的。当然现在flash被淘汰这些游戏玩不了了，真是世事多变啊。</p><p>回到我们的下百层的话题上来。因为平台的丰富对游戏性并无增益，而我又无法想到有趣的平台，就先设计了三种平台：普通型和转转，外加一个铁球，并把转转相对玩家的质量增大，这样一来玩家便通过技术在转转上保持平衡。同时把转转的比例搞到最多，这样玩家就不能像常规的下百层一样安逸在普通型上了。还有就是把难度系数拉大，随时间增加游戏速度越来越快。这样测试了一下，确实好玩了一些，但玩着玩着还是感觉很单调，因为死法没有变，总是在速度过快之后反应跟不上就啪一下掉下去然后就没了。</p><p>思考一下，这种游戏总是啪一下掉下去就没了，那么能否对此做出改变呢？我做个飞行功能，就能避免这种死亡的发生，但飞行不应该是无限制的，那么我可以设置一个飞行能量，平时都会减少，但是在转转上的时候就会增加。这样测试了一下确实好玩了一些，而且游戏的阶段性增强了：初期到转转上蹭能量，中期就飞来飞去，后期看脸。但是一趟不过三分钟，打多几次又能发现游戏性差了。而且就玩法而言这已经是一个新游戏了。我也改不动了——总觉得不管怎么改游戏性总还是短板。</p><p>本来觉得这些游戏的限制是画面大小的固定，但细想俄罗斯方块不也只有一个画面的大小么？但里头的组和就多，可以加技能，可以加方块种类，可创新的点很多。这个游戏的状态是连续而非离散的，但归类一下也就没几个状态，根本无从创新。</p><p>runner game游戏性弱并不代表这些游戏缺乏价值。无尽的奔跑本身就有足够的象征意义，玩家玩这些游戏的行为本身也颇耐人寻味，使我们想到存在主义或其他。runner game虽然看上去都差不多，但几十年来还是有所发展，如flappy的极简，doodle jump的可爱。我相信几十年过去后，仍有人在开发这样的游戏，仍有人在玩这样的游戏。</p><p>最后推荐两个runner game，其一是<a href="https://store.steampowered.com/app/253030/Race_The_Sun/" target="_blank" rel="noopener">race the sun</a>，讲的是未来世界夸父追日的故事，游戏在设计上简约而不简单，带有一定的成长性，寿命约为3h+。个人比较喜欢这样酣畅淋漓的速度感，很带感很解压。另一个是<a href="https://store.steampowered.com/app/253290/FOTONICA/" target="_blank" rel="noopener">Fotonica</a>，游戏性相对前者弱一些，但在剧情上更加荒诞，我很喜欢它的设计感与速度感。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【围炉夜话】永隔一江水——《1980年代的爱情》简评</title>
      <link href="/2020/02/04/Comments-Films-Love_in_1980s/"/>
      <url>/2020/02/04/Comments-Films-Love_in_1980s/</url>
      
        <content type="html"><![CDATA[<p>看得胃疼👍</p><a id="more"></a><p>上汇编课的时候小白放了一段这部《1980年代的爱情》，印象不错。听到他说是悲剧印象就更好了。于是寒假的时候看了一遍。影片的情节波折，人物立体，音乐悦耳，风景优美，细节考究，同时悲哀的意味非常浓重，个人非常喜欢。</p><p>故事情节和时代背景关联是比较强的，这不仅体现在故事的背景设置上，更体现在人物的思维模式上。八十年代初，大学生雨波毕业后被分配到老家山上做基层宣传工作，他因大材被小用的怀才不遇而苦闷而烦恼，成日借酒浇愁，抽烟写诗。在分配社，他遇到了自己暗恋的初恋也是高中时的同桌丽雯。于是他们从疏远到亲近再到疏远，影片讲述的大抵是这样的一段悲剧性的爱情故事。</p><p>影片中阻隔二人爱情的矛盾一直是隐性的，而非显性的。为什么丽雯始终不接受雨波的表示呢？因为她希望他能远走高飞，闯出一番事业，而不是为自己而局限在这大山里。这与她的家庭背景也有关联，因为她爸正是为了她妈而选择留在了山里。而雨波的思绪始终是徘徊的，他既喜欢丽雯，向往出世的生活，又并非将出世作为自己真实的愿景，因为他缺乏战胜一切困难的勇气。入世与出世之间的矛盾，是这部影片的主要矛盾。</p><p>这样的矛盾看似在各个时代都普遍存在，但影片选择”1980年代“确是别有用意的。这是改革开放初期，各种思想潮流涌向人们，许多抓住了时代机遇的人们成功改变了自己命运的方向。这是一个充满变革充满未知的时代。每个时代有每个时代的故事。假如故事背景设置在50年代，60年代，70年代，那么故事，都会朝不同的方向发展，而且我倾向于认为这样一来故事会变成一出爱情喜剧，但是这样一来，故事也就变成丽雯她爸爸和妈妈的故事了。</p><p>片中的人物也明白这样的矛盾，他们向往爱情，又无跳脱出自己生活框架的勇气，于是影片中的人物常处于纠结的状态，在相处的快乐后会感到忧伤，在一起时也半天说不出一句话而神色凝重。所有的喜悦在回忆中都会化成悲伤，比较典型的如他们收渔网的那个场景，雨波看着丽雯戏水，看着大好的祖国山水，一切都安静和美，”心中升起，万千惆怅“。</p><p>片中的人物设定非常不错，主人公雨波和丽雯忧郁的气质比较浓重。印象比较深的场景是雨波倚着墙吹笛，还有丽雯在雨波离开前最后一晚与他相隔一间门流下的眼泪。</p><p>说到吹笛，影片中的音乐都很应景，空灵婉转，忧郁的气息滚滚而来。（不仅仅节奏，也表现在名字上，如《永隔一江水》）</p><p>在雨波离开大山后，影片的叙述节奏加快了，集中表现在场景间的跳转，一下若干年（当然，这一段有些争议，个人不是太喜欢），一下若干年。但是这并未造成影片在结构上的混乱，而是加强了影片的悲剧意味，升华了结尾。1980年代已经结束了，曾经的爱情，再也回不来了。</p><p>所谓伊人，在水一方。</p><p>也只能在水一方。</p><p>（虽然是1980年代的爱情，但感觉更适合年轻人看吧，毕竟电影比较理想化并不符合多数人的生活，其中的一些细节如服装等也与历史不符，但总的意境相当不错）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 批评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【朝花夕拾】吉静文选 求学记</title>
      <link href="/2020/01/28/History-My_Essays-On_Study/"/>
      <url>/2020/01/28/History-My_Essays-On_Study/</url>
      
        <content type="html"><![CDATA[<p>求学（无误）。</p><a id="more"></a><p>（版权所有，严禁转载。违者自行承担相应法律责任）</p><h1 id="求学记"><a href="#求学记" class="headerlink" title="求学记"></a>求学记</h1><h2 id="一-杭州·北京"><a href="#一-杭州·北京" class="headerlink" title="一 杭州·北京"></a>一 杭州·北京</h2><p>我打算“好好学习”始于何时我已记不清了，起码不是去陪尖那次。当时我只听了一半的课，听时草稿和笔记打在一起，字迹潦草难辨。较深的印象是我当时刚学了C，和蒋哥一同商议写游戏，叫“Number Kill”。晚上和蒋哥聊设定：要写个商店，多添几个BOSS，开发合作模式……很是激动。同寝五人，除了我们大家都在自顾自地玩手机。有一晚海哥讲鬼故事，故事很无聊，其他人都听睡了，蒋哥却被吓跑了。陪尖的菜不怎么样，但很多人在一起吃很热闹。没待几天，我和海哥就上北京参加科幻作文夏令营去了。</p><p>当时我还没有手机，只带了两本书，一本钱穆，一本刘汝佳。我在路上就闲得发慌，到了那边更是如此。身边五湖四海的同学（被打乱了编排）都有手机玩且基本都在玩手机。那边有很多讲座，但我没记笔记，今天就只记得有个北大教授叫陈跃红给我们讲过课，他以前是挖矿的；还有个“超侠”老师给我们拓展想象力。我在比赛前看了许多有深度有趣味的科幻作品，可决赛题目却是“未来的学校”。学校……我没捞到什么奖，尽管获奖率很高。无聊个四天，最后住了酒店，看视频看到一点多，就回来了。</p><h2 id="返校-一"><a href="#返校-一" class="headerlink" title="返校 一"></a>返校 一</h2><p>回来后记得很久都没出去过。待在学校里不是很无趣，只是缺乏那种自由的感觉，做事要提心吊胆，“翻车”几率很高。高一放假时我和安南·谢尔梅斯·秀把物理办公室拓展成“基地”，技术办公室则是几乎从未启用过的“第二基地”。一开始我们每天去听十份听力，之后听歌时被林巍一句“你们在玩游戏啊”吓了回去，再之后和林巍打成一片，有了畅游的权利。那时晚上可以在校内乱荡，我们就驻扎在办公室里，不时被闻灯而来的浪子惊动，不过永远受的只是虚惊。放学了，闯进食堂里，吃，吃；踱回小店里，买，买；返回寝室里，狂欢。寝室里只住着我和安妮·雪莉梅斯·秀二人，灯何时熄由我们自己决定。有一晚打了热空调，上铺下铺完全是两个世界，我就上去枕着昊哥的被子膜絮。还有一晚安南秀在床上写作业，居然就睡着了，我也便熄了灯，倒头睡去。明早五点多就起来了，摸着黑闪进办公室里，边玩边看外面东方既白。还把方便面带到办公室里作午餐，边吃边玩。现在不能这样了，因为他们之前在政史地办公室玩“暗黑3”被抓了，波及了很多人，学校就管得越来越严了。</p><h2 id="二-杭州"><a href="#二-杭州" class="headerlink" title="二 杭州"></a>二 杭州</h2><p>高二时我们又能出去，“一式”“二式”的人都有，两个旅馆，物理数学混排。我和海哥同寝。我还没手机，带了《红岩》等书。晚上看电视，各种台，看得不是很深入。那段时间我电阻率比较高，碰着什么都能静电，于是连开个灯都得小心谨慎。这次我可能打算“好好学习”了，就在第三天去买了笔记本，字迹依旧潦草，题目间分割线粗犷。值得一提的是吃饭，那条街两侧有许多餐馆，有一家“必胜客”，听说没有半个小时内送得上的菜；“肯德基”或曰“KDJ”，我们几人常去；寿司店，一家小店，有会我买来寿司把芥末当番茄酱吃了，花了一整瓶饮料才止住泪水；中餐厅，几个人一起吃老便宜了；神田川拉面，饭相当不错，可面我们不敢恭维，那面是用很高的碗盛的，我戏称之为“高碗”，说得蒋哥脸颊升起一片绯红；还有面馆、沙县、西北牛肉面……因为来的人很多，常常能在路上遇到同学，感觉整条街都被我们学校承包了。“十足”在街的另一头，我们后来在那儿补充零食资源。到了那一头再走过去有一巨大的天桥。对面有家“大神网咖”，壮男某夜自修失踪后我们戏谑他来这里笙歌不止。“KDJ”旁边的里面有规模奇小的新华书店，奇葩在那买了本《美少女7000例》，下课时翻看，为同学的女生所啧啧称奇。那些老师中规中矩，最有意思的当属“王教授”，他是北京人，北师大的，讲组合。他说话很风趣，像说书人，讲“三李闹中华”，讲自己玩一个游戏叫“Tesla”，讲单墫老师一趟飞机就写完了IMO120题。最后一晚我想放浪不羁，拿出量子物理学史看了好多章，凌晨一点出门看杭城未眠，还买了“KDJ”的早餐当夜宵吃。这样白天自然是会“小鸡啄米”的，但总归总，八天也就这么过去了，即使让我重来一遍，我相信我也学不出好来。对了，来来回回也值得一提，因为人比较多，所以是包的大巴。我喜欢在大巴车上坐上很久，因为有去远方的感觉，尤其是与同学一道。去时我在听听力，听得清清楚楚，完全不用回放，一连七八篇听下来，迷迷离离，如梦似醒，别有一番风味。回来时看书看得头痛，倒不太舒服。只记得暮色四合，汽车在昏暗的四下里探索，橘红色的温暖灯光照亮我们回家的路。前方就是家啊，家。</p><h2 id="返校-二"><a href="#返校-二" class="headerlink" title="返校 二"></a>返校 二</h2><p>高二到高三时候学校请老师次数多了。沈特请了好几回，有一回我们没怎么带东西就上去，发到六道老题，“刷刷刷”写完了，只能听他讲一个钟头的“理论”，他说“你们能写出这些题目很了不起”，挺搞笑。谈到请老师，高一时请过一个白胡子老头，口音很标准。“欸欸曾以欸杰等鱼欸开”（$a_i×a_j=a_k$）。这小子讲到八点钟还剩一小题，我们以为很快能回家了，而他就这小题讲到九点钟，黑板写了两面。高三上请了一批老师。有人过来讲了一上午数学史，下午有个高考命题组组长讲着讲着穿插几句高考那些事。李胜宏鞋子很是破旧，趿拉着一条长带，而且他声音气息很重。还有人过来普及“高等几何”。那时高二也来听课，课间他们玩很低幼的游戏，就是玩石头剪刀布胜者可以YY自己怎样把对方怎样怎样，这在小学生中尤其流行。“朱哥”也玩这个。还有一位马脸的同志，长相奇异，有人呼之为“火爆辣椒”，但我感觉“朱元璋”这外号更胜一筹。我们的作战阵地是不固定的，备用教室、阶梯教室、物化实验室我们都带待过，还有回我们在音乐教室与美术教室间辗转。现在上三一也要开拓疆域，但没有以前那种感觉。</p><h2 id="三-椒江"><a href="#三-椒江" class="headerlink" title="三 椒江"></a>三 椒江</h2><p>椒江是去上海前的最后一站，因为信息竞赛，差三分一等奖。比赛前我们挺活跃，刷UVA，刷“CodeVS”，刷“luogu”，不亦乐乎。开赛前我和蒋哥还参加了一项模拟考试，在网上，于是我们边考边用QQ交流想法、互通有无，在阳光下作弊，爽得很，虽然结果不怎么样。当天中午我们就走了，听林巍讲监考轶事。沿途看到有人出车祸死了，觉得人命就这么便宜，有点悲伤，有点头痛。考试中数据结构题稍多，我不是很熟练，做得不怎么顺。考完了也就这样，有点烦，不怎么想复习以为能翘掉可还是要补考的语文，就把顺来的答案背得翻来覆去。回来依旧是暮色四合，我们还没吃东西，饥肠咕咕。本以为能下家高档餐馆，谁料最后就着学校旁边一家“江西小炒”解决。馆子脏兮兮的，桌子下会窜出只猫，邻桌还有位工人小哥，指点江山，相当激动，引得我们众人窃笑不已。我因为“江西小炒”没什么食欲，蒋哥亦然，第十一星东京时却扒了不知五碗还六碗白饭。今天这家店已经被拆掉了，因为旁边搞施工。</p><h2 id="返校-三"><a href="#返校-三" class="headerlink" title="返校 三"></a>返校 三</h2><p>这之后大概就是我“游戏校园”的终结吧。高一时我搞了个<em>HIT THE BOSS</em>，是模仿<em>Anti-Idle：The Game</em>做的，小游戏的集合体，游戏里套游戏。那时我玩“Idle Game”（放置类游戏，2018年初大热的《旅行青蛙》就是这类的）。这种游戏形式独特成瘾性强，我曾把一整个暑假浪费在上头。我后来把<em>Cookie Clicker</em>，一个热度曾超过<em>GTA5</em>的Idle Game安利给奇葩，那个暑假我们就一起种饼干，在物理办公室，在政史地办公室。在办公室的日子我和奇葩玩的时间很长，不过就跟暑假一样，当时可爽了，事后啥事都记不得，很空虚。记得初会林巍第一天我们安安分分听听力，第二天开始听歌，ACG风格的，听初音，听东方，听洛天依。之后被他当场抓住，把程序界面调出来，把他给幌过去了。我后来搞了一个文字战斗游戏，是文字型的回合制RPG，五脏俱全，可以从“水果刀”打到“王威”。蒋哥后来那个《火箭杀》就是在这基础上弄的。蒋哥喜欢和别人分享新闻，那时是和江如花。花哥喜欢用雄壮的声线宣扬蒋哥的事迹。于是一传十，百传千，世人皆知蒋哥而不知我也。加之蒋哥喜欢加入比较粗糙的东西，每次更新都会制造一堆槽点，群里热闹的很。这个群好像有一年没讲话了，曾经热闹的“抄作业大队”。</p><h2 id="四-上海"><a href="#四-上海" class="headerlink" title="四 上海"></a>四 上海</h2><p>下一步是上海，上海明星荟萃，余红兵、冯跃峰、冷岗松、张思汇、何忆捷、边红平、蒋易志、姚必巍……智慧的名字在眼前走马灯似的换来换去，而我从他们身上学到了什么？漂亮有序的笔记看着舒心，但不久就显示出其不实用性。关于竞赛我有过一些思考，就不放在这里了。搞竞赛多半搞不出成绩，搞出了成绩也还得一直搞这个，搞冬令营，搞IMO。路漫漫其修远兮。我并不狂热于中等数学，我也缺乏应有的有独到的思维能力。我只是浑浑噩噩，将放浪指作幸福。睡眠不佳的困顿、似懂非懂的烦躁与对前路的迷惘始终笼罩着我。我相信不止我如此，大部分的所谓求知之人也同理，而这是我们自找的。</p><p>那时我们住“来来大酒店”，全酒店就一WiFi。因为“lailaihotel”信号很差不时会断，海哥常常边玩边骂。酒店三楼我们上课地方旁边是家“网鱼网咖”，可那WiFi我们接不进去。“huiyishi”同样很菜。酒店下面是美食街，有家“李慧周秀製排骨”尤为坚挺，信号常常可传到会议室，甚至15楼都还有它的信号。头几天我们到远方的“肯德基”解决肚子问题，无奈那实在太远了，后来我们就去楼下的“汉堡王”了，这也是家西餐厅，美式辣堡加小可乐加薯条共17元的配置尤为实惠。那几天它广告上有“很牛堡”“劲牛堡”“爆牛堡”“超牛堡”，还有什么“皇堡”，看看很夸张，实物则小巧玲珑，很可爱。要不就是“永和大王”，15块一份的三杯鸡饭同样喜人。其他的餐馆我们基本都吃过。有家叫“跑马地”的售粤式美食，铺子很大不过食客寥寥，看着很高端，其实也不贵，菜色佳且量足。粤语背景音乐很有气氛。只是这里耗时间。放假那天我们就是在这里吃的，等了40分钟。有回我们见员工出来还跟她打招呼，就跟在和老家小店员工打招呼一样，这是在上海大都市啊。</p><p>因为带了“车”，午间晚间可以看动漫等。我看完了《柯赛特的肖像》《魔法少女小圆》，《空之境界》读了五章，晚上睡前翻翻冯骥才，周国平讲尼采那本在路上看完了。睡前我抑或看B站视频，我很喜欢的一名up主是warma，医学院学生，声音很甜，带长沙口音，会画画，会写游戏，挺活跃，喜欢母鸡，爱卖蠢，做的视频大都很欢乐，能叫人开开心心。还看了《JOJO的奇妙冒险·石之海》，这部漫画弘扬人文精神，人物一律有强健的筋肉、智慧的头脑、带感的动作与特立独行的姿态，看得我深深感动于人类与自己的伟大，但我在带着这份感动写题目时，感到的只有不合时宜与自己的猥琐，心中闪过一阵阵叹息与失落。《小圆》越看越精彩，很有深度很有表现力，但看着看着会感到人物的痛苦与悲惨压到自己身上了，会无谓地“思考人生”，挣脱不了那种迷惘苦痛急求解脱的心理。因此我睡不着，就起身翻书，重估了《尼采：在世纪的转折点上》，于是抑郁被激情战胜。酒神的车舆辘辘，意识战争锣鸣不止，永恒之轮静观一切。那晚我很晚睡，饮“酒”而估之，醒时精神健硕有力。“酒”我今天还放学校里，留作纪念。</p><p>到了晚上健健身，因为什么都不懂，随便点了一套“马甲线养成”，每天到点就开练，八九天练下来，倒也觉得挺像样。以后回学校我就不成天坐着了，下课走动走动，心里觉得自己健康了不少。在上海我妈有时会给我发消息，不再是什么走路小心吃饭啊睡觉啊这类话，说的是杂事——我就喜欢杂事。语言挺有意思，什么“玉环今日风雨大作”，怪好玩的。发来几条信息的，叫人看见了很高兴。这是我生活中为数不多的对我妈有好感的阶段，只是我只能干巴巴地回复“嗯”“哦”，干燥。倒是我爸这段时间没怎么与我联系，我发去题目也没回应，想必是身体状况不佳无心答复，我也就暗自不快，把题目问了别人去，不管不顾我爸。现在回想起来这样子挺悲哀的。</p><p>到上海的第一晚我们去购物，买了一个钟头。把琳琅的商品装入购物车，看着它逐渐充实，这多么令人欣喜啊。放假那晚我们又去买了一百多块，袋子渐吃渐空。一般我们中午下午放学后都回去楼下小卖部买两三小包，房间里的零食量于是维持着动态平衡，故一回去我们就能“开包开包”“海哥，开包”。到了杭州我们也采取同样做法。故宾馆房间在我印象里有糖果屋的味道，甜蜜蜜。</p><p>因为我们报了两期夏令营，中间得以空出一天休息。前一晚我看《小圆》正看到忧郁，而海哥据说熬到了三点。早晨我去汉堡王买早饭，回来时他仍睡得很安详。这些餐厅都爱弄些噱头，门口写着“早餐六元起”，我买一个汉堡就花了十九块，里面的猪肉薄如蝉翼。吃着这么可怜的猪的肉，我后悔不已。其实酒店的早餐是相当好的，自助餐品种多味道又好，只是吃多了想换换。再看漫画，再看小说，再玩游戏。那时海哥安利我玩《钢琴块》，这种游戏易上瘾，我每天就玩二三次，每次五至十分钟。玩了一上午，玩了很多方面，觉得挺充实，随后又觉得这样很空虚：还不都是玩，有什么大差别。于是写作业，我平时也有写作业，但总感觉很烦躁，写不进去。这天我也一样，越写越心慌。我只带了英语作业和数学竞赛作业，前者包括密密麻麻的单词表，填了八九日都没填完。实在是越填越烦，然后突然想开了，划一个大钩，完事。还有本作业是续写概要的指导，每天花个四十分钟只能写丁点儿内容，而且感觉学完“微技能”后自己仍然很菜，后来就索性不动这本书了，回去任她骂吧。海哥去前信誓旦旦要好好学竞赛，结果到了房间就被那个发光小长方体抓住了灵魂，每回都稍低着头，手指灵活地滑动，不时“呵呵”，或“他妈的”“哎呀”，边拍下大腿。他唯一写的听力也得晒三天网才能练就一篇，不过后来他很认真，一天写两篇听力，只花两分钟。那天蒋哥早晨问我哪儿有理发店（他妈管的真严），我在地图上找了家“东瀛造型”，价格都几千几千的，很潮流，一下就把蒋哥吓住了。之后我去他房间联机MC，听闻奇葩说要去“动漫城”看看，顿时来了兴致，规划了一番，才知这小子是从“爱问知识人”上打探到路线的。都2017年了，还有人从这种古代网站上收集情报，还不看那是05年的问题。我正想用手机地图找路线，无奈“lailaihotel”再度抽风，只得作罢。海哥4点时突然倒床入睡，5点多才醒，睡姿销魂，想必是昨晚过得太滋润了。我们买了几份“霸王鸡盒”，顺带给海哥留了点餐。这“霸王鸡盒”听说奇葩每天都当夜宵吃，无怪乎之后他的肚子那么圆润有福相。那晚，如前面所说，我们去买东西了。总之这真是充实而放松的一天。</p><p>在那边听音乐也值得一提，和在杭州拼起来讲好了。我比较喜欢民族音乐，偶然找到首《黑田節》，是日本老男人用那种悠长的简直有点猥琐的音调唱的，喜欢的不行。还听到美国乡村风格的民谣，有种淡淡的忧伤。还有凯尔特民歌，一首词与词间抑扬顿挫，一首像是一口气唱到底的。我个人有对古典乐的偏好，尤对巴赫。那些曲目我记不太清，只记得那样的和谐，如同仙乐。二次元为这个时代年轻人的所好，我也听一些ACG风格的歌，但听多了会腻。我最喜欢的ACG作曲人是川井憲次，他的作品有史诗般的恢宏感，融民族元素与现代风格于一身，磅礴大气，震撼人心。我在杭州时最有印象的一首歌即他的《傀儡谣》。此外，梶浦由纪也不错，但我听的不是很多。以后在杭州时，我是每个回寝都会找歌听，于是耳边总萦绕着动人的旋律。在上海时我还听电台，但很多我不大喜欢，只仔细听了一个一个妹子念《人类简史》的节目，声音好听，内容丰富有益。回来后我买了部《人类简史》，还没看完。</p><h2 id="返校-四"><a href="#返校-四" class="headerlink" title="返校 四"></a>返校 四</h2><p>上海就这么过去了，这次经历最丰富，但我也想不起什么来了。回来又干了什么呢？听姚必巍讲数论讲组合。这小子讲组合很搞笑，他叫我们买了书，自己讲课时候也捧着书，一行一行读下去，“述而不作”。我们想他要是到外面去讲课，也每人发一本书，接着就读书，免不了还说几句“同学们，这道题我也不会啊，你们自己看书吧。”然后就是一直搞模拟题，讲试卷。二试中有四道题目：几何、代数、不等式、数论。虽说只有四题，但常常没一道看了有头绪，考试时间多半是用来发呆、走岔路的，或是从同学那边借鉴一番。我做试卷，几何可尽建系之能事，组合则以特殊情况加之“说理”以诓小斌，代数不等式我稍擅长一些，实在不行也可以“穿靴戴帽”水点分数。那时我们可以一天都活跃在楼上，翔中阿狼们因此车开了不少。他们中午准时睡觉，拉来六七张桌子，躺成一个“大”字，一顿睡两三个小时。阿狼在杭州时被誉为睡神，上课期间，睡眠无阻，睡得那叫个昏天黑地，物我两忘，把酒临风，可谓潇洒至极。奇葩睡觉时头先如摆钟一般规律地运动，一俯一仰，俯仰之间诠释着宇宙的真谛。海哥睡觉时头是高高地后仰着，如佛像一样岿然不动、安定自若。方舟则是如尸体般溘然长逝，但临近吃饭或下课时会“自然地”醒来，呼朋引伴，谈笑风生。JO男睡觉时嘴角涎垂欲滴，花哥曾以超现实主义的手法描摹了他画像。黄牛有朝去补牙，腮帮子肿成蛤蟆。蒋哥尝用草稿本做了套扑克好和我们“斗地主”，那个午间于是惊叫欢呼声不息，蒋哥只得到物理班睡觉，却被方舟传染了感冒，下午吸呼吸呼个不停，晚上还进了医院。物理班发明了“益智球”，惊险刺激，有甲级联赛乙级联赛，竟引得化学班游子常驻于此。晚上回寝，听张籍讲化学班轶事，说他们在微格教室传看武侠小说，玩狼人杀，学习王威语录。时间之流终将抵达尽头，那是在杭州。</p><h2 id="五-杭州·杭州"><a href="#五-杭州·杭州" class="headerlink" title="五 杭州·杭州"></a>五 杭州·杭州</h2><p>在上海在杭州我的配置差不多，在杭州我未带iPad，将冯骥才换了本王小波，一开始每日一篇，后来感觉越看越精彩，书都合不起来。当然冯骥才也精彩，不过我不大喜欢我那选本，里面太多“应用文”。午间则听音乐，晚间则看视频。杭州放学时间晚上海一小时，故稍微吃点东西看点视频就差不多该睡了。我那时没看小说，都在看视频，《兽爪》《吸血姬美夕》《南太平洋》，晚上有时也写写随笔。我们食宿学习在“浙江省社会主义学院”，房屋的风格很社会主义，寝室空间利用地充分且紧致。饭菜是统一分配，但不是忆苦思甜饭，每顿必有水果，肉有三四盘，光虾就有甜虾、胡椒、鳌虾等数种风味。饭菜虽好，可要集齐十人一桌才可开饭。有些时候我们就对着饭菜，对那没来的边等边骂。第一晚我和蒋哥垂涎肯德基，出了学院跟着地图绕了九曲八弯才到目的地，买得天都黑了，回来时走夜路，很有探险的味道。海哥开始要我叫床，之后索性叫不醒了，在楼下小店购得零食当早餐，要上课了才来。有回他们集体迟到，半个小时内后面座位都空空如也。翔中有时上课飙车，与交警小斌斗智斗勇，但不免因开快车给吊销了驾照。有夜翔中流量快到期了，就在晚自修连看了三节课电影。阿狼则翘课观赏跑男，被抓回来后怒怼教导员。那儿有个妹子五官很端正，头一天穿了白丝凉鞋，往后就没这么穿了；还有女生穿了七天的白高跟鞋儿。讲师照旧是名流大腕，李胜宏、边红平、曹珏赟……边红平说话是湖北口音，声音雄浑有力，从不讲笑话，一直都是下一题下一题下一题下一题，或者“开始啦！”曹珏赟讲几何，题目每每做到山穷水尽之时便添上几条辅助线，到最后图形面目全非。晚上有考试，大家照例是“通力合作”。起初我还算认真听，最后两天没动力了，反正考试也快到了，结果那老师讲得还不错。身子听着课，心里想着快离开，我隐隐感到一丝悲哀。</p><p>杭州有两阶段，第一阶段就这么结束了。于是我们迁徙至下一站点，逢天大雨，道不行，就找了个屋檐下，打开MC就是玩。虽是随便玩玩，和人一起玩还是有趣的。我去挖矿，回来在地窖里挖了个家，做小隐。雨时有小学生撑伞回家，小斌在一旁热心地喊“小心啊小朋友”；之后看见有比我还高的小学生走过，小斌也就没说话。雨后不久就走到宾馆了，这家很中我意，楼梯间悬着丰子恺的画，走廊里是简单和谐的线条，感觉有些蒙德里安，房间里则以同样的线铺陈。在那里吃饭没多少可讲，因为对面虽是条小吃街，但房屋都很低矮，店牌子也都没听过。有家售西餐的店面特小，走廊仅容一人过，可乐是罐装的，汉堡口味奇特。这竟还是家连锁店。有家正新鸡排，老板贼壮，服务态度很差，我们之后都不在他那里买。杭州车神遍野：有人自行车骑得东歪西扭，颤颤巍巍；有人紧贴栏杆骑行，搞极限操作；斑马线前红绿灯一变，一支车队就浩浩荡荡波浪般在面前扫过，蔚为壮观。物理班何我们住一个酒店，早起买早餐时会撞见他们一个个小学生般三三两两赴学军自习。某日下午我订来麦当劳，这是我第一次点外卖。考试前一天下午我们亲自走访那家麦当劳，又跑到远方的超市去买巧克力，前前后后花去约莫两小时。那天我一点竞赛也没看。此前因为全天日程均由自己安排，日子就成了块腐肉，除了糜烂，还是糜烂。小斌见我们太散漫了，遣我们往学军自修，虽然人在看书，但是新看不进去。我把竞赛看成了英语，几张资料翻了又翻。回了房间，宅上一天，临时做了玩耍计划，到今天已经全忘了。记得看了堂《东西方现代艺术》，清华大学公开课，李睦教授的，很有激情，挺能给人启发。这些天我又找到小说看了，葬仕的《夜之幻灭》，乘动车前恰好看完。罢了，日子烂着烂着就烂完了，我在考前那东麦当劳西巧克力的征途中终于在黄昏中感到了放松时不曾感到的强烈的迷惘：我在去哪里？我要去哪里？</p><p>时候到了。早上到浙大，开考。中途巧克力没吃完。回来，在平和的日光中，惊讶自己做不出答案仅三行的题目，还搞错了这个那个。一切都结束了，没有一丝悲壮，唯有几分凄凉。</p><h2 id="返校-五"><a href="#返校-五" class="headerlink" title="返校 五"></a>返校 五</h2><p>往下追溯没有意义。尽管班风移旧浮躁，尽管他们开车开得更凶。还是回溯吧。</p><p>在学校最主要的功课是上课。艺术课一直是看视频，看陈丹青，看《从卢浮宫到紫禁城》。我喜欢八大，喜欢徐文长，喜欢巴比松。音乐课我参与度不高。晚读课是聊天的好时机，能讲笑话，能探讨话题。翔中晚读读着读着会读出“阿狼杆菌”“营养物质如潘忠栩等”这样的内容。</p><p>至于文化课，小斌上课上到激情之处会大谈当今社会问题、青年责任而置教学于不顾。小斌的口语很富感染力，记录下来倒没感觉，就不举例了。晓华的话，就是“哒哒哒，哒哒，哒哒哒哒哒哒哒”。还有土哥、恩少、华仔、二叔、海狸……一个外号就是一段故事。这里最惨的还数华仔，在往届都被尊为“教授”的，到这届就成“华仔”“辉华锅”了，成了和蒋哥同类惹人怜爱与调戏的角色。</p><p>班队课以前是我们自己组织课题的，能玩游戏，推书推游戏，聊一些话题。QB那次讲“选择”，课上有思想实验，有人生经历，有美国诗，互动地很好。班队课到高二就介绍大学了，千篇一律，没多大意思。高三次次考前指导考后分析，功利。</p><p>我最喜欢的文化课是信息，不过仅限高一。高二起就天天磨试卷了，试卷上全是坑，没半点思想，如果有也给稀释掉了。技术是让你天天磨试卷的？浙江省教育厅，愚蠢。高一初识VB，我那时候还什么都不知道，会用计时器、全局变量、自定义函数都会很兴奋。之后学C语言也像发现了新大陆，但学了C才知VB是古董了，没什么人拿VB写游戏，我也玩不转C，也不愿重拾古董，也没什么游戏构思。越学越在歧路，早无当初懵懂的快乐了。其他课也一样，越学越凉。</p><p>以前班里会出班刊，《听雨轩》，出了四期，我只在里头投了两期科幻，文章虽然幼稚，但我觉得就思想深度还有情节构思而言它们还是不错的。</p><p>班上流行过很多文化，很多都忘了，就讲一个吧：名字后缀。“江如日中天”“潘忠栩栩如生”还算正常，“曹斌吉娃娃”“王莹光闪闪”“叶翰韬粪男孩”“陈轩昂头挺胸”“王威猛先生”“王德海阔凭鱼跃，余日天高任鸟飞”就比较有意思了，最经典的还数“王威微一笑很倾城”了，这是江如花发明的。江如花坐台上时进行过一些简单的黑板艺术创作，如“矢婉——C10H22”，拆名字作画等。其他还有什么？我也记不得了。</p><p>再往前就是提前批时代了，那已经很模糊了。我那时有记录生活，参看那个比看这里更有意思些。提前批考中真个是高兴，像在天上飘，那时我想：我以后要好好学习的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 回忆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【图灵之路】踏过的坑（2020-01-25更新）</title>
      <link href="/2020/01/25/Other-Programming_Pits/"/>
      <url>/2020/01/25/Other-Programming_Pits/</url>
      
        <content type="html"><![CDATA[<p>伤痕，与并不美好的记忆……</p><a id="more"></a><p>（不定期更新，一般心情好的时候会咕）</p><h1 id="2019-04-15"><a href="#2019-04-15" class="headerlink" title="2019-04-15"></a>2019-04-15</h1><p>Merge的函数题，没有保存变量就直接elem[i] = elem[j++]，导致数据丢失。从22：06：04到23：26：41，提交共十次。</p><h1 id="2019-04-16"><a href="#2019-04-16" class="headerlink" title="2019-04-16"></a>2019-04-16</h1><p>大数阶乘，压位做法。在j从0到len遍历的前提下把res[j] *= i和res[j+1] += res[j] / MOD混在一起写，这样的运算顺序是有误的。从1：36到1：52。</p><p>最近点对问题。将Points_x与Points_y混淆以致造成了难以发觉的错误。疯狂对拍但几无成效，在四个点的情况下还是直接调试更能发现问题。一开始在Merge中使用了n导致超时。从18：30到20：00再到22：00。</p><p>文件名的问题倒是一下就能发现。</p><h1 id="2019-04-17"><a href="#2019-04-17" class="headerlink" title="2019-04-17"></a>2019-04-17</h1><p>有序序列中位数问题，一直纠结于二分，没想到顺序一下就成。思路没打开。</p><h1 id="2019-05-06"><a href="#2019-05-06" class="headerlink" title="2019-05-06"></a>2019-05-06</h1><p>凸包旋转卡壳的算法中，用$&gt;$出现了问题，换成$\geq$则没事了。凸函数不一定严格单调啊。</p><p>调试时候把数组改小了记得做标记……不然看到RE很惭愧。</p><p>括号很多的时候记得检查，否则调试起来心情差。</p><h1 id="2019-05-10"><a href="#2019-05-10" class="headerlink" title="2019-05-10"></a>2019-05-10</h1><p>这一个标题下尽是，愚蠢的问题和糟心的状态……</p><p>5月8日期中考，旁边的人键盘敲得很响，想起了校赛时候的不适应，我的心境仿佛又回到了高中时代……偏执、疑虑、焦躁……今早的离散考试时状态亦复如是。</p><p>得冷静下来。这不仅是关于programming的问题了，它关系我的学习观，关系我对自己与他人的看法。Just admit it, scorn it, surplus it.</p><p>最后，“Cheers to the goddamn life, society, and everything.”</p><p>①他妈的”由裁判实现细节不表“！Sample都跑不起来的代码就交上去，这是计算机学院的学生做的事情吗？但不光是这一项，对dev的不熟悉，对于win7环境的不熟练还有内心世界的混乱都给解题的过程添了不少堵。一项一项的，都给我去死吧！</p><p>猪头临沂大学的漂亮代码是这样得：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span>  <span class="keyword">int</span>  KeyType;</span><br><span class="line"><span class="keyword">typedef</span>  <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  KeyType *elem; <span class="comment">/*elem[0]一般作哨兵或缓冲区*/</span></span><br><span class="line">  <span class="keyword">int</span> Length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">CreatSqList</span><span class="params">(SqList *L)</span></span>;<span class="comment">/*待排序列建立，由裁判实现，细节不表*/</span></span><br></pre></td></tr></table></figure><p>那这个CreatSqList怎么实现呢？从Sample可以看出是要先读长度，然后一项一项读进来。因为参数是(SqList *L)，所以下面都要用-&gt;，直接L.Length就报错。但是实践之后发现只能读Length，读elem就会报错，为何？因为没有分配地址。所以这笔函数要这么写：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">CreatSqList</span><span class="params">(SqList *L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">L-&gt;elem = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span> *));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;L-&gt;Length);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= L-&gt;Length;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;L-&gt;elem[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我一万年没有用malloc了，写这个函数的时候就慌得一批，之后想着要分配元素嘛，就写L-&gt;elem = 1000<em>(int </em>)…，但是这样是不行的。因为它elem啊，只是一个指针而已。</p><p>我不喜欢指针所以平时也不怎么用指针，自己写写代码基本不会有这方面的问题，但一到考试就凉透了！5月7日晚”复习“的指针完全没用。</p><p>这些几把考试不让查资料，所以把语法搞清楚很重要。血的教训！</p><p>②快排在5月7日晚上有“复习”，但是考试的时候还是一团乱麻。要理解快排，先要用例子建立直观的概念模型，从简单的例子到复杂的例子。简单的例子不包括重复项如“3 2 4 1 9 0 7”，还有不直观但容易调试的例子如“1 2”“2 1”等，乱七八糟的例子如“1 1 1”。理解之后是处理细节，考虑重复项他喵的该怎么搞，这样这样，基本就没问题了。</p><p>③有理数均值，特判！0/10这样的。要么在输出分母的时候加上去，要么把euclid写得更鲁棒一点，而不要少怀疑sscanf的有效性，虽然我之前的写法也很漂亮。</p><p>④整数分解，又是傻逼题一道……复习还是有一丁点用处的，因为当时也没有用心对待这题。本质就是个dfs，参数里设m——本次要分解的数，last——上次传下来的最大值，d——当前层数。对于;和\n搞个全局变量mark还有其函数专门处理。就这样，然后细节瞎搞。有的地方?:之类能让代码更简洁。</p><p>综上，关键词如下。<strong>高效复习</strong>、<strong>语法</strong>、<strong>模拟</strong>（从易到难、细节）、<strong>代码风格</strong>（优雅、鲁棒）、<strong>心态</strong>……</p><p>层层深入。</p><h1 id="2019-06-10"><a href="#2019-06-10" class="headerlink" title="2019-06-10"></a>2019-06-10</h1><p>今天补CF的状态……实在……一言难尽。题目是<a href="https://codeforces.com/contest/1176/problem/D" target="_blank" rel="noopener">这个</a>，看着很像密码题，它勾起了我关于ACTF的一些回忆……</p><p>一开始先是把题目看错了，不知怎地就把$p_{a_i}$理解成了$p_i$，导致处理$a_i$为质数和$a_i$为合数的方法产生了很大的分离，代码很冗长，而且写完后才发现有细节没想到，要处理非常麻烦。重新看题才发现是自己理解有误，只得把代码推倒重来。</p><p>之后是采用贪心的思路，分别用last_prime与last_composite维护$a_i$为质数/合数时$b_i$的index。但是在处理$a_i$为质数时，没有真正搞清楚变量的真实含义，以致屡出问题。在认识到所谓last_prime本质上是一个index后才对代码的正确性有了更深入的感受。</p><p>但这样还是碰到了一个很诡谲的error……本地测试没有问题，但是提交到服务器上便出错，此记录如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// origin</span></span><br><span class="line"><span class="keyword">while</span>(primes[nodes[last_prime].num] &gt; nodes[i].num)</span><br><span class="line">last_prime--;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// polished</span></span><br><span class="line"><span class="keyword">while</span>(nodes[last_prime].num &gt;= <span class="number">200000</span>) <span class="comment">// caution</span></span><br><span class="line">last_prime--;</span><br><span class="line"><span class="keyword">while</span>(primes[nodes[last_prime].num] &gt; nodes[i].num)</span><br><span class="line">last_prime--;</span><br></pre></td></tr></table></figure><p>隐蔽的数组越界。以后在手工模拟是要尤为注意，越界与否，这样的问题。</p><p>在越界的问题上，还碰到了RE的问题。RE是因为题目中给定的n最大规模为2e5，但是输入的是2n，故而该规模需×2。在校赛时也碰到了类似的问题，还需要多加注意。</p><p>之后在跑一个点时出现错误。debug的思路为：判断output和answer中不一样的数，发现answer中一个位置为质数而output中对应的位置为合数。猜想nodes[last_composite].used = 0出现问题。调试发现last_composite对应的位置存在问题！last_prime确实可用贪心维护，但是last_composite并不能用贪心维护！于是手写了一个lower_bound，才得以通过此测试点。</p><p>然而这样还是碰到了TLE的问题。观察测试点发现它有相当多的重复数据。于是此时，lower_bound的复杂度会由二分退化为线性。需要添加记忆化的操作。至此，此题成功AC。</p><p>有何启示？明天再说……</p><h1 id="2019-11-08"><a href="#2019-11-08" class="headerlink" title="2019-11-08"></a>2019-11-08</h1><p>ds的bonus 2，再次在这些睿智课上感到了自己的睿智。</p><p>题目要求MST，我们的老师只给C，所以sort啊priority_queue呀用不了了。要么prim，要么kruskal。简单回忆了一下，前者要手打堆，后者要手写归并。因为不想手写归并，就手打堆了。把自己之前写的prim粘了出来，然后修修改改调了老半天，代码又臭又长，整整130行，交上去，一半点没过。</p><p>把手打的堆换成priority_queue试试看，然后还是有1WA2T。理论上不该T啊，prim不是适用于稠密图的么，那个WA又是什么情况。浪费时间猜想猜了半天啥也不懂。</p><p>assert半天，测了一下PTA速度，发现读3e5的数据就要个70ms，离谱。prim里面也没有死循环，应该就是复杂度炸了。（但是为什么呢，不懂不懂不懂啊）</p><p>搜题解，发现别人的prim里没堆，就直接搜。咱也不懂为啥这样能对……反正能对就能对吧，默写一遍……</p><p>还是有两个点过不去，memset啊assert啊又调了老半天，最后发现prim的松弛和dijkstra是不一样的……wsdsb。</p><p>心态得调整好啊还是。</p><h1 id="2020-01-25"><a href="#2020-01-25" class="headerlink" title="2020-01-25"></a>2020-01-25</h1><p>码个左偏树能wa两回，我是傻逼。</p><p>不是merge的问题，是pop的时候路径压缩的问题——不能把删掉的结点直接连到0，因为子孙可能连向了它（至于为什么，我就不清楚了，wtcl），而要把这个结点标记一下并放到图里。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【朝花夕拾】吉静文选 童话的毁灭——关于《魔法少女小圆》中的美树沙耶香</title>
      <link href="/2020/01/24/History-My_Essays-On_Mahoshojo_Madoka/"/>
      <url>/2020/01/24/History-My_Essays-On_Mahoshojo_Madoka/</url>
      
        <content type="html"><![CDATA[<p>往事如烟，与之俱去的是已经成为回忆的曾经痛苦的甜蜜，积淀下的是现今痛苦永恒。</p><a id="more"></a><p>（版权所有，严禁转载。违者自行承担相应法律责任）</p><p>全程剧透警告⚠。</p><p>很多叙述可能是错误的，并没有得到实证，且写作者的记忆可能存在欺骗性。</p><p>往事如烟，与之俱去的是已经成为回忆的曾经痛苦的甜蜜，积淀下的是现今痛苦永恒。</p><h1 id="童话的毁灭——关于《魔法少女小圆》中的美树沙耶香"><a href="#童话的毁灭——关于《魔法少女小圆》中的美树沙耶香" class="headerlink" title="童话的毁灭——关于《魔法少女小圆》中的美树沙耶香"></a>童话的毁灭——关于《魔法少女小圆》中的美树沙耶香</h1><p>2011年，动画《魔法少女小圆》震惊了动画界。无论是从其主题的新颖性及思想的深度，还是影视艺术上的造诣，抑或是人物塑造上的鲜活与代表性，该片均可作为二十一世纪一零年代动画的代表。即使只从人物塑造上看，《小圆》也有颇多可圈可点之处。在五个个性鲜明的人物中，最为打动我的是美树沙耶香，魔法少女与魔女本质的揭示者。</p><p>沙耶香的闪亮是从成为魔法少女开始的，那是在第四集。上一集麻美学姐在与魔女的战斗中死去了，死在小圆与沙耶香面前，这个城市失去了一位能够保护她的魔法少女；这一集，沙耶香的青梅竹马恭介，他的病情恶化了，而病人常常会作出不理智的行为。作为一个将要截肢的未来小提琴家，他对着前来看望的沙耶香将礼物扔在地，哀叹自己的不幸命运，唯有不存在的奇迹、魔法才能挽救自己。而剧情前面提到，成为魔法少女就能实现一个愿望，但同时要担负与魔女战斗的使命。铺垫已经完成，故魔法少女沙耶香诞生了，她的形象令人感到大方而正气凛然，如同童话中的王子或勇者。她轻松打败这集出现的魔女，拯救了众人。剧中给我留下相当印象的一个细节是沙耶香在接受感谢时不好意思地挠头微笑，很是温馨。无疑在此刻，她是个真正的战斗者，能够在死亡的阴影面前为人类的福祉而战斗。这一集名叫《奇迹、魔法都是存在的》，取于沙耶香对恭介说的话，而沙耶香“我为人人”的行为正印证了这个标题。</p><p>可惜，这还只是十二集中的第四集，“起承转合”尚未到“转”的阶段，且沙耶香成为魔法少女慢了一步。丘比，魔法少女的契约者已从另一座城市调来佐仓杏子以守护这个城市，却又在当晚告诉她已经有名魔法少女诞生了。从本集结尾杏子富于挑衅意味的话中我们不难猜到她将与沙耶香产生冲突，而剧情发展也正是如此。事实上，杏子可作为沙耶香的一面镜子，使这个人物更加令人唏嘘感慨，这待会讲。</p><p>杏子与沙耶香的冲突集中于价值观方面。目睹了麻美学姐的死亡，沙耶香心中升起一股为正义而斗争的坚强，这引导她成为魔法少女；但对这份正义的偏执与过度的理想主义则暗示了人物危险的命运。现实的杏子一来就以老手的面貌教导她“这个城市只需要一名魔法少女”，并以暴力贯彻自己的教导。被上了一课的沙耶香切身体会到了就连魔法少女内部也有恣意妄为的人。战斗将至白热化时小焰前来阻止，用的是拳头，冰冷而现实。麻美学姐与小焰本就冷眼相待，然而温柔的麻美学姐死了，冷漠的佐仓杏子与晓美焰却活着，这一不公加强了沙耶香对她们的反感。她希望成为像麻美学姐一样温柔坚强的魔法少女，但她并不具备巴麻美的现实感。</p><p>次集沙耶香在恭介宅院前徘徊。杏子出现，并传播了自己“想要他就把他双腿弄废再夺过来啊”“魔女吃人类，魔法少女吃魔女”的认识。双方产生口角，并约以晚上再大桥上决斗。与此同时，苦恼于自己的朋友沙耶香与他人争斗行为的小圆，也希望采取行动把沙耶香从斗争的轨道上扳回来。在桥上，小圆夺取了沙耶香的灵魂宝石（魔法少女变身器）并将之扔下，灵魂宝石随着下方的卡车渐行渐远。于是沙耶香的身体轰然倒塌，她的眼睛光芒消失，剩下的仿佛一具尸体。随后小焰将其灵魂宝石追回并还给她时，她的眼睛才开始闪光，而她一脸茫然，“发生了什么？”</p><p>魔法少女要与魔女战斗，很容易受伤。如果伤及灵魂，魔法少女就废了。丘比们认为将灵魂与身体分离再强化肉体更有利于战斗，但很多早期的魔法少女无法接受这点，所以丘比之后就不再提这个了。很多事情都是知道得越少越好。洞晓了魔法少女秘密的魔法少女，连自己是否还是人类都不能确认。</p><p>我们常听到“为人类的正义事业而献身”一类的口号。献身是迅猛的、壮烈的，是以个体生命的终结博集体的福祉。而更多的人面临的是“苟活”，扑腾在痛苦之海中，受唾弃，遭鄙夷，不被理解，甚至他们的理想并不明确，所谓奋斗换来的只是虚无。很多人因此自杀，只是自杀无法从根本上消除荒诞。</p><p>沙耶香面临的正是这般困境，她的人生被她转移到了别人的未来上，全人类的幸福上。而后二者是靠不住的。信念逐渐丧失的沙耶香也在逐渐丧失作为魔法少女的资格，这是一个必然趋势。赫拉克利特说：“一个人的性格就是他的命运。”此言得之。小圆的故事重复了很多遍，在不同的平行宇宙中，她的命运都是相似的，尽管有微小的变化。</p><p>回到情节上。沙耶香明白自己成为僵尸少女后有迷惘，有失落，有痛苦。于是小圆来宽慰她的朋友，只是起了反效果：不仅安慰毫不成功，沙耶香还冷嘲热讽，像恭介当时一样。你来干什么？你如果成为魔法少女，潜质远在我们之上，哪用得着像我们这样努力战斗？（傻孩子，你的矛盾什么时候在战斗上了？）下一幕是沙耶香在雨中流泪逃窜。“我都对我的朋友说了什么啊。”虽然小圆善解人意，此后仍愿意拥抱沙耶香听她哭诉，只是她们不能够也无法再交心。小圆也憧憬拯救，可她连离自己最近的朋友也救不回来。</p><p>话说小圆和沙耶香有个朋友叫仁美，第四集沙耶香所救的人中就有她。仁美在第六集（恭介出院返校这集）也约沙耶香出来喝咖啡（小圆喜欢在咖啡屋中和朋友交谈，气氛很和谐），气氛不那么和谐。她很直接：我一直喜欢恭介，准备明晚对他告白，但学姐你毕竟与他青梅竹马，今晚告白的机会归你。沙耶香的反应呢？以她在前两集所呈现的阳光、正义、开朗大方，她也只是笑着同意，只是有些尴尬，有些不自然。仁美的严肃与沙耶香的表面欣然认可心中五味杂陈形成了鲜明对比。他人的不理解使沙耶香的忧郁逐渐加重。</p><p>在前两集，沙耶香的形象是正面的、动人的、可爱的。沙耶香不懂音乐，但会为住院的恭介买CD，与他交流自己的生活所闻。语气温柔，神情真挚，能推己及人，关切他人。而在学校等地她与同学关系融洽，举止大方，帅气而爽朗；同时她正义感强，以言以行抗击吃人的魔女。影片中的细节让人物形象更生动立体，这里提一个打动我的细节。《小圆》对人物的刻画不仅是从人物的言行举止上，也从客观环境上。小圆少女化的房间反映了她的童心与善良，麻美学姐的房间是简洁的单人公寓，体现了她独自谋生的坚强。那么沙耶香呢？我开始回忆不出，但之后想到了：她出现的个人地点是病房，而不是自己的房间，这体现了她的主要特征即时刻为他人着想。</p><p>可只为他人着想，而不管不顾自己真的可能么？假定世界上有灵魂，那么灵魂一定是不洁的，即便干净也只是环境使然。生命自然地产生了自我维持与扩张的倾向，如你所见，进食便是一例，即从他物（生命）中攫取能量以供己为生。沙耶香厌恶杏子将魔法少女与人类的关系解释成食物链关系，她对童话般的正义，和睦的人际关系抱有希冀。但仅凭一个人的努力是缺乏实效的，而且孤独的奋斗很容易在强大的现实面前被击倒，况且只为他人着想很容易因他人的偏见与恶意而从纯粹的利人蜕变为纯粹的利己，因为极端的人易由一个极端转向另一个极端。看似是不管不顾自己，实际是变相地让内心的恶之花茁壮成长，沙耶香及现实中的许多原本善良的人们就这样任由心魔毁灭自己。</p><p>沙耶香最严重的错误，在我看来，是希望把快乐建立在他人不利于己的快乐上。这样建立起的只有痛苦。我曾诧异她为何要在暗处自虐般地看仁美与恭介走在一起，匆匆跑开（此处的分镜值得赞赏：沙耶香的动作与两人的投影交错呈现，没有任何声响），我现在想通了——她本是前来默默祝福，但这祝福给予她的只有无尽痛苦。</p><p>痛苦必然驱使人们做出响应。沙耶香响应的方式是发泄，从向小圆发脾气，到在小圆怀里哭泣，到虐杀魔女，形式越来越激烈，也越来越危险。魔法少女大量使用魔力会使其灵魂宝石越发污浊。沙耶香又因其对小焰的偏见及偏执、抑郁等情感不愿使用小焰给的“悲叹之种”（补魔道具，击杀魔女后掉落，状如黑色宝石）。小焰在前九集的神秘与近乎全知暗示她知晓放任魔法少女情感失控魔力过度消耗的后果，于是她选择消灭沙耶香。就在此刻，本同小焰联手的杏子转而保护了沙耶香，沙耶香遂得以成功脱逃。</p><p>杏子对沙耶香态度转变大约始于决斗之后。杏子是个刀子嘴豆腐心的人物，言辞或许过度现实，但她是个善良的人。她是为了帮助家道中落的父亲的事业而许下愿望成为魔法少女的，但事情被她爸知道了，家境更为没落了。现实的压迫使她从理想中落下，而沙耶香的理想主义，她的不幸，她在不幸以后的坚强令杏子找到了归属感与认同感，她希望和她成为朋友。但杏子有一些小缺点，比如她不会用语言和别人交朋友，比如她会偷零食吃。而后者正为沙耶香对正义的偏执所戳出，所难容。沙耶香并非瞧不起杏子，只是因为失落、偏见、厌世等原因没有接受她，而杏子对沙耶香感情真挚。这隔了一句话的终成悲剧的爱恋使人心酸而叹惋。</p><p>事实上，美树沙耶香的故事可以看作《海的女儿》中小美人鱼的经历。小美人鱼的默默奉献与牺牲自我，经历的无声痛苦与悲剧性的结局均能在美树沙耶香身上体现。她们的悲剧同样是几乎无可避免的——像小美人鱼一样，沙耶香认为有“这样的身体”的她无法向恭介说出“请爱我吧”，虽然这显然只是表层原因。她还是把自己降了一格。她甚至不允许自己去爱人，不许追求恭介，不许接受杏子。而这恰恰是对人性的扭曲。人确实是不洁的，不过不是肉体，是灵魂。</p><p>沙耶香所在的环境令人欣慰：同学、朋友、老师、家长（小圆妈妈）都在关心她，可她的命运仍旧是悲惨的。有那么多人通过各种途径希望她回到从前阳光的样子，但没有效果。人们的沟通是否有效？心灵的沟通又能否真正实现？每个人都是独特的个体，但独特性也给人们制造了一层隔阂，这在人压抑时犹能感觉得到。当一个人绝望时，他会觉得天是红的，地是空的，人们自私自利，这世界也不过愚昧、盲目、畸形、晦涩的混沌。刘慈欣称此为末日体验。套用网上一句话：“真正的末日是不可见的，因为它起源于人心。”</p><p>作为一个正常人，我也希望自己的朋友能从痛苦中走出，但以什么方式？而我处在疯狂的边缘时，也没有人来救我，不只是出于冷漠，更多是因为手足无措。而世间的不顺与恶意又无处不在，甚至可能通过理性制造（恭介与仁美、丘比的行为理性而难以指责，可恰是这些行为造成了最大的痛苦）。怎么应对呢？谁知道呢。这就是我们无可奈何却又不得不依存的人世间。</p><p>沙耶香剩下的时日不多了。她逃到了火车上，那儿有两个渣男，绘声绘色地讨论“女人就是像狗一样”诸如此类的命题。沙耶香本来希望保持宁静平复心情，但终于忍不住愠怒地责问他们：“她们为了你们在努力不是吗？真是的，我到底为了谁才这样努力啊？”（此处的分镜亦可圈可点：阴冷寂静的火车厢中沙耶香面无表情地听着两个糙男人絮絮谈并不时传出肤浅的笑声，随后是对沙耶香站起说话的特写，一团黑气在她身边凝聚并上升）</p><p>待杏子在破旧车厢中发现沙耶香时，她的灵魂宝石已经污浊。“抱有多少的希望，同时也要背负等量的诅咒，这就是我们魔法少女的宿命吧。”她终于发现了这点，只是为时已晚，况且这个道理于消除荒诞无补。悠扬的乐声响起，空间变得光怪陆离。这里是魔女结界，抽象而扭曲，晦涩而奇特，像现代艺术，像卡夫卡式梦魇世界的显现或弗洛伊德发现的意识海下的庞大冰山。灵魂宝石，自然，已经变成悲叹之种了。于是海之魔女诞生了。</p><p>每个魔女都曾是满怀希望的少女，她们有自己丰富多姿的故事，也都有善良的本性与帮助他人的美好愿望。然而殊途同归，我们犹记得第二集巴麻美、第四集美树沙耶香因斩杀魔女保护人们让世界更美好而自豪而喜悦，或许在一些情况下，被斩杀的就是她们？而那时自然也有天真的少女会自豪会喜悦。</p><p>《小圆》其实是披着魔幻外衣的现实主义故事，其中“魔法少女”起的是放大镜的作用， 放大了人性的善良与坚强，也放大了失落与痛苦等现代人常面临又少能战胜的难题。沙耶香在普通人眼里是自杀身亡，她因青春的苦涩插曲的丧命令老师家长惋惜。而第二集魔女的影响表现为上班族的跳楼意向，第四集的魔女导致了群体癔症，第十一集的魔女之夜在人们眼中是大型的自然灾害。片子开头就讲了：“魔女会吃人。”可片子开头也讲了：“只有（准）魔法少女能看见魔女。”故《小圆》的故事在幻想流行的动漫业界有可贵的现实性，这种现实并非“另一个世界”式的弱联系或以魔幻故事展现宏观的现实，而是对社会问题的直视与细致展现。且《小圆》借人们喜闻乐见的魔幻形式包装故事，借鉴了多种绘画艺术风格，以“精神猎奇”的风格探索普通人丰富而波澜汹涌的内心世界。这些也是其大获成功的重要因素。</p><p>仅凭描述就想传达美术或音乐对灵魂的冲击无疑是极其困难的。魔女结界就是这样难于描述的东西，它们反映了魔女生前的记忆，风格多种多样且引人入胜：柯拉琪、卡通、平面化、印象主义、立体主义……沙耶香魔女化后的结界像是童话的宫廷，只是色调以蓝、黑为主而显得晦暗。火车木支离地架在空中，影子般的演奏者此起彼伏，拨出恢弘悠扬的乐章，其中振荡着的惟有悲怆与凄凉。本片音乐负责是梶浦由纪，擅长写空灵咏叹的曲子，引发听者对人类生存状态的思考。</p><p>杏子本是抱着要救回沙耶香的信念去找她的，而当她魔女化（并非一般意义上的黑化，原本魔法少女的尸体依旧存在，是从悲叹之种中涌出了魔女，我倾向于认为魔女是潜意识中压抑的恶的结晶。魔女循本能而攻击结界的闯入者或者说“吃人”。魔女的形象常与生前大相径庭，但有所关联，如沙耶香的魔女的形象是人鱼骑士）后杏子的信念仍未消失。作为一个看上去比较现实、经受了风风雨雨的人，她的情感一直被掩饰在表面的平静之下。当最后的尝试即邀请小圆进行“友谊的呼唤”也失败后，她在战斗中找到了新的意义。她们的初见即在战斗中展开，而今沙耶香的魔女的无意识的攻击，承载的是她们这些日子表面的不合与差异，与深层次她们在某些意义上的惺惺相惜。往事如烟，与之俱去的是已经成为回忆的曾经痛苦的甜蜜，积淀下的是现今痛苦永恒。杏子让小圆逃出结界，随后她仍然平静地丢出一颗榴弹。“沙耶香，我来陪你了。”</p><p>这是第九集，集末是小焰孤单地处在房间里。她本与杏子联手，要共同对抗即将到来的魔女之夜，可如今她又只剩下一个人在战斗。杏子究竟是幸福还是不幸，这见仁见智，可她的离去留给生者的只有悲哀。小焰只是普通人，她无法改变沙耶香命运的轨迹，也很难有战友，即使再回到故事的开始一次。晓美焰是孤独的战斗者，她也有自己的故事。以下两集便以极精练的叙述让我们充分了解了这一人物。她也有珍贵的品质与值得喟叹的经历，而且她和小圆更算得上主角。但我更关心作为反派的沙耶香。不仅是她所受的待遇不公，更是因为我从她身上看到了自己的影子。</p><p>沙耶香面临的困境几乎是无解的，因为整个道德和她的本能是相悖的，她无法让他人真正理解她的痛苦，也没有行之有效的排解痛苦的方式。作为观众的我们也很难对人物加以指责，若占在其立场上，也只能感到无能为力与蔓延的悲哀。将人物置于特殊的孤独的无人理解的境地以展现人物的悲哀命运并探寻人性的可能性，这是编剧虚渊玄的惯常做法。</p><p>既然无解，我们最好不要把眼光继续停留在这个问题上，这是一种自私而有效的解决方案。如果碰到类似的心境，自杀是一种解脱的方式，但这于消除荒诞无补，至少本人不是很推荐。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 回忆 </tag>
            
            <tag> 批评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【朝花夕拾】吉静文选 象牙塔</title>
      <link href="/2020/01/23/History-My_Essays-Ivory_Tower/"/>
      <url>/2020/01/23/History-My_Essays-Ivory_Tower/</url>
      
        <content type="html"><![CDATA[<p>未完不待续。</p><a id="more"></a><p>（版权所有，严禁转载。违者自行承担相应法律责任）</p><p>未完不待续。</p><p>Cthulhu风格的幻想小说。</p><h1 id="象牙塔"><a href="#象牙塔" class="headerlink" title="象牙塔"></a>象牙塔</h1><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>在我踏入这个古怪奇特的地方后，这是我第一次看见生物。此地的建筑形制为这个时代流行的式样，然而内部阒静无声，主楼内有十二小室，每间小室均是一个雕像馆，里面摆了台上的动态塑像和底下坐着的几十静态塑像。塑像神情肃穆，似在进行庄严的仪式，只是我所了解的任何文化内均没有类似的仪式。我是在另一幢楼中碰见这个生物的，那幢楼中的小室更多，其中盛放着不知名的各式器皿，应该是用于祭祀的。</p><p>我有生以来从未见过这种生物，其枯萎电线杆似的脖颈支撑着硕大无朋的头部，其上满是代谢秽物与金属制品。它直立行走，手有五指，正抓着某类方形物品用头部的发生器发出古怪的声音。“sun-yet-se？”我听不出什么有意义的话语，但直觉告诉我它念这段话或许有六年之久了。它似乎与这个族群格格不入，显得凄凉又悲哀。</p><p>待我走过它后，我开始思考这个个体的生命状态。雕像馆中的像无疑是这种生物塑的，但竟比活物更有生机。它们可能是一种社会型生物，由一个巨大的中枢牵动个体，构成了一种亚生命模式，而过于弱小或有叛离性的个体将被流放，它们若暴露在自然中，无疑马上会被天敌撕碎。而今却可在这样一个地方待着，活不算活，死不算死，如僵尸一般存在，倒也是件幸事。</p><p>智能无疑是对生命的毁灭。只有认知到这点并将理性由神坛中房放逐，群体才能享有无上的幸福。将灭绝了的高级智能生物留下的遗迹好好利用，如温水青蛙般享受幻觉的愚昧的快乐，这才是幸福的本义，这才是生命的目的，这才是世界的真谛。</p><p>我继续在楼层间移动，又遇着了不少这样的僵尸，专注于手中的物块。智慧，智慧，太智慧了。它们的自我早被所谓了本我占据，被献给了痛苦女士。这些异教徒是必然要付出代价的，就像那些曾自称“地球的主人”的小型哺乳动物一样。</p><p>我走进了一间敞开的小室，一些信息涌入了我的体内。我认得它们的文字了，这种可悲的存在似乎是我的同类。阴暗的小室里堆叠着一些“纸”，上面模模糊糊写了“反思表”还有什么数字，这可能是一种独特的编码。我听见有些声音在向我呐喊，是从“反思表”里传出来的。“学生”的灵魂被封存在这一张张纸片里了。</p><p>这里天黑得很快，不知从何时起太阳就消失了。</p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>自从小泉上次翻车被叫出去回来后，小泉的成绩就越来越差了。在那之前，小泉还是我们车队的二当家，是浮躁圈里的副领袖，每堂自修课都有他爽朗的笑声。</p><p>小泉回来时很失落，问他怎么了，他什么也不说，竟拿出本语文书专心复习。要知道他可有半年没碰过这书。</p><p>小泉不同我们一起大闹了，他总说：“我要好好学习”。晚自修前他竟和那班女生到隔壁阅览室自习，背的还是数学。搞什么啊，他。</p><p>但一切努力都挽救不了小泉越考越差的既成事实。他每每考完都忧郁地静坐在座位上，一言不发。对完答案也这样，考后分析也这样。老师们觉得他没救了，因为他怎么考成这样。班主任屡屡将他叫出去谈话，态度语重心长。我们想安慰他，但感到一种莫大的隔阂。</p><p>小泉不吃饭了，因为要学习；小泉翘副课了，因为要学习。甚至在寝室，大家都睡着后，有个身影窸窸窣窣地下床，拿了书本，幽灵般踱进厕所打开灯开始背书。因为我睡不好，我多次发现他这般行踪。背书声细微却无法忽视。我听不清他背的什么，只一次听到“孙中山……”他就这样，魔影一般，在这里那里，学习，学习，学习……</p><p>小泉在老师心中印象也在逐渐加深。领导有回把全校后几名的人叫到小屋子里开会，其中就有小泉。据门外的人说关门后领导破口大骂：“雾霾！流沙！□□中学的败类！”</p><p>有回夜自修巡逻老师到班内“逛逛”，拍了拍那个选考满分同学的肩膀。“小曹。”态度是温和的。再走到小曹前面的小泉身边，语气甚为严厉。“踱絮踱扩登里乡靠，作尬姆。”小泉一言不发。</p><p>小泉自杀死了，很悲惨。有女生打他尸体边上走过时笑着说这人真逊这年头还跳楼要是她们就怎样怎样。</p><p>小泉的位子空了。有时我们会看着那个位子回想起那个曾经朝气蓬勃的少年，怀念起我们一起打球一起欢笑一起放浪的时光。只是回忆逐渐多了很多不确定性。小泉真的跟我们一同挥汗球场过吗？我们开车时带过小泉吗？小泉在记忆里的影像越来越淡，他姓甚名谁？他容貌如何？越是回忆，就越回忆不起来……</p><p>小泉……是谁？</p><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><p>这一卷坏掉了，没有留下任何拷贝。</p><h2 id="四"><a href="#四" class="headerlink" title="四"></a>四</h2><p>（未完）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 回忆 </tag>
            
            <tag> 虚构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【朝花夕拾】吉静文选 郝景芳与其无类型文学</title>
      <link href="/2020/01/23/History-My_Essays-On_Haojingfang/"/>
      <url>/2020/01/23/History-My_Essays-On_Haojingfang/</url>
      
        <content type="html"><![CDATA[<p>大量剧透警告⚠。</p><a id="more"></a><p>（版权所有，严禁转载。违者自行承担相应法律责任）</p><p>大量剧透警告⚠。</p><h1 id="郝景芳与其无类型文学"><a href="#郝景芳与其无类型文学" class="headerlink" title="郝景芳与其无类型文学"></a>郝景芳与其无类型文学</h1><p>第一次看郝景芳是在某个深夜，十几点钟。看的是《莫比乌斯》，一部我现在看来相当不错的小说。当时一个字也看不进去，只觉得：这也叫科幻？再看《去远方》，没看几页，书就扔一旁去了。</p><p>之后感觉《去远方》有深意，想看，就又把书捧了一回，看到一篇《癫狂者》，感到耳目一新。再是零零星星地看了她其他小说，逐渐喜欢上了这种风格，于是把书放下时会深深一叹，不错，实在不错。</p><p>郝景芳的小说一般都很有特色，现实加上现代，科幻与纯文学的元素并重。如《我们的房子会衰变》中，房子会一路衰变下去，在不同的元素时会呈现不同的性质，给房客带来不同的感受，这样的设定很新奇，很好玩。但小说不止于此，会衰变的房子衬托的是不会衰变的大地。房子化为氢气飘走，房客掉落在地上，准备再找一座房子时，他这般发问：“为什么，为什么我们的大地不会衰变？”这样的叩问是很有力的，大地可以是人生，是外界，但私以为这样的解读没意思，远不及那句叩问，包含了千言万语。这一篇，和她很多其他小说一样，不符合上面“现实加上现代”等概括，很难明确其归宿，但就是那样独特、新颖、深邃。郝景芳称她这些小说为“无类型文学”。</p><p>“无类型文学”，正如其名，与其说是种新的类型，毋宁说是一种感觉，就如“cult”，有大体上的特点，但相当难定义。《西游记》，依郝景芳的看法，也有一些“无类型”的成分，其中的旅途可以看作是一个人足不出户，其中的猿是心猿，马是意马。再如李商隐，其诗作也不好用八大题材归纳，大多朦胧而诗意，直通现代。而在一些比较流行而大众的作品如动漫作品中，我们也能看到一些这样“无类型”的元素。如《游戏王DM》的主线剧情可以看作是一次找寻自我的求索之旅，而《游戏王GX》“darkness”篇中人类的消失也可看作现代人在生活中的迷失。这样的例子还有很多很多，举例的目的不在证明往“无类型”这个词上贴金，而在发掘文艺作品中的亮点。这些亮点（我称为“现代感”）有的难以言说，但却深入而锋利，直击人心。现代艺术的一大特点为陌生感，情节/绘画/旋律虽怪诞纷纭，但它们多是可感的，以形式上的陌生拉近了与受众在情感上的距离。卡夫卡的现代的伟大在他描绘了无数个同样自感卑微渺小者艰难的生存状态。郝景芳的“无类型”亦多着眼于个体的忧郁、无助、疑虑、徘徊。我认为她是有现代感的，不过一个词语往往有其归宿，正如一个个类型在人们心中有固有印象。提及现代，我们多想到卡夫卡；提及后现代， 我们多想到卡尔维诺和博尔赫斯。“无类型”一词，可作为郝景芳的标签，这其中也蕴含了她对文学的一些看法。</p><p>郝景芳的小说——除了“无类型”，主要的特点，可谓“丰富”“精深”“忧郁”。“丰富”体现在小说的各外在方面：题材、人物等。以题材为例，有黑帮，有宇宙，也有当代社会。同一题材也可以表达并不类型化的主体，如《九颜色·红》借宇宙航行写爱情，《流浪苍穹》则借宇宙航行写人与人之间的隔阂。社会现实的背景在郝景芳小说中出现得较多，但故事也是多元的，像工地工人与中产阶级小女的交流（《莫比乌斯》），两代人有所不同又有所相似的成长经历（《生于一九八四》），大学生对未来深感迷茫时的选择（《祖母家的夏天》），亲密关系由热烈转向平淡的困境（《九颜色·黑》）等等。还有些故事基于幻想，背景独特，如《山中问答》。也有的故事将现实与虚幻相叠加，如《去远方》《生于一九八四》。作者甚至能用完全合乎现实的故事营造极虚幻的效果（《癫狂者》）。郝景芳的作品总是给人强烈地陌生感，仿佛在色彩绚丽的房间间穿梭，能品味不同房间的美与整体布局的独到与特色。</p><p>郝景芳小说的丰富还体现在别的方面，像人物、意象。人物与题材相通，此处便不再展开。至于意象，小说中出现很多理科的专业术语与一些较罕见的意象：G蛋白偶联受体被拿来印证观点，引力红移与暗能量被用以表情达意，至于罕见的意象，淤青便是一例。《祖母家的夏天》中写主人公躲避现实“如牛顿躲避瘟疫”，其最后的归宿，专利局局员也与爱因斯坦的人生遥相呼应，很有意趣也很有深意。《山中问答》则将不同时期不同国别的思想家汇聚起来，实则在探讨生命与宇宙的真谛。谈到以理科知识写文学故事，王小波也是一个好的例子。他用拉格朗日微分方程，偏导数作意象，小说中时常出现化工上的物质。个人认为，这样的写法远比理科生“强说愁”来得精彩，来得个性，来得有趣。</p><p>“丰富”是广度上的特点，而“精深”则是针对深度而言的。《弦歌》中“我”对音乐有独到见解，对世界名曲如数家珍，感受贴切。《生于一九八四》中平生精于西方启蒙思想家的著作，言语行为均体现出他阅读之深。《莫比乌斯》中小舟与阿木交谈时引用的例子无不体现了她对现实世界的无奈与期望世界能更有温情的强烈愿望，一个无力改变世界而又怀有美好愿望的女孩形象便跃然纸上了。其他短篇中涉及的科学原理也较为专业，如《九颜色·黄》，利用颜色形成的原理组织文章；《九颜色·蓝》中则聚焦了全息技术。</p><p>事实上，上面的论述大多聚焦的是形式上的方面。私以为艺术的灵魂之一在于传达情感。缺乏真情实感，所谓艺术作品也不过如工业上的零件一类，只是技术产品。情感是寄宿于作品中的，以主体为灵魂，以形式为外壳。形式在很大程度上能影响情感的传达，如对笔者而言，现代小说较之现实主义小说更能产生精神上的震撼。郝景芳小说有趣的形式能让人对其产生兴趣，但这种表层的兴趣尚是为深层的精神冲击——情感蓄势的。郝景芳小说的深度更是蕴含在小说所寄予的情感上的。依我所见，她的小说是饱含深情的，犹如一颗水滴，足以激起读者心中一片片涟漪，经久不息。</p><p>郝氏文学多是卒章显志式的，前面提到的《我们的房子会衰变》自不必说，《最后一个勇敢的人》也将对谜团的揭秘放在了最后两段，还有《孤单病房》的组织也类似。小说前面往往会设置很多悬念，这使读者有一种解密的代入感与刺激感，而最终又可以豁然开朗，接受这颗情感炸弹，体味其袅袅余音。</p><p>除了情感上的饱满，深入，一如忧郁，是主题上的特点。可能忧郁是郝景芳小说最大的特点。举《生于一九八四》为例，这是郝景芳为数不多的长篇之一（无类型文学的形式更适合短篇，故本书整体上现实主义色彩更浓厚），也是部自传体小说，它反映了一个人，一代人乃至整个人类族群的生命困境及两代人在不同社会环境下对世界的认识，郝景芳本人的人生观或许也蕴含其间。《生于一九八四》以《1984》为隐线，但政治并非其主体。“they are watching you”在文中表达的是主人公轻云在人生路上惴惴不安茫然若失的感觉。这是一种心境，可以由小说感受到，但并不好阐述。即使在十七章（最终章）轻云找到了心灵的平静，脱离了苦海，她还是在零零零零零章（最终章）被否定而毁灭，“书页将尽，我也将不复存在”。这里情感与主题是多元而复杂的，但其中的忧郁明显而强烈。小说的形式灵活多变，但其中的悲伤痛苦没有改变。</p><p>“忧郁”一词，我在郝景芳的小说中只见过一回，她用的词更多是“孤独”：《孤单病房》，《孤独深处》（文集命名），《九颜色·紫》的阿莲，《九颜色·白》文末的小说……更多的时候她并没有诉诸词语，只是叙事，但情感藏在事里。“忧郁”与“孤独”，更多是一个形式上的问题，不同的用语指向的都是一个点，生命的困境，这是个比较大的话题，这里就不深入讨论了。对这一问题的思考使人痛苦也使人深沉，这也可以印证前面提到的“精深”。深入与愁苦，在郝景芳的小说中是交织在一起的。</p><p>“忧郁”一词，出现在《生于一九八四》第十三章，轻云回忆起自己的往昔，回忆起自己的读书处。她说自己爱读忧郁的书，包括尼采、塞林格、威廉·福克纳等，下面跟着自己的感受。“明明是没有故事的故事，但忧郁的气质滚滚而来”，这是她对塞林格的评价。的确，许多人能从《麦田里的守望者》中读到一种现代人常有的辛酸，这可能是我们一代人的普遍心结：物质生活条件虽然优渥，出路虽然多种多样，但内心时常突然感到一种惶恐，一种迷茫与失落，对生命无意义的困惑。“诗苦而后工”，工则工矣，内心仍不得解脱，包括艺术在内的许多东西无法帮助我们脱离苦海。痛苦无形无踪且无处不在。郝景芳小说的主题主要是关于这一心结的，虽然她写的只是个体的困境，但字里行间无不显露出一整代人的迷茫。</p><p>小说的忧郁还体现在人物的设定上。不同于许多现代作家笔下人物被放到次要位置甚至消失，郝景芳小说中人物占的地位是较为重要的。她笔下的主要人物（或叙述者）一般都是忧郁的、迷茫的、不自信的，就连《山中问答》中的主人公也有一丝这样的气质。在《九颜色·黑》中，主角心理活动中反复琐碎的语言很好地体现了人物这些个特点。不过，人物虽忧郁但并不怨天尤人，他们熟知是他们自己的悲观主义倾向与社会规律决定了自己的郁闷，愤世嫉俗没有意义且他们也不敢，所以它们的心理倾向是忧郁的，幻想隐居但又囿于现实（轻云）。《生于一九八四》诡谲的第十二章是轻云的梦呓，但即便在潜意识里她也并没有责怪他人。《报告》中的男主人公或许是郝景芳小说中最勇敢的角色了，但这份勇敢是基于厌倦的。《九颜色·紫》中的“我”显然外强中干且心思细密，否则他怎能凭报纸一版就体味阿莲的孤独？《莫比乌斯》中的小舟抑郁倾向比较严重，且由阿木视角展开的叙述下不少细节让她的性格更显立体。除去忧郁的主人公，郝景芳小说中也有一类闲云野鹤式的主人公，像《看不见的星球》中的叙述者，不过这样的人物只出现在幻想成分较多的作品中。事实上上文的这些例子也可用于印证郝景芳小说“丰富”的特点。</p><p>与主要任务的郁闷相对的，次要人物常常表现出乐观、自信、博学的特征。《生于一九八四》中平生博学且谈吐非凡，他的外部知识储备强大得足以掩盖他的内心。《最后一个勇敢的人》里斯杰47以死捍卫自己的思想。以及《九颜色·蓝》中的谭飞，自信而机智。“天为什么是蓝的？因为有太阳的存在”。他分明在说自己是他人的太阳！当然，太阳只有一个，主人公们明白这一点，故而他们在旁人的优秀中会转向低沉愁闷。</p><p>我是较推崇郝景芳的作品的，故介绍这三大特点或者优点。犹记得刚接触《看不见的星球》时，看到达尔文主义与拉马克主义的星球、旅人的星球、说谎者的星球……多有意趣多有意味啊！我想我一直想写的小说可能就是这样的。尤其是这一篇中星旅人的语言，空灵而饱含哲思。当然，郝景芳并非美玉无瑕，私以为其一大失败之处便在语言上。</p><p>郝景芳主要操两手语言，一套现实一套理想（或怪诞）。前者比较缺乏特色，尤其碰到平淡无味的剧情时，很催人入睡。后者往好了说是空灵，往坏了说是飘，飘到哪里都不知道，可能叫人看得云里雾里的。像很多学理的人一样，郝景芳的文字干净简练，只是其中缺少诙谐，这可能与她的创作理念也有关联。我是喜欢幽默的，因为幽默可以视作对荒诞的一种反抗。</p><p>她的第二大失败之处不在自己，而在读者身上。因为我们常常带着偏见看事物，觉得事情应该如何如何，以自身的意志评定创作者的意识。我是在《北京折叠》出名之后买的《去远方》，以为这是本科幻集，所以看到《莫比乌斯》时感觉很奇怪也很师往。但在尽力消除偏见，怀着探索的心态重读时，这一篇便又显示出其独特魅力来。很多情况下带着有偏颇的固有观点看问题，问题常往无益无趣的方向发展。或许是不喜欢类型文学与纯文学自扫门前雪吧，郝景芳创作了这些“没有归属”的小故事，它们启示我们类型不是最值得关注的，真正重要的是作品的思想与情感，这是标签无法标签的。</p><p>最后提一点，郝景芳的短篇不适合一口气读下来，不像很多作家的作品，可以一连读好几篇。她几乎每篇都有许多亮点，情感真挚而深沉。看完一篇总免不了要把书放下，到一边走走，回味回味刚才读到的故事，思索故事背后的人生。她的小说也经得起反复欣赏。在这个意义上，这些故事对我会有很大影响，即使以后我把它们否定了，我也会记其当初自己是如何在其中找到了自己，找到了自己想找的路。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 回忆 </tag>
            
            <tag> 批评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【艺苑偶得】柔和的微黄路灯光——《世界尽头》简评</title>
      <link href="/2019/12/10/Composition-My_Criticism-About_The_End_of_the_World/"/>
      <url>/2019/12/10/Composition-My_Criticism-About_The_End_of_the_World/</url>
      
        <content type="html"><![CDATA[<p>“外面，斑驳的，漆黑的树。”</p><a id="more"></a><p>叙述者的语调看似冷漠，实则温暖。这种温暖也构成了小说的基调（“柔和的微黄路灯光”是其象征）。叙述者佯装漠视被叙述者，实则关心。在这层意义下，叙述者与被叙述者是统一的，因为叙述者在叙述中也从被叙述者中找到了自我。</p><p>为什么要前往世界尽头呢，因为世界予人不如意。世界既有工作场所的属性，也有“家”的属性。工作的压迫使主体，即作业做不来的，缺乏学力的无识阶级，受到恐怖的无声的压迫。因为知识便是一种权力一种资产，世界（学校）是没有情面的筛选器。异化的学习也使得学生发生了异化在名利场中挣扎。而世界（家）的缺失则使得这份异化无以扭转。强关系的缺失让人与人的联系退化，人们相互间没有认识没有理解而只能建立虚伪的建立于资产之上的脆弱的膜关系。世界（家）没有温暖没有爱也发生了异质。世界本身的变异导致在世界以内无法解决世界的变异，而要改变世界，只能在世界之外找寻答案。</p><p>小说似乎没有给出世界变异的出路，被叙述者似乎什么也没有改变，但实际不然。世界始终是封闭的场所，问题在于封闭性所带来的是压抑还是温暖（联通），即应取得工作场所与家这存在互斥性质的属性间的平衡。被叙述者改变了世界的结构，这是他给出的出路。当然世界总会向更糟的方向改变，周期性地改变。在这层意义上，世界仍然是无可改变的。</p><p>所以主题实质上还是在呼唤爱呀，被叙述者的选择是自我肯定或爱自己，通过流放自己。可能有其他出路吧，但我不清楚。</p><p>流放的场所不多，老是流放的话原本有的意境也会消失的。如果我们去的每一个地方都一样安全，那么我们要从哪里去寻找温暖呢。这是一个问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 批评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【艺苑偶得】吉静文选 世界尽头</title>
      <link href="/2019/11/03/Composition-My_Novels-The_End_of_the_World/"/>
      <url>/2019/11/03/Composition-My_Novels-The_End_of_the_World/</url>
      
        <content type="html"><![CDATA[<p>“外面，斑驳的，漆黑的树。”</p><a id="more"></a><p><strong>一 出逃</strong></p><p>出了东四，就到了世界的尽头。</p><p>世界是环形的，上面是无尽的天，下面是无尽的地，只有在地之上，世界是有界的。世界很小，沿着边境走上半个钟头，就能回到原点。</p><p>世界之外是什么，没有人知道。</p><p>每个人来到世界上都是有任务的，要做课题，要作报告，所有人都很忙。没有人关心世界之外是什么。</p><p>某在边境上看到了外面，斑驳的，漆黑的树，于是他想要到世界之外看看。</p><p>从世界中出去并没有什么后果，每个人都很忙，没有人管他。</p><p>借着单车，他出了东四，看到了世界的尽头。</p><p>前方是楼房，无尽的楼房，蔓延到无穷远点。清一色的浅黄色四层楼房，阳台上晾着五彩的衣服，蔓延到无穷远点。</p><p>楼房间并无空隙，他知道，如果进去，便会迷失在那无尽之中，再也回不来了。</p><p>只有沿着边境行走，才是安全的。</p><p>单车在呼啸，在风中呼啸。咆哮的风，吹来生命的气息，吹来死亡中摇曳的生命之息。</p><p>世界之外，不仅是安然的居民区，亮起星星点点的灯；还是诱惑的人造光，光之内繁华商场，商场内人头攒动；还是望不见头的黑暗分岔路径，通向看不见的所有的可能性。在黑夜中，一切都无比真实，真实得有一丝虚幻。</p><p>他有点害怕了，但他别无选择，只能向前走，向前走。至于前面有什么，他并不知道。</p><p>此时虽只是下午七点，但天黑得不可思议，似乎太阳永远不会再升起。</p><p><strong>二 光柱</strong></p><p>他绕了个弯，从那片诱惑与商场中逃出了。他松了一口气。</p><p>如以方向来说，他此时正处于世界的西面。西面是不稳定的，边境是一片废墟。往常只有工人们会出入世界西境。</p><p>因为不清楚西境的地形，即便他贴着边境走，他也不知道自己会不会走到其他地方。</p><p>但是四下里光很明亮。柔和的微黄路灯光，相当温暖。</p><p>此外，他还在东方，看到了操场上，射向天穹的那道光。准确的说，那是一道光柱，是■■■■结束时亮起的光。■■■■虽然让世界外的人涌入世界，侵占了他们的资源，引得民不聊生。但此刻，他突然对这■■■■充满了感激之情。</p><p>这样走下去的话，就能返回了吧。他想。</p><p><strong>三 出逃</strong></p><p>走了不知多久，他经过了若干通向东边的路口，有的是不与世界联通的，很明显；有的或许是与世界联通的，但他并没有验证过。此刻他停留在一条宽敞的路口。他看见一幢自己曾见过的塔楼，他看见微弱的灯光下蓝色衣服下的保安人员。无疑，这里能通向世界内部，能通向那片光所在的操场，能通向自己的寝室，而且这是他验证过的。</p><p>那是若干月前抑或若干年前，他并不记得或是并不知晓自己出逃的原因，正如此刻他并不记得或是并不知晓自己出逃的原因。那时他逃向了西边，在下午四点的阳光下，在西边徘徊游荡，在空无一人的新楼外游荡，在崎岖的石子路间游荡。最后，他在回程途中把车摔坏了，拉着破败的自行车走回了寝室。</p><p>他清晰地记得这一条路，这一幢塔楼。这是一条安全的路，没有任何危险，能够让他平安回到寝室，回到寝室做并不存在的课题，回到寝室思考自己为什么而活着。这样一想，他感到有些害怕。</p><p>所以他没有进去。</p><p><strong>四 黑夜与立交桥</strong></p><p>如果按原路返回，那么必可回到原点。这样证明不了世界是联通的，但可以回去，好让他继续做他不存在的课题，思考生存的目的。这是很没意思的，因为是一条已经走过的路。但这是最后的手段。如果他迷失了，这是他唯一的出路。无趣，但是安全。</p><p>但是绕过又一个弯之后——此时他理应处于世界的北面，他发现原路返回已是不可能的了。一座巨大的立交桥横亘在他与对面之间，立交桥似乎通往无穷远。因为这座桥，他到达不了对面，他的一条路径被割断了。只有前方能走了。充满不确定的，通向美丽死亡的，前方。</p><p>柔和的微黄路灯光暗了许多。他朝右边望去，虽然光柱依旧在视力所及范围内，但前方的路似乎通往不了右侧。</p><p>他进入了一片密林中，耸立的黑暗楼房挡住了那光柱，阳台上看不见任何衣服，因为太黑了。他似乎已经迷失在这密林中了。</p><p>心脏在强烈地泵着，他确乎已经无路可走了，除了前进，除了前进。一旦停下来，他就会消失了。唯有更快地骑，唯有更快地骑，骑行便是他的意义所在。抱着这颗泵跳的心脏，他体味到了在世界之中未曾感受到的，存在的实感。</p><p><strong>五 港湾</strong></p><p>过了密林，又是一个转弯。</p><p>他看见些许人烟，看见平房门口的小卖铺老板还有他身后五光十色的零食，看见冒着热腾蒸汽亮着各色招牌的路边小馆子。他看得有些饿了。想吃东西。想吃好多好多东西。但不是现在，现在他要回去。</p><p>在人烟中穿行和在无人区穿行不同，前者是只要行进便会有安定感，后者则是要在速度中获取安定感。他一向不喜欢人烟，但此刻这些擦肩而过的人们却让他感到了些微妙的温情，即便他们与他毫无联系。</p><p>渐渐地，他发现这片区域自己似乎来过，这些招牌，这个地形。确实，再转一个弯，他便到了■■街，他已经回来了，他已经回来了。</p><p>他有点想哭。</p><p>他没有买夜宵，径自回寝了。路上枯萎的树似乎活过来了。</p><p><strong>六 莫比乌斯</strong></p><p>第二天，他发现自己没有感冒。</p><p>今天虽然也没有事情可干，但生活还是要生活的。</p><p>起码我到过世界尽头了，世界是联通的，如同一个环，一个莫比乌斯环。他想。</p><p><strong>日后谈</strong></p><p>取材于某人的亲身经历，基本是如实记录，对乌七八糟的意识过程。</p><p>出于文学意义考虑，把现实的地名事件名全隐去了。本来小说所选的意向比较现实偏工业化比较无趣，就尽可能往魔幻里改了，但还是很现实很工业化很无趣。</p><p>灵感来源：</p><p>①《世界尽头与冷酷仙境》，村上春树著，仅仅是取个标题而已，两篇差得挺远的，个人感觉。</p><p>②《莫比乌斯》，郝景芳著，主要灵感来源，个人特别欣赏的一部作品，很浪漫，也很悲哀。</p><p>③《逃离》，爱丽丝·门罗著，主题有一定的相似。个人很不喜欢这一篇，也没用心看。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 虚构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【围炉夜话】古典神话的现代演绎——《天气之子》简评</title>
      <link href="/2019/11/02/Comments-Animes-tenki_no_ko/"/>
      <url>/2019/11/02/Comments-Animes-tenki_no_ko/</url>
      
        <content type="html"><![CDATA[<p>十六岁真好啊。</p><a id="more"></a><p>和同学去看了&lt;天气之子&gt;，新海诚作品。影片开头比较主流，中期发展略奇怪，结尾有一丝悲哀的意味（可能是因为我肚子痛）。总体而言，还是部相当不错的电影。</p><p>影片的亮点非常多，尤其在画面上。新海诚动画的画面风格尤其在人物特写，风景类场景上表现得特别明显：色彩明亮和谐，线条细腻柔和，较为唯美。画面上，女性角色的足部演出，尤为出彩。</p><p>影片音乐以摇滚电音为主（？），较为现代。音乐同场景间的联系非常紧密，烘托氛围的效果尤其好。</p><p>影片的世界观还是值得一说的，这也是贯穿剧情的主线：在神存在的巫女存在的世界中，神的心情表现为天气，而巫女作为神的使者能够通过祈祷来改变天气，为人们带来幸福，但巫女实质上是神的祭品。女主人公阳菜便是这样一个巫女，男主人公帆高启发她利用自己的能力来养活自己，来为人们带来幸福。之后阳菜了解到了真相，发现自己成了祭品被禁锢在云上，然后帆高用爱的力量把她救回来了，然后天气也一直很坏，就是这样一个故事。</p><p>（突然想到了&lt;秽翼的尤斯蒂娅&gt;，同样是多灾多难的土地，同样是祈祷的圣女，这大概是日本文化的一项表征吧）</p><p>这样的世界观能够诞生很多不同类型的作品：古典神话，克苏鲁神话，政治小说，等等。&lt;天气之子&gt;，实质上便是一个古典神话的现代演绎，里面充满了超自然的难以解释但又能够解释（引入神即可）的要素。影片的主题似乎多元似乎不清晰，但至少爱是一个清晰的主题，爱就完事。</p><p>我比较关心的是对那些超自然现象的社会解释：为什么要设置阳菜成为巫女的原因？神的目的是什么？等等。从这个角度看，我看到的是一个小圆式或者克苏鲁式的故事：愚昧的神在进食本能的指引下选择少女成为巫女，神因吃下少女而欢愉，因吃不下少女而愤怒。每个时代都会出现成为祭品的巫女，但男主人公为了女主违逆神的意志，展现了人类的勇气与抗争。</p><p>影片里很多细节很棒，比如对人物的刻画(男主的腼腆，女主的善良，nagi的风骚)，比如突然紧张的气氛，还有还有，此处不一一列举。</p><p>但电影在主题上显得较为混乱，这是硬伤：中途似乎在强调天气对人心情的变化，后期似乎在探讨人与世界的选择，但并未做深刻的诠释。</p><p>我对影片中的一些细节也不甚满意，比如异地三年（太不负责任了，电影的处理也太理想太浪漫了），比如拿枪指人，霹雷。毕竟十六岁啊，不是出个门就是麦田里的守望者来着，得有思想才行啊。推荐同学们不要学男女主翘课打工早恋，学习知识才是正道。</p><p>如果我还是十六岁，我可能会很认同这样的主题与价值观吧。</p><p>十六岁真好啊。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 批评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【围炉夜话】番剧推荐及简评——第一辑：cult</title>
      <link href="/2019/10/20/Comments-Animes-My_Recommendations_Cult/"/>
      <url>/2019/10/20/Comments-Animes-My_Recommendations_Cult/</url>
      
        <content type="html"><![CDATA[<p>虽然标题是番剧，但所推荐内容是较广义的……咱对这些名词归属也不大懂。</p><a id="more"></a><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>模仿steam商店简介所做的娱乐向简介。</p><p>排序与喜好程度无关，随性的排序。</p><p>含一定量的剧透。</p><h1 id="简评"><a href="#简评" class="headerlink" title="简评"></a>简评</h1><p>被标上cult的作品一般会有哪些特点呢？似乎不好说清楚。这更多是从观众行为而非作品本身特点出发的分类。</p><p>《兽爪》是从头cult到尾的，看似随性实则认真的作品。</p><p>《小圆》的cult性质完全不在于剧本而在于魔女结界的艺术风格，虽然这部作品的剧本足够优秀。</p><p>《大护法》的血腥程度已经足够了，虽然杀的不是人流的血也是绿色的，但这是真正意义下的恐怖统治。</p><p>《怪化猫》画面谈不上cult，但分镜是的。</p><p>《柯赛特的肖像》，也是因为画面入选的，还有其中梦幻的镜头。</p><p>《大世界》是优秀的国产动画电影，很荒诞，也很现实。</p><p>《Psycho-Pass》不算。</p><p>（其实这里面贴的除了《兽爪》其他cult意味不是特别浓重……）</p><h1 id="1-兽爪"><a href="#1-兽爪" class="headerlink" title="1.兽爪"></a>1.兽爪</h1><p>ED：<a href="https://music.163.com/#/song?id=826418" target="_blank" rel="noopener">好き</a></p><p>深刻（？）而混乱的世界观，故事线。乌七八糟的哲理。</p><p>草稿式的粗犷的画面，时而会出现写实的元素。</p><p>不时闯入画面中的超现实场景与荒诞。</p><p>血腥，暴力，性。</p><p>纯粹的爱情，纯粹的浪漫。</p><h1 id="2-魔法少女小圆"><a href="#2-魔法少女小圆" class="headerlink" title="2.魔法少女小圆"></a>2.魔法少女小圆</h1><p>OP：<a href="https://music.163.com/#/song?id=489998110" target="_blank" rel="noopener">コネクト</a></p><p>红蓝主题曲：<a href="https://music.163.com/#/song?id=28138667" target="_blank" rel="noopener">and I’m home</a></p><p>高度个性化的人物，从形象到性格。</p><p>萌萌的小圆脸，超治愈。可爱的外星萌兽，和少女并肩作战，拯救宇宙。</p><p>充满艺术感的魔女结界，包括11种以上不同的富有冲击力的艺术风格。</p><p>富有未来感的前卫建筑风格，取材自全球各地。</p><p>悠扬咏叹的音乐，出自梶浦由记之手。</p><p>无处不在的象征。</p><blockquote><p>我，真是个笨蛋呢。</p></blockquote><p>（不是很推荐《叛逆的物语》）</p><h1 id="3-大护法"><a href="#3-大护法" class="headerlink" title="3.大护法"></a>3.大护法</h1><p>纸片眼睛，注视着你。不说话。</p><p>蚁穴，死镇。从始至终平静之下的惊悚。</p><p>极富文学性的台词。</p><p>什么，是人呢。</p><p>（想不透为啥会有人觉得里面的台词尴尬）</p><h1 id="4-怪化猫"><a href="#4-怪化猫" class="headerlink" title="4.怪化猫"></a>4.怪化猫</h1><p>流动的浮世绘。</p><p>迷幻的世界。</p><h1 id="5-柯赛特的肖像"><a href="#5-柯赛特的肖像" class="headerlink" title="5.柯赛特的肖像"></a>5.柯赛特的肖像</h1><p>玻璃器皿，娃娃，眼球。</p><p>意识流下的叙事。</p><p>哥特式恐怖。</p><hr><p>初稿写于2019年08月02日</p><p>完稿写于2019年10月20日</p>]]></content>
      
      
      
        <tags>
            
            <tag> 批评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【图灵之路】应用快捷键提升效率（更新至2019-09-25）</title>
      <link href="/2019/09/25/Other-Hot_Keys/"/>
      <url>/2019/09/25/Other-Hot_Keys/</url>
      
        <content type="html"><![CDATA[<p>熟练地掌握快捷键，在很大程度上能够提高使用计算机（不仅仅是编程）的效率。</p><a id="more"></a><p>熟练地掌握快捷键，在很大程度上能够提高使用计算机（不仅仅是编程）的效率。</p><p>至于能提升多少，我就不知道了……这个应该由人文社科的同学来研究。</p><p>作为平凡的学生，熟练掌握快捷键是很爽的。本来要3s做的一个动作，现在0.5s就能做了；本来要按4步的动作，现在1步2步就能做了。没试过不能体会这种感觉，试过了就回不去了。因为是真的爽啊。</p><p>（文中涉及的很多快捷键不好归类，推荐随意浏览，或是想找快捷键时F3）</p><h1 id="平凡的快捷键"><a href="#平凡的快捷键" class="headerlink" title="平凡的快捷键"></a>平凡的快捷键</h1><p>F1：显示帮助</p><p>F2：重命名</p><p>F3：搜索（文本编辑器中、文件夹中、浏览器中）</p><p>F4：显示最近浏览目录（文件夹中）</p><p>((ctrl)+(shift))+(fn)+arrow：到达/选中 文章/页/句/词 首/尾</p><p>ctrl+L：选中一行（删除时用）</p><p>win+V：剪切板</p><p>win+R：运行（cmd、注册表等）</p><p>win+D：显示桌面</p><p>win+E：资源管理器</p><p>win+L：锁屏</p><p>win+shift+S：截屏</p><p>win+W：windows ink（包括便笺、草稿、截屏，弱弱吐槽一句，这个便笺和草稿都为啥强制全屏啊）</p><p>ctrl+S：保存</p><p>ctrl+Z：撤销</p><p>ctrl+X/C/V：剪切/复制/粘贴</p><p>ctrl+‘+’/‘-’：页面放大/缩小</p><p>ctrl+滚轮移动：页面放大/缩小</p><p>ctrl+F/H：查找/替换（需要注意“全部替换”和“下一个”在不同文本编辑器/IDE/浏览器中可能不一）</p><h1 id="资源管理器中的快捷键"><a href="#资源管理器中的快捷键" class="headerlink" title="资源管理器中的快捷键"></a>资源管理器中的快捷键</h1><p>alt+2：创建新文件夹</p><p>键入文件(夹)名的前面部分，即可定位到该文件(夹)，这一性质也适用于其他场合。</p><h1 id="浏览器中的快捷键"><a href="#浏览器中的快捷键" class="headerlink" title="浏览器中的快捷键"></a>浏览器中的快捷键</h1><p>F11：全屏</p><p>F12：开发者工具</p><p>ctrl+H：历史</p><p>ctrl+B：书签</p><p>ctrl+W：关闭标签页</p><p>ctrl+tab：切换标签页</p><p>alt+tab：切换窗口</p><h1 id="vim中的快捷键"><a href="#vim中的快捷键" class="headerlink" title="vim中的快捷键"></a>vim中的快捷键</h1><p>gg：回到文首</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>fc：用以比较两个文件的差异，对拍的时候很好用。</p><h1 id="一些小结论"><a href="#一些小结论" class="headerlink" title="一些小结论"></a>一些小结论</h1><p>在文件夹中直接输入文件夹名/文件名即可定位到要找到文件夹/文件，这个性质可以推广到其他环境下。</p><h1 id="愿景"><a href="#愿景" class="headerlink" title="愿景"></a>愿景</h1><p>（所谓愿景，就是没有实现但是想要实现的功能）</p><h2 id="快速新建txt"><a href="#快速新建txt" class="headerlink" title="快速新建txt"></a>快速新建txt</h2><p>要顺手写一个.cpp文件怎么办？自然可以先打开IDE然后“新建文件”然后“保存”。但是“保存”要设置路径好麻烦。我习惯把文件分门别类放到不同的目录里，在这个前提下“保存”是真的麻烦。</p><p>个人一般都是在当前目录下搞事情。新建.txt改后缀为.cpp，有时候也改成.py，.md等等等等。这里头的问题主要在新建.txt上，因为要“右键，w，up，up，enter”，巨麻烦。然后w完电脑还要抽风一小会儿的。有没有更快的方式呢？</p><p>改了一下注册表，这样up，up，enter就没了。操作序列为“右键，w，t”，方便了一些，但电脑抽风的问题还是没有解决，而且既要用鼠标还要用键盘好拙劣呀，我想只用键盘实现。仿照alt+2能新建一个文件夹，我们能否给alt+3 bind 一个新建.txt的功能呢？</p><p>用AutoHotKey试了一试，发现电脑还是会抽风，好拙劣啊。</p><p>做不来，太难了。</p><h2 id="分组复制粘贴"><a href="#分组复制粘贴" class="headerlink" title="分组复制粘贴"></a>分组复制粘贴</h2><p>debug的时候常常会遇到这样的问题：代码里面有一些冗余要粘来粘去的，然后测试样例也要粘来粘去的。在win10 1809剪贴板更新之前，这样的需求只能通过重复劳动完成：先把代码复制粘贴，再把样例复制粘贴，经常要在代码与样例间跑来跑去。剪贴板更新了历史记录之后，我们只要规划好要复制的内容的顺序，就不用跑来跑去了，也不用重复复制了，好方便啊。</p><p>（虽然剪贴板已经很方便了，但我还是闲得没事想了一个新方案：分组复制粘贴。</p><p>类比《帝国时代》中我们能给部队编号然后快速定位到军队所在的位置，我们能否给要复制粘贴的内容编个号然后分组处理？比如ctrl+C+1与ctrl+V+1相对应，它们与ctrl+C+2/ctrl+V+2互不干扰，这样子？</p><p>这个方案首先键位比较奇葩……ctrl+C+1要同时用到三根手指然后三根手指还要旋成一个差不多等边的三角形，这对手不是很友好……</p><p>技术实现上，这好像不知是模拟按键了，涉及到剪贴板的工作原理，涉及到内存分配这种系统级编程的问题了……好难啊，做不来。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【围炉夜话】对高等教育中的评价体系的简单批判，以浙江大学为例</title>
      <link href="/2019/09/14/Toughts-On_Evaluations_In_ZJU/"/>
      <url>/2019/09/14/Toughts-On_Evaluations_In_ZJU/</url>
      
        <content type="html"><![CDATA[<p>人上人，人中人，人下人。尊卑贵贱，一目了然。</p><a id="more"></a><p>不开心。不开心就想打人，但是我谁都打不过。我谁也打不过，我什么也不是。</p><h1 id="从高考看评价体系的必要性与复杂性"><a href="#从高考看评价体系的必要性与复杂性" class="headerlink" title="从高考看评价体系的必要性与复杂性"></a>从高考看评价体系的必要性与复杂性</h1><p>我们在批判前先应搞清楚我们为何而批判。比如高考，天天有人在批判。为什么？因为高考决定了高等教育资源的分配，这对于今后发展的竞争力（无论是教学资源差异造成的能力差异，抑或毕业院校在各高校、机构中的认可度，抑或其他）也有极大的影响。相较之下，批判高中期末考的人就少得多，因为期末考在教育资源的分配上影响相对较小。所谓“一考定终身”，便是对高考在影响资源分配上的决定性作用的肯定。当然，这句话也是可以批判的，你可以感性感受，抑或理性分析，此处略去不表。</p><p>再以高考批判为例。既然高考这般重要，在国计民生中占有此般地位，它理应有高认可度的评价体系，理应有完善的公平的程序。而事实上，许多高考批判的文章，都是针对评价体系（高考所涉内容）及其影响（应试教育模式）。我们争论某块内容值不值得考，争论一些具体的题目是否合理，争论以高考为导向的应试教育模式是否让我们的孩子。这些每个都是较大的话题，此处略去。</p><p>但在高考作为决定资源分配的属性上，人们大多是持肯定态度的。显然，这里也有不公平，资本对于基础教育资源有一定的影响，但无可否认的是，1978至今，无数出生卑微的人们通过高考实现了阶级跃迁，改变了自己的生活，改变了在没有高考的时代中趋于固化的人生轨迹。这样的一种制度在血缘、资本之外引入了新的为大多数人所肯定的变量，从而让人们能够通过学习改变人生，也使社会发展更具活力。</p><p>（以上陈述均无数据支撑，欢迎批评）</p><p>从高考的例子中我们不难看出，人们对于“依据学术评价分配资源”这样一种模式多是肯定的，但对于评价的宏观方向还有细则则各具不同看法，这些不同的看法多是从对个人有益的角度出发的，如要求调整学科难度，改变学科权重，实行南北榜制度或是全国一卷制度，采用赋分制度，等等等等。高考常常会改革，几乎每项改革都会伴有一定的争议。总而言之，高考是一个极为复杂的系统，里面所涉的变量极多，要实现全局最优是尤为困难的（如何定义“全局最优”也是一个问题）。</p><p>另外，虽然高考总体而言较为公平，能够以相对平均的方式实现资源分配，但它在个人层面上存在一定的不确定性。大数定律能够保证“清北实力”的学生不掉到一本，但无法保证他们稳上清北。故而，高校的自主招生政策成为了优生的一份保险，增加了高校优生共赢的可能性。</p><h1 id="浙江大学评价体系中的一些不合理要素"><a href="#浙江大学评价体系中的一些不合理要素" class="headerlink" title="浙江大学评价体系中的一些不合理要素"></a>浙江大学评价体系中的一些不合理要素</h1><p>在高等学府中，评价体系变得更加复杂。学校往往会依据GPA对学生进行综合评价，结合其他乌七八糟的制度。以下内容仅与GPA而不涉及其他乌七八糟的制度。所批判院校为浙江大学。</p><p>GPA的计算方式大抵是课程学分越高，其权重越大。课程按百分制或是五级制计分，依据赋分制给出绩点。这里明显继承了赋分制度的缺陷：变化率过于陡峭。分数差一分，绩点可以没差，也可以差出0.3，这就造成了卡绩的现象。尤其是微积分等5学分的大课，卡绩对总绩点影响巨大。在80分段，80分只有3.6，而89便有4.5，于是落于此分段常会叫人心惊胆战。分数的密集与绩点的疏松间的矛盾导致非核心考核项会对绩点产生较大冲击（尤其C语言程序设计这类水课，题目没得往深度出，就考视力考所谓“细心”了？都什么阶段了还这样搞学生？有意思的很，有意思），这对能力极值较高而均值较低的同学而言是不利的，而私以为这样的同学应受到更高的评价。</p><p>另外，不同教师的个人评价体系也不尽相同。有的教师站在学生的立场思考，觉得大家拿了高分会开开心心，就尽力把分数往高处打，这样的教师往往较受欢迎。有的教师比较苛刻，不擅长站在学生的立场思考，打的分数一般都比较低，这样的教师往往会被唾骂。还有一些教师，打分搞两极化。还有一些教师，评价标准奇葩，生物课按字的美丑打分，你妈的怎么不去开书法课？还有一些教师，随机打分。还有一些教师……在“查老师”上，教师下方的评论不光与其个人对课程的表达相关，更和学生的绩点挂钩。于是在攻击教师的陋习之外，不少评论也会攻击其给分（当然，如果是第一类教师，那么下方会有很多赞美，各种角度来的赞美）。不得不承认，这很功利。但也不得不承认，这正是我们趋利避害，希望高绩点心理的直接作用。</p><p>学生选课种存在的变数导致同一个学生的绩点走向会依据课程不同而不同。不同课程导致的变数很明显，同一门课程也能因教师不同而造成较大变数。有的教师事多，有的教师事少。若前者均绩高于后者，则无可厚非；若前者均绩低于后者，就挺滑稽。私以为个人历史素养不算太差，写了一学期论文，也给老师看看做了一些修正，到头来成绩低得离谱（其他班的同学则不然），就挺滑稽。生活本身也很滑稽，表面上，大家都笑嘻嘻的，但大家心里怎么想，又有谁知道呢。又有谁知道呢。</p><p>这些是存在的问题，我并不知道怎么解决。学校也有一些调整方案，比如正态分布，比如互评制度。这些制度引得学生怨声载道（也有老师表示否定这样的制度），校方的态度则是坚持这些制度并不做调整。难道这些制度很完美不需要调整么？人家改革开放都永远在进行时你一个正态分布完美地可以传之无穷了？具体问题具体分析，难道所有通识课的设置都可能符合正态分布么？我不知道。互评制度则更为人所诟病。如果大家做的工作都差不多，态度也都较积极，硬是要分出个级别是什么意思？提前感受社会险恶人心冷暖？在一个小组中，存在划水的同学是可能的，但大家都认真的情况也不在少数，这是很可能的情形。校方做出的制度不能让多数同学认可，校方也不对其做出符合历史潮流的修正，不能给出让大家信服的解释，而是听之任之，固执己见，视学生为任己宰割的鱼肉。这样的大学，是国内一流的大学么？这样的学校，是培养人才的学校么？培养技工差不多，查脸色，搞关系，抄文章的高级技工，很棒哦。</p><p>（只是偏激的一己之见，暂不接受反驳，如不赞同，略去此段即可）</p><p>我们的学校讲“求是”。在学术上，实事求是固然是好的，这是为学应秉持的态度。但在管理层面，所谓“求是”也有丝“古板”“缺乏变通”的意味，仿佛校方是一个大家长，学生就该听家长的话，不该质疑。但是，这样不合理的预设自然不会有合理的结果。骑在自行车上的打卡一族，传了一代又一代的物理实验报告，求是么？教师们基于这些事实所给的成绩，求是么？三本之名，看上去是对浙大学术成就的否定，但我更觉得，这是对于浙大管理与制度设置上的否定。说了这么多GPA相关的，其他能说的还很多，例子过多，只举一个。把学校当公园建，校外人士直接放进来，抢学生的饭，堵学生的路（暑期旅游团），很求是哦，很创新哦。</p><p>觚不觚，觚哉！觚哉！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【白冠之礼】深入浅出密码学：第二章 序列密码</title>
      <link href="/2019/09/08/Notes-Understanding_Cryptography-CH02/"/>
      <url>/2019/09/08/Notes-Understanding_Cryptography-CH02/</url>
      
        <content type="html"><![CDATA[<p>密码学！</p><a id="more"></a><p>（这篇文章本该有图的，实际却没有，因为画图太累惹……LFSR的部分对着图看效果会好很多，但我懒得画，同学们请自己脑补吧~）</p><h1 id="何谓序列密码"><a href="#何谓序列密码" class="headerlink" title="何谓序列密码"></a>何谓序列密码</h1><p>上一章中我们了解了对称密码的一类炒鸡简单的情形：替换密码，这一章我们继续讲对称密码学。</p><p>通过对现有加密算法类型的归纳，我们发现对称密码主要可分为序列密码（Stream Ciphers）还有分组密码两大类。其差异是较大的：序列密码对每位加密，而分组密码将原文分成若干块进行加密。</p><p>序列密码相较分组密码使用较为不广泛一些，但它适合在计算资源受限的设备上运作（因为小而快？）。在效率上，二者的所差实际不多。</p><p>本章我们主要讨论序列密码，因为这是一个大话题。</p><p>序列密码分<strong>同步序列密码</strong>与<strong>异步序列密码</strong>两类。前者是在线的：实际使用的密钥由预设的密钥与原文一并生成；而后者是离线的，所设的密钥就是加密的密钥。容易看出，前者的安全性更高一些，但是所耗时间更久（因为不能并行计算了）。但实际生活中，还是同步序列密码用的更多一些。</p><p>至于序列密码的加解密，非常简单：加密是$y_i = e_{s_i}(x_i) = x_i + s_i \ mod \ 2$。解密是其反函数也便是其本身。</p><p>为什么序列密码的加密解密可以这么简单呢？因为在模二加法等价于异或，而已知$x_i, y_i, s_i$的一个元素无法求出剩下两个元素。只要$s_i$有良好的随机属性，那么已知原文的部分片段及密文是无法解出其他原文的。书上说，异或运算具有可逆性，是完全均衡的（输出有多原像且它们出现的概率均等）。这二者保证了序列密码是一种良好的对称密码。</p><p>从上文的表述我们容易发现：序列密码的安全性完全取决于密钥序列。故而密钥序列的生成是序列密码的关键。密钥序列必须有良好的统计属性，足够“随机”，这样才能提升安全性。故而，我们需要了解随机数相关的知识。</p><p>（序列密码也被称为Vernam加密，因为它最早在1917年由Gilbert Vernam发明）</p><h1 id="随机数生成器"><a href="#随机数生成器" class="headerlink" title="随机数生成器"></a>随机数生成器</h1><p>在讲随机数生成器之前，我们就不讲随机数了。顾名思义，随机数是数列中的概念，表明这一数列足够“随机”。至于“随机”，这是一个玄学词汇。我们往往会依据数据的各项统计属性刻画它的“随机性”，或，可预测性。在计算机中，我们会使用三类（其实是两类）随机数生成器（Random Number Generator）。</p><p>其一，TRNG（T for True），真随机数生成器，即通过各式物理过程生成随机数。这样做的好处在于输出几乎具有不可复制性。</p><p>其二，PRNG（P for Pseudo），伪随机数生成器，是可以计算出来的，但具有良好的统计属性（<del>至于是什么属性，就别问啦</del>）。比如ANSI C中的rand()函数，就是通过一个初始的种子还有一个运算实现的。</p><p>其三，CSPRNG（Cryptographically Secure Pseudo-Random Number Generator），密码学安全的伪随机数生成器。它是PRNG的一种特例，具有更多的属性：它不可预测（当然，这是不可能的，毕竟是伪随机数。这里不可预测指给定部分密钥，计算出前继位/后续位在计算上是不可行的，即不存在时间复杂度为多项式的算法能够确定前继位/后续位）。</p><p>我们先不管随机数生成器的实现细节，假设我们有了足够标准的上述三类随机数生成器作为我们的密钥流生成器，那么我们要怎么得到一个完美的序列密码的密钥呢？在此之前，我们需要看这个“完美”要如何定义：密码体制若在无限计算资源的情况下也无法破译，则其为无条件安全的，或信息理论上安全的。</p><p>很明显，这个定义和计算安全不一样，它更强一些。那么是否存在无条件安全的密码呢？一次一密（OTP，One-Time Password）便是这样一种无条件安全的密码。它有三个条件：①通过TRNG生成密钥序列；②有且仅有合法通信方知道密钥序列；③每一密钥序列位$s_i$仅被使用一次。</p><p>很明显，这样的OTP是无条件安全的。我们把等式系统写出来，容易发现这样一个等式系统是不可解的，知晓$s_i$与知晓$x_i$完全等价。这里用到了第一个条件：随机数是通过TRNG生成的。如不然，各位间存在这样那样的函数关系，即使求解很困难，这样的等式系统在理论上仍是可解的（因为它们彼此不独立），已知部分明文的话。</p><p>这样的OTP虽然理论上似乎很理想，但它的使用并不广泛，条件一首先是一个限制，但主要的问题在条件二与条件三，尤其是条件三。条件二要求信道绝对安全，但这并不容易满足。而条件三要求一段密钥只能用于一篇原文且密钥需与原文登长。这里，密钥只能使用一次的限制要求通信双方频频交换密钥，而密钥与原文等长的条件则大大提高了交换密钥的成本（想象一下，你在传输1GB的机密视频前要先交换1GB的密钥……）。</p><p>因为这些原因，实际生活中我们很少使用OTP。但它启迪了我们，只要密钥足够随机，攻击者便无法通过破解得到原文。所以问题在于如何设计随机数生成的算法使得得到的随机数足够随机，这是一个被研究了很久的话题，而我们不妨看看现实生活中的序列密码是生成随机数的，具体是如何运作的，它们与OTP存在怎样的不同。</p><p>需要说明的是，实际的序列密码均不是无条件安全的，我们期望它们是计算安全的，即采用最好的算法的操作数的下界也在我们的期望之上。但这一定义里存在许多问题，其中一个便是：“最好的算法”如何确定？</p><p>为了避免OTP多次交换密钥的麻烦，我们采取新的模式：通信双方交换一次短密钥，通过密钥序列生成器来依据初始密钥（它很像是种子）生成实际使用的密钥。</p><p>那么这个密钥生成器要如何设置呢？我们能否通过线性同余发生器（比如ANSI C中的rand()），一种PRNG得到密钥序列呢？很明显，不能。因为简单的已知明文攻击足够帮助攻击者计算出整个密钥。</p><p>所以，我们需要CSPRNG。利用反馈移位寄存器可以得到CSPRNG的一种可能。那么我们就来学学吧。</p><h1 id="基于移位寄存器的序列密码"><a href="#基于移位寄存器的序列密码" class="headerlink" title="基于移位寄存器的序列密码"></a>基于移位寄存器的序列密码</h1><p>本节所述“移位寄存器“均为线性反馈移位寄存器（LFSR，Linear Feedback Shift Register）。它由若干时钟存储元件（触发器）还有一个反馈路径组成。触发器的个数称LFSR的度。LFSR通过反馈网络计算一些触发器的异或和，将其作为上一触发器的输入，重复此过程，这便是LFSR的基本运作模式。</p><p>书上给出了一种度为3的简单的LFSR模型，我们能够通过它对LFSR的运作模式产生一些感性的印象。于是，我们可以抽象出LFSR的数学描述。我们注意到，触发器输出后的开关决定了该输出是否参与反馈，故我们可以$p_j$，反馈系数刻画某一输出对整一反馈路径的贡献。而本次输出与且仅与反馈系数、此前的输出（输入也算在输出里了）存在关联。简单归纳后我们不难得到：</p><p>$s_{i+m} = \sum\limits_{j = 0}^{m-1} p_j \cdot s_{i+j} \ mod \ 2, s_i, p_i \in \{ 1, 2 \}, i = 0, 1, 2, \dots$。</p><p>显然，本次输出是此前输出的一些线性组合，故LFSR也被称为线性递归（为啥不叫递推呢）。</p><p>很自然，LFSR中可能的状态共$2^m$种，其中全0的下一个状态还是全0。至于其他状态，它必然绘在若干步之后陷入某个循环之中。故度为m的LFSR可产生的最大序列长度为$2^m - 1$。</p><p>我们如何确定LFSR的循环节，换言之，我们如何确定$(s_i, s_{i+1}, \dots, s_{i+m-1})$在给定的递推条件下多少步后会走进一个循环里呢？我们考虑这一LFSR的特征多项式$P(x) = x^m + p_{m-1}x^{m-1} + \dots + p_1 x + p_0$。那么当此多项式为本原多项式时输出序列的周期能取到$2^m - 1$。证明？我不懂哦。</p><p>至于LFSR的安全性，其实它是堪忧的。如果LFSR被作为序列密码使用，那么密钥k便是反馈系数向量$(p_{m-1}, \dots, p_1, p_0)$。假设攻击者知道一些明文，一些密文，他还知道LFSR的度m，那么他便可以展开攻击了：把$s_m = \dots, s_{m+1} = \dots$写出来，只要m个方程就够了。然后我们发现这是一个由m个方程组成的m元一次异或方程组，跑个高消就能解出密钥了。这足以说明LFSR的密码学属性之差了。这也反映LFSR是一个具有良好统计属性但密码学属性的PRNG实例。</p><p>然而，LFSR并未丧失其所有密码属性，我们可以把多个LFSR垒在一起得到一个健壮的密码体系。比如Trivium就是这么来的。至于为什么垒在一起就更安全了呢……这我就不懂了。</p><p>书中介绍的Trivium是一种较新（新？2005年呀）的序列密码，它是否安全还是有待时间检验的（好像是有不少攻击，网上能搜得到，虽说并未细看）。它是把三个移位寄存器垒在一块，然后它的独特之处在于放了个AND操作，这样Trivium的数学描述便不完全是线性的了。这Trivium的设计初看也挺复杂，就不分析了。</p><p>事实上，序列密码非常非常容易受选择明文攻击。因此，我们需要在输入参数里加入一个nouce，它是随机生成的，并不需要保密，只是用于让同一密钥每次生成的密钥序列都不相同，以抵御选择明文攻击。</p><p>Trivium的加密分三个阶段：初始化，热身，加密。初始化阶段用于读入nonce还有清空寄存器；热身阶段计时4×288=1152次，用于充分随机化密码；加密阶段从第1153周期开始，每位吐出的位便是密钥序列位。</p><p>Trivium的一大特点在于它的紧凑性（硬件实现上的紧凑）。Trivium由288位长的移位寄存器组成，其所占面积约为4000个门，大致可以16位/时钟周期的速率计算密钥序列（为什么是这样的呀）。来做一下简单的计算，假设硬件设计的主频是125MHz。那么加密速率为16位×125MHz=2G位/秒。（当然，没有比较，我们并无法知晓这快在哪里）</p><h1 id="要点回顾"><a href="#要点回顾" class="headerlink" title="要点回顾"></a>要点回顾</h1><p>1.在绝大多数领域，分组密码的使用要广泛于序列密码，当然也有例外的情形，尤其是计算资源受限的情况之下。</p><p>2.在对随机数的要求少，很多时候PRNG就够了。但在密码学这一块，我们需要CSPRNG或是TRNG。</p><p>3.OTP是无条件安全的，但是它的应用比较受限，因为它苛刻的条件。</p><p>4.LFSR虽具有良好的统计属性，但它并非很好的序列密码，除非我们把多个LFSR组合起来。</p><h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><p>2.1是个人应该都会吧。顺便，<em>Kaspar Hauser</em>我个人并不是很喜欢。</p><p>2.2中提了一些概念：密钥的生命周期，生命周期内与外密钥的存储，密钥的生成与分发。要求我们以OTP为例解释这些概念。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">一次一密系统在实际生活中的意义：在需要近乎绝对安全且对资源消耗几乎没有限制的场景下</span><br><span class="line">密钥的生命周期：使用前无限期，使用后作废</span><br><span class="line">在生命周期内密钥的存储：安全地存储</span><br><span class="line">在生命周期后密钥的存储：无需存储</span><br><span class="line">密钥的分发：通过安全的信道</span><br><span class="line">密钥的生成：物理手段</span><br></pre></td></tr></table></figure><p>2.3是找出多次使用的假OTP（不满足第三条件）的vulnerability。很明显，它易受已知明文攻击或者选择明文攻击。</p><p>2.4没意思。2.5让手工模拟LFSR的计算过程。</p><p>2.6已知明文攻击即可，解50个异或方程组即可。复杂度为$50 \times (200^3) = 4e8$，标准PC可以一跑。</p><p>2.7不懂。表2-3里没有m=8的本原多项式。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Understanding Cryptography exercise 2.8</span></span><br><span class="line"><span class="comment">// code by Ness</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LEN = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> feedback[LEN+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> seq[(<span class="number">1</span>&lt;&lt;LEN)+<span class="number">5</span>];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; hash_pool;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">encode</span><span class="params">(<span class="keyword">int</span> begin)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; LEN;i++)</span><br><span class="line">&#123;</span><br><span class="line">ans *= <span class="number">2</span>;</span><br><span class="line">ans += seq[begin + i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> begin)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; LEN;i++)</span><br><span class="line">ans ^= (feedback[i] * seq[begin + i]);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">load_feedback</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">feedback[<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(id == <span class="number">1</span>) feedback[<span class="number">0</span>] = feedback[<span class="number">1</span>] = <span class="number">1</span>; <span class="comment">// x^4 + x + 1</span></span><br><span class="line"><span class="keyword">if</span>(id == <span class="number">2</span>) feedback[<span class="number">0</span>] = feedback[<span class="number">2</span>] = <span class="number">1</span>; <span class="comment">// x^4 + x^2 + 1</span></span><br><span class="line"><span class="keyword">if</span>(id == <span class="number">3</span>) feedback[<span class="number">0</span>] = feedback[<span class="number">1</span>] = feedback[<span class="number">2</span>] = feedback[<span class="number">3</span>] = <span class="number">1</span>; <span class="comment">// x^4 + x^3 + x^2 + x + 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">load_feedback(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> seq_encode = <span class="number">1</span>;seq_encode &lt; (<span class="number">1</span> &lt;&lt; LEN);seq_encode++)</span><br><span class="line">&#123;</span><br><span class="line">hash_pool.clear();</span><br><span class="line"><span class="keyword">int</span> seq_encode_copy = seq_encode;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">seq[i] = seq_encode_copy % <span class="number">2</span>;</span><br><span class="line">seq_encode_copy /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">hash_pool.insert(encode(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> step = <span class="number">0</span>;;step++)</span><br><span class="line">&#123;</span><br><span class="line">seq[step + LEN] = calc(step);</span><br><span class="line"><span class="keyword">int</span> hash_val = encode(step+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(hash_pool.count(hash_val))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= step + LEN;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, seq[i]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d\n"</span>, step+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">hash_pool.insert(hash_val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（当然，2.8背后的数学原理我一点也不懂不要问我）</p><p>2.10也不知道什么情况就有点不想做……这本书的印刷是怎么回事？</p><p>2.11就一综合题，要求我们把之前所有的口胡都转化为实践，有点烦的……（还是口胡舒服啊）懒得跑高消，就手解方程组了。</p><p>2.12手工模拟即可，因为寄存器里的1很少（良心出题人），关于当下的1什么时候会转移到会有影响的位置就好了。算出来只有第2、3、68、69位是1。从这个例子我们可以看出来，Trivium的周期是较大的，某一位要经过较多shift操作之后才能影响到全局。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 信息安全 </tag>
            
            <tag> 课程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【图灵之路】从零开始的ICPC：杂项整理（2019-08-12更新）</title>
      <link href="/2019/08/25/ICPC-Naive_Items/"/>
      <url>/2019/08/25/ICPC-Naive_Items/</url>
      
        <content type="html"><![CDATA[<p>杂项\cry指的不是不好归类的算法，而是一些简单的需要注意的事项。</p><a id="more"></a><p>杂项\cry指的不是不好归类的算法，而是一些简单的需要注意的事项。</p><p>这篇文章很多该写的地方并没有写完甚至没有开写。</p><p>常读常新，提醒自己哪些错误经常犯，有意识地矫正。</p><h1 id="二分中的细节"><a href="#二分中的细节" class="headerlink" title="二分中的细节"></a>二分中的细节</h1><p>左闭右闭：mid = l + r + 1 &gt;&gt; 1，l = mid + 1，r = mid</p><p>左闭右开：mid = l + r &gt;&gt; 1，l = mid，r = mid - 1</p><p>l = mid - 1找区间中满足条件的最大索引；r = mid + 1找区间中满足条件的最小索引</p><p>如果数组是a[] = [1, 3, 3, 3, 5]，那么</p><p>lower_bound(a, a+5, 3) = a+1, upper_bound(a, a+5, 3) = a+4</p><p>lower_bound(a, a+5, 4) = a+4, upper_bound(a, a+5, 4) = a+4</p><p>lower_bound(a, a+5, 5) = a+4, upper_bound(a, a+5, 5) = a+5</p><p>lower_bound(a, a+5, 5) = a+5, upper_bound(a, a+5, 5) = a+5</p><p>概括起来，就是lower_bound返回大于等于x的最小地址，如寻找不到这样的下标，则返回尾地址；至于upper_bound，则把上文的大于等于改为大于。</p><p>常见</p><h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><p>忘记特判。</p><p>未认真读题/关注clarification或notes。</p><p>未初始化全局变量（特例：树状数组在清空后无需初始化）。</p><p>变量名重复。</p><h2 id="关于溢出（数值）"><a href="#关于溢出（数值）" class="headerlink" title="关于溢出（数值）"></a>关于溢出（数值）</h2><p>取模不及时常会导致数字溢出模数，或者忘加LL可能导致中间结果溢出int。</p><p>为防止溢出，最好处处取模，处处用LL（包括所有常数），这是一个ctrl+F/H的事，却能节省不少的没有必要的心思。</p><p>需要指出的是，处处取模只针对大多数情况，如果数字在指数上（如Polya定理的题目），则万不可取模。某些毒瘤出题人把模数取小后会这样坑人。</p><p>有些题目的中间结果可能溢出double，而又只涉及乘法运算，这种时候可以考虑取对数。</p><h2 id="关于溢出（内存）"><a href="#关于溢出（内存）" class="headerlink" title="关于溢出（内存）"></a>关于溢出（内存）</h2><p>把数组开到maxn不一定总是能防止runtime error，具体把数组开到多大，需要留个心眼。</p><p>把数组开到多大才能足够安全并且不会MLE呢？可以采用简单的费米估算：1e6大小的int数组所用空间约为4MB（另，1Mib≈1MB）。</p><p>FTT/NTT中数组必开到二的幂次+eps。</p><p>无向图连边时数组需开到maxn&lt;&lt;1。</p><h1 id="简单的结论"><a href="#简单的结论" class="headerlink" title="简单的结论"></a>简单的结论</h1><p>1.求$x \cdot (x-1) \geq y$的最小解，无需二分。只要检查$x = \lfloor \sqrt y \rfloor$是否满足即可。如不满足，则x++。</p><h1 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h1><p>1.ctrl+H可快速替换int为LL，%d为%lld，1为1LL。</p><p>2.ctrl+F在修改代码中的某类对象时可以指出这类对象都在哪出现过。</p><p>3.namespace中存板子可以降低程序的耦合度，提高程序员的效率。</p><p>4.python极其适合用来生成随机测试数据，图论题的数据除外。</p><h1 id="带东西"><a href="#带东西" class="headerlink" title="带东西"></a>带东西</h1><p>算法书要自己读过理解过，对里面的内容有结构性的认识带过来才派得上用场。<del>当然现场学算法也无不可</del></p><p>语法书在不让使用通讯工具的场合是必要的，比如JAVA的语法书，PYTHON的语法书。C中一些不常用库的语法也要记记，比如time.h等（带小册子也行打印稿也行）</p><p>数学书：数分、线代、概统、离散、数论、<del>图论、抽代</del></p><p>字典要带也带吧，虽然感觉并不能派上用场。（这些出题人怎么都这么骚，经常出阅读理解题，还有unidirectional可还行）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【围炉夜话】历史档案：废弃项目&quot;whatolearn&quot;</title>
      <link href="/2019/08/15/Project_History-Whatolearn/"/>
      <url>/2019/08/15/Project_History-Whatolearn/</url>
      
        <content type="html"><![CDATA[<p>今天没什么想法继续这个项目了。</p><a id="more"></a><p>（目前看来，<a href="https://oi-wiki.org/" target="_blank" rel="noopener">OI Wiki</a>在很大程度上可以代替这个项目？我还要给它找准定位才可能继续下去……）</p><h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>大一下的生活略硬核（但我居然海在划水），涉及了我很多的知识盲区，尤其是web相关的开发知识，我很不是很懂，于是ACTF、设计课、MG比赛就都凉了（就算懂也救不回来，确信）。</p><p>这个设计课其实是比较浮夸的，什么专业的同学都有，他们什么点子都敢提（如果产品经理是这个样子的……突然担忧自己的未来），有的有意思有的没意思，反正我上课基本都在划水，没怎么听大家的展示。（说是设计，但workshop就前几节课有……后面全是作报告搞展示，差评，退化成PPT课了）</p><p>虽然这个课很浮夸跟技术很不搭嘎，但我还是想借着这门课学些东西的，不然太对不起自己了。学什么好呢？借着把大作业的项目做好的机会学一学相关的知识吧！这也是一开始的想法，但是，过了大半个学期都没决定好要做什么。一开学两周想这个想得头晕，想了两周突然想搞个人工智能·卡尔维诺，能续写《看不见的城市》，但是完全不知从何搞起，我也对它最终该如何也没有一个概念模型，于是就咕咕咕了。</p><p>但是助教和张sir还是要应付的，于是学长一开始提的方案就变成我们组的救命稻草了，虽然这个方案大家一直感觉它有什么地方不对，即便改了又改改了又改。虽然最后大作业就是这个方案的调整，但是这个方案实质上是不具有实现可能性的，它所需的技术与数据均于我们的能力范畴外，只是在设定”技术可能实现“的前提下的有一丝应付性质的课程作业，而非完整的项目。我对此并不满意。顺带一题，这个方案名”肴想“。</p><p>想不出好的方案就很烦，每过一节课，就离DDL更近了一周，而我们还一点想法都没有。某夜，我在空虚而毫无头绪完全不知道该想什么东西的时候想，为什么不能做个东西告诉我现在可以想什么，学什么呢。嗯，这个方案好像可以。回寝室把想法整理了一下，在草稿纸上就糊出了“whatolearn”的初代。</p><p>我对这个想法信心满满，感觉大家看到后肯定会赞同然后我们肝一肝就能出项目然后这门课就圆满了因为这个项目实现起来真的很简单，且有一定的实际价值。但是群里没一个人回我，什么消息也没有。cwy学长认为这个项目很不可行，而我说服不了他，争了若干周，还是谁也说服不了谁。我甚至不能把自己的想法说清楚，组员们似乎完全不能理解我的感受。我觉得闲得发慌的时候找点东西学很充实啊。比如现在我在准备暑假的集训，然后我得学些专题，学什么好呢？打开whatolearn，随便刷一刷，刷到“多项式”，嗯，好像一点也不会，那就点进去学吧。选个level 1，看到FFT，嗯，不会，那就去学吧。我觉得这样的项目很有价值，但他们完全get不到我的点，倒是问“为什么闲得没事会去学啊”“这里面有放具体的说明吗”“这和Google有什么区别”这类问题。我一点也回答不上来，就很尴尬，感觉人与人之间还是有代沟的。</p><p>这个项目自己做的话倒也可，可我太废了，想做到网站上但对web一窍不通，想做个app看那些配环境的教程都看得心烦，想写个微信小程序然而看着花花绿绿的界面走马观花了一下就开始自闭。再不济就拿qt糊个板子出来试试看效果吧，可这样又感觉跟实际用起来不一样，又不想做。总之whatolearn搁了好多好多周都没啥进展。我文档倒是写了一点，但也只是自己看得舒心，同学们一点也不理解，这就很打击。</p><p>之后不知怎么又想着拾起来了，然后开始做最容易的用户调研。问了问ljq，很意外，她了解完我的想法后觉得这个项目很棒。看到这句话很开心呀！之后问了问xn，他也很支持这个项目觉得挺有创意。还有蒋哥那句“很有ACMer的风格”的评价很凝练也很有趣。为了完善对照试验，找个非计院的同学测试一下。问了问zwk，他觉得不行。于是我归纳出，他们支持或否定这个项目一般是基于第一印象的。如果不支持，我磨破了嘴跟他们讲也没用，他们理由一堆接一堆的，我反驳不过来。既然如此，我就只给可能使用的同学做吧，把用户群体缩减一下。这样信心有了，我可以继续了？</p><p>事实并非如此……上面提到的探索是我在有一定信心之后才做的。但我的前置技能树太枯了导致学习曲线抖得不行。之前的话，因为没啥信心，就一直在摸鱼。（其实一开始是希望能利用好学长的，利用学长对项目的热情学习web学习db学习blablabla，但是完完全全的，失败啦）</p><p>虽然做不来，交流还是要交流的。因为之后要打ACTF了，就把文档里添上“仿CTF模式”这类关键词，然后cwy学长居然就理解了这个项目的要义……就理解了这个项目不是拿来放水题的是拿来放牛逼（？）板子题的，然后就跟我的思路对上了……虽然他还是不支持我在这门课上用这个项目作为作业，因为画风不一样。</p><p>总之，这个项目是咕了，有点辜负了ljq的期待呢……启示自然是有的：①要把web开发的前置技能点上；②要提升沟通能力，抓住关键点。等等“提升沟通能力”这话我tm讲了多少遍了……</p><p>第二点完全不知道该怎么办。第一点的话，大一下大二上的暑假里租了台服务器学了点皮毛然后上了个贼简单贼简单的项目，名字和whatolearn差不多，叫whatstoday，“今夕是何年”。话说whatolearen我根本找不出一个像样的中文名，太惭愧了……</p><p>如果您对whatolearn译为什么比较好有想法的话，欢迎联系我呀。特别地，如果您对自己的文学素养与语言能力有信心的话，也可以联系我哦（一直想找个文学顾问，不是正经的那种）。联系方式在这个网站上的某处，找隐藏信息非常好玩的呢……</p><p>下面是whatolearn的策划，之前写的，就不放历史版本了，只有最新版。</p><h1 id="whatolearn"><a href="#whatolearn" class="headerlink" title="whatolearn"></a>whatolearn</h1><h2 id="需求来源"><a href="#需求来源" class="headerlink" title="需求来源"></a>需求来源</h2><p>试想这样的场景：你在等车的时候，因为无聊而刷起了微信公众号、知乎、抖音，或者其他。一时你感到愉悦，但刷了一个小时后一阵空虚突然向你袭来，它告诉你你什么都没有干，正如你之前的每一个被娱乐统治的碎片化的时段中一样，而你的微积分还没有掌握，你线代课上的知识点也未曾听懂。</p><p>是否有可能我能够将这些碎片化的时间拿来摄入更有效的信息呢？比如我现在正在学多元函数的极值问题，我怎样摄入相关的知识呢？那空闲时间看纸书并不是现实的，更好的方式是对于一个自己还了解不深的知识点深挖下去，如果有人给我一个“理解拉格朗日乘数法”的任务，我就会通过搜索通过他人的优秀文章自学“拉格朗日乘数法”，而这是能通过手机完成的。（不同领域用手机自学的难度不一，如果任务换成“理解梅涅劳斯定理”，这就很不适合没有纸笔自学了；而数学分析学科用手机自学的难度要稍小一些。whatolearn只聚焦于碎片化时间自学小知识点的学科）</p><p>碎片化时间学习的关键不在知识点要怎么学——网上很多优秀文章都会对知识点有所介绍，关键在于“<strong>给自己任务</strong>”的意识，还有什么样的概念是需要了解的（<strong>学什么</strong>），还有“概念间的层级关系如何”（<strong>知识网络</strong>），以理解自己学到了哪里，还要学什么。</p><p>针对上述同学在空闲时间学习知识的需求，我们开发了这款whatolearn，它能以任务的形式（CTF模式）要求你了解相关的概念，就像老师布置给我们的项目要我们掌握相关知识一样（这用于激发用户搜索的意识）。任务分不同难度，以体现知识的层级关系（简易的知识网络，也包括了关键点）。</p><h2 id="调研背景"><a href="#调研背景" class="headerlink" title="调研背景"></a>调研背景</h2><ul><li>当下答题app的社交化而非学习化倾向</li><li>大学生碎片化时间的浪费</li></ul><h2 id="主要针对的人群"><a href="#主要针对的人群" class="headerlink" title="主要针对的人群"></a>主要针对的人群</h2><ul><li>计算机专业的学生（在思维上或许更容易接受这样的模式）</li></ul><h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><ul><li>给予碎片化的时间以学习思考的可能（重视的是学习思考，而非刷题）</li><li>提升自学能力，培养全面的思维思维框架</li></ul><h2 id="设想的功能"><a href="#设想的功能" class="headerlink" title="设想的功能"></a>设想的功能</h2><p>比如，大一的你正在学习分治算法，你想在等车的时候了解一下里面的更多模型。</p><p>于是你打开了whatolearn，设置标签为“计算机-算法-分治”，难度为“level 1”，app中的任务显示为“掌握merge sort”。</p><p>你认为这个问题过于简单，于是你跳到了“level 2”，app中的任务显示为“掌握closest pair of points problem”。</p><p>你发现你还不知道这个问题，于是点了“接受”。通过两小时的自学，你掌握了这个算法。</p><p>在点了“完成”后又切换到了另一题，“掌握fast fourier transform”，这个问题的标签还写着“多项式”。</p><p>在完成之后，你跳到了下个level……</p><p>你发掘这里面的问题太少了，不够刷，于是你post了一个新问题：“掌握strassen矩阵乘法”，在数日之内，管理员将决定这个问题是否会添加，它属于哪个等级……</p><p>①测试阶段大标签暂时只有“数学”“算法”“信息安全”，下会设小标签</p><p>②本身是“学习+游戏”的定位，通过游戏（CTF模式）的方式增强用户黏性（成就系统等）</p><p>③项目本身在技术上应容易实现，主要成本应为维护成本，另题目的设置仍有待商榷</p><p>以下是题目的示例：</p><p><img src="/2019/08/15/Project_History-Whatolearn/examples.jpg" alt></p><hr><p>写于2019-08-15</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【通天之塔】游戏设计2：记《-4级战斗游戏》，及部分相关回忆</title>
      <link href="/2019/08/08/Project-Simple_Simple_Battle/"/>
      <url>/2019/08/08/Project-Simple_Simple_Battle/</url>
      
        <content type="html"><![CDATA[<p>无忧无虑（？）的高一生活……</p><a id="more"></a><p>无忧无虑（？）的高一生活……</p><p>项目地址：<a href="https://github.com/NessOffice/Game-Simple_Simple_Battle" target="_blank" rel="noopener">https://github.com/NessOffice/Game-Simple_Simple_Battle</a> 。虽然我觉得游戏性还是有的，但这毕竟有些黑历史的性质，我也懒得再改了……大哥们不要嘲讽鸭。</p><h1 id="回忆"><a href="#回忆" class="headerlink" title="回忆"></a>回忆</h1><p>时间约莫是高一下，此时<em>Hit The Boss</em>的demo已经出来了，虽然还在更新。在贴吧里看到了一篇用易语言写的“简易战斗游戏”，感觉还挺好玩的，简陋但不粗糙。只是这个“简易战斗游戏”流程太短了，一两分钟玩完有些不过瘾，想着自己拿VB也复刻一个试试，于是这个游戏便诞生了。</p><p>（今天那篇帖子已经看不到了。百度，说你什么好。好好的历史资料就这样被烧了？）</p><p>一开始游戏里怪物的名字还都是dungeon风格的，这个风格是之后改的，感觉这个样子更好玩更欢乐些（本来沙雕小游戏就应该这么有意思的嘛），虽然并不是很统一。</p><p>（欢乐吗……里面涉及到的人都已经好聚好散了，虽说之前也没什么交集，也只是用个名字而已）</p><p>（小孩子还真是一点不懂信息安全呀……不过，毕竟，已经，是历史了）</p><p>改名好像是在高二吧。那时候和蒋哥策划搞个沙雕卡牌游戏《火箭杀》。结果人家自己飞了，弄了个游戏模式与此相近的，还发布到抄作业大队里，强烈谴责。虽然蒋哥的游戏甚为粗糙（看不惯把一大堆网上搞来的风格不一的图凑一起，配上宋体，这种中老年审美），但把班里的人按某个排序作为boss这种做法还是值得借鉴的，于是就改名了……如此一来游戏的娱乐性略有增加，只是对外人而言仍一样罢了……</p><p>（之前在物理办公室玩《-4》的时候把VIP副本调了出来，然后和蒋哥抢鼠标的过程中把电源搞了……那是我们最后一次待那个物理办公室，不是因为翻车，只是到了，下一年了）</p><p>为什么叫“-4级战斗游戏”呢？随便取的，真的。（按我在高一上的风格，应该会取名《中环制霸录》）只是好像没什么人会这样瞎取名，所以好记。英文名叫“SimpleSimpleBattle”，倒是可能重名。顺带一提，“NessOffice”也是瞎取的名字，因为“Ness”太短了做不了用户名。</p><p>文件夹里的窗体叫“form18“（感人的起名方式），因为这本来是<em>Hit The Boss</em>内部的一个子游戏，然后越做越大，不适合做子游戏，就独立出来了。这篇随笔名《游戏设计2：……》，也是因为<em>Hit The Boss</em>是我的第一个作品（《魔·龟兔赛跑》不算），也差不多简陋，但也挺有意思（私以为），只是那个不完整的程度实在太高了，就不能作为项目发布了。也没心思改了。何况今天，我也不接触idle game，或是anti-idle game了。</p><p>整个游戏写了多久，已经完全没印象了。今天回头审视，自己以前真的什么也没做，什么也没学，什么都不会。代码中冗余遍地，变量名感人，等等。虽然什么也不会，虽然只是把基本的操作垒在一起，但还是好快乐的。想到一个新点子的时候会很激动，巴不得马上就能更新出来。写完之后虽说好累，但看着有个成果还是会好高兴好高兴。创造的，乐趣啊，与能力无关。</p><h1 id="游戏性"><a href="#游戏性" class="headerlink" title="游戏性"></a>游戏性</h1><p>游戏的生命周期大致是10-20分钟。游戏没有目标，可以把完成所有任务当成游戏的最终目标。但私以为探索所有可探索的元素才是游戏的目标。</p><p>（笔者一开始就去挑战VIP副本然后5分钟通了关……不过这样子意思不是很大）</p><p>游戏有12+2个副本，每个副本都是完全没有特点的只能在名字上加以区分的怪物（哦VIP副本的boss是有特点的，还有某个怪物也挺有特点），每个怪物有生命、攻击、一般掉落（exp、钱）、特殊掉落。这些怪物看上去都差不多，打多了很无聊的，所以得控制怪物的数目。12个基础副本还是有些多了（特殊怪物倒是不嫌多的），所以得在掉落，还有任务上做文章。</p><p>这个游戏里经验就是换钱的，钱归根究底都是拿来增强战斗属性：生命与攻击。（既然要简陋，那就简陋到底吧）对等级的忽视似乎值得诟病，这本应拿来和玩家当前可选操作挂钩，用来提升游戏性的。原版升级也是换钱，我也没啥创新，这很不行呀。</p><p>虽然等级设定地很鸡肋，但是熔炼等级的设定还是有意思的。熔炼系统虽内容不多，但在提升游戏的乐趣上还是功不可没的。（各位疯狂买熔炼石的时候想必也会这么想对吧）</p><p>修炼系统是从原版游戏里复制（chao）过来的，我一般都不怎么用。也就前期有用一点了，如要鼓励玩家修炼的话应该放到任务里来着，这样玩家在第一遍”wtf“之后第二遍就会有动力修炼了。</p><p>商店中有的商品设置地有些鸡肋？我似乎从没买过10生命……能打小潘一般就能买70的那个了，这性价比实在太低了。或许我应该给70金币区一个等级限制？似乎可……</p><p>战斗的话，就是标准的回合制了，双方无技能，就你抡一拳我回一腿，这样的神仙打架。原版生命药也是打架前用的，于是它就变成70金币区换生命的替代品了……这样战斗也退化为无脑点点点了。（不然就是嗑药点点点了，可只有一种药可以嗑有啥意义呢）</p><p>VIP区本来没想好要什么副本，抽奖搞什么的。看到某人那么跳就（笑）。如果高三还有写的话，AL等应该也会放上去的吧。抽奖虽然是后面才加进去的，此时我也江郎才尽不知道怎么抽奖有意思，但它的性价比还是高的。</p><p>武器系统都是个人的创意，毕竟游戏小流程短，弄一堆白板武器也没意思。金币刀刷钱汲血刃刷血（开出这个武器血就不用愁了，此时也应该到游戏的晚期了吧）。火箭筒做任务能拿来用用（不要用它打某个怪……）。钢管是白板武器，不过好用呀，一力降十会。复仇拳套的设定挺好玩的，用失败来刷攻击。事实上我是先设计出复仇拳套再设计出汲血刃的，但没有给后者加个上限……武器的信息在frm文件里都能看。有些很羞耻的话看到就不要念出来了……</p><p>任务的设定也多是个人的创意。原版的任务很少，基本只有打怪，这里改了一下，让任务帮助玩家熟悉操作。如果玩家之前没有修炼过，第二个任务完成后应该会自觉去修炼。然后熔炼出五级装备的任务提醒了玩家现在熔炼系统更新了，比直接提示要有趣，个人认为。这些创意化的引导，或许是这一游戏的生命所在吧。</p><p>游戏的平衡性不知如何，各个副本是否有足够的区分度呢？不知道。打出一些BT武器后真的只要无脑刷就好了……都不用考虑怎么刷来得快怎么刷刷得舒服。这固然也有一些乐趣，但也相应地降低了决策的乐趣，有好有坏，只能这么说吧。</p><p>游戏当然是还能再更新的，原来空的成就系统可以扔进去很多东西，修炼也要弄得更加有趣些而不能只是机械地让玩家点。熔炼系统效果不错可以扩大，这样副本的规模也能随之扩大（不一定是更多的副本，而是单个副本的强化，诸如此类）。平衡性还可以再调整调整，隐藏的怪物还可以增加，怪物的特殊性也要体现出来……</p><p>但这些口胡，也只能是口胡了。回不去了。</p><hr><p>开始于2019-08-08</p><p>完稿于2019-08-08</p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 设计 </tag>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【通天之塔】记tetris的开发，借之略谈工程设计及管理的部分范式</title>
      <link href="/2019/08/07/Project-Tetris/"/>
      <url>/2019/08/07/Project-Tetris/</url>
      
        <content type="html"><![CDATA[<p>切身体验，何谓人月神话。同时享受，心态雪崩的感觉……</p><p>（更新于2019-08-07）</p><a id="more"></a><h1 id="tetris的开发"><a href="#tetris的开发" class="headerlink" title="tetris的开发"></a>tetris的开发</h1><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>整个过程中并非徒劳无功的，我收获了什么呢？友情，一些较软的能力，经验教训。只是在程序设计能力上的收获，简直是负的……或者说我原来的能力就是负的吧。这是个简单的项目，但我在管理上的失误，把简单搞得无比复杂。</p><p>C大程的大作业，有四个选题：学生信息管理系统、CAD、俄罗斯方块、自主选题。搞模拟题搞烦了，不想弄第一个；没玩过CAD，第二个也不成；对要玩什么没啥想法，自主选题估计选个题就能憋死。这样看来只有俄罗斯方块能搞了。虽然我不太喜欢玩俄罗斯方块，但也只能选这个啦。俄罗斯方块，有什么可以创新的地方呢……（谈到俄罗斯方块，谈到创新，总会想到《伊莉丝症候群(<em>irisu syndrome</em>)》，想到这个兔子和猫的故事……不过这里头的玩法是和剧情相关联的，和俄罗斯方块还有些差别，但我对剧情根本没有想法呀）</p><p>先不管这些，直接动手做吧。</p><h2 id="进展"><a href="#进展" class="headerlink" title="进展"></a>进展</h2><p>这个项目的进展……非常迷。题目布置得特别早，故项目的工时很长。</p><p>一开始的两三周先是研究这个libgraphics。通过demo看看它是如何运作的，学习回调函数的用法，学习基本的绘图套路。这个时候的心态尚不是很好。因为这些东西跟环境也有关联。明明知道这个东西这么写是对的，可为何就运行不起来呢？总归是某个小地方出了问题，但就是不知是哪里的问题，就很烦。搞前端的时候也经常碰到这样的问题，trivial，麻烦。</p><p>知道了库该怎么用，接下来该是游戏的设计阶段了（需求理解的部分被跳了）。我的想法是先搞下落、消行这些东西，再来搞tetris的类型，旋转啊那些。于是先把所有tetris简化为1*1的方块。下落便是改变中心点的位置，消行便是检测单行的block数。这些现在看来非常容易实现，但写的时候想法很多，一会感觉可以这么写，写着写着感觉那样会更好，就经常重构代码，一会儿换成这种风格，一会儿又是那种风格。重构一时爽，但重构完后就会发现自己啥也没干，就会开始怀疑自己。这是很不好的。探索固然有趣，但要有规划的探索，那样应该更为有趣且更有收获吧。</p><p>上面那些写好，又过了若干周，感觉可以开始设计tetris的结构了。怎么设计呢？考虑邻接矩阵吧。设个数组存邻接点的个数，再设两个数组存邻接点的坐标。好，那先弄个“田”出来吧，这一搞发现出了好多问题……比如在边界上的处理。等等。这些解决方案也是一点一点试出来的，主要是细节没搞清楚，我好像也没仔细记录。</p><p>后面的思路好像比较乱了？每次都不知道自己在搞什么，就东搞搞西搞搞，时间就搞过去了。这或许是需求理解和进度规划上的不明确导致的。</p><p>另外，整个项目没有一气呵成的感觉，往往是干个两三天，停个十几天，再来干两三天。然后中间把锅分出去之后就收不回来了，直到快交作业那星期进度才开始提上来。此时我的psycho-pass陡增。看着屏幕上的代码，时常会感到一阵，持久的，沉重的，虚无。</p><h2 id="亮点"><a href="#亮点" class="headerlink" title="亮点"></a>亮点</h2><p>我不喜欢仅完成老师给的要求，这样显得我很没水平。创新自然是要创新的，关键在于让自己满意，而不是恶竞。我相信我的想法并不是每个人都能想到的，故而我的创意还是有创意的。</p><p>本次的创新点主要有以下三个：技能，计分方式，tetris的种类。</p><p>技能我设计了三个技能，本来是有四个的：①定色爆破，爆破屏幕上所有同色的方块；②变幻之术，将当前tetris的type转化为single；③冰封之术，降低tetris下落的速度；<del>④定域爆破，爆破当前tetris邻近的方块。</del>（好吧，下次写游戏一定要找个文学顾问，技能名字不对称好难受）</p><p>定色爆破的效果一般比较迷，会把方块搞得支离破碎的。变幻之术用得比较多，也很方便。冰封术我都没怎么用，level 5的时候救场效果也不是很好。</p><p>计分方式的话，我不太喜欢整数，喜欢带些小量，比较独特的分数，但一般这类“休闲游戏”不会考虑这种问题（<em>irisu syndrome</em>不是休闲游戏，它的亮点不在这里），我只能自己想想如何创新啦。想了不知多久，搞出来个这样的方案，感觉挺优雅的。（虽然得分还是容易重复，尤其是单行的情况下）</p><p><img src="/2019/08/07/Project-Tetris/scoring_scheme.jpg" alt></p><p>然后是tetris的种类，十字型，X型（不可变幻），还应该有更多类型的，但是我懒得做啦，就这样。</p><p>下面是鸽掉的内容：冒险模式（15关，每关胜利条件不一，有坚持时间/分数/时间+分数/特殊条件，有些关无法旋转，有些关tetris的类型会有限定）、疯狂模式（zyls的创意，自己选tetris但是不能重，好像大致这样）、沙盒模式（让玩家自行设计tetris的种类，及其他参数）、地形（永恒之方块，生长之方块）、加密……如果加上去，游戏应该会很有趣的（？），我也讲不好。</p><p>互评的时候还碰到了其他同学做的tetris，发现了他们的一些创新点。我并没有往这些个方向上思考，而这些点子还是值得记录的：上升行，限时模式。</p><p>zc他们搞了个双人模式，然后暂停的时候还有特效，不过我对其兴趣不是很大。</p><h1 id="需要提升的能力"><a href="#需要提升的能力" class="headerlink" title="需要提升的能力"></a>需要提升的能力</h1><h2 id="个人层面的管理"><a href="#个人层面的管理" class="headerlink" title="个人层面的管理"></a>个人层面的管理</h2><p>首先是心态的管理。一方面是要有信念，对自己的信心，对别人的信心，对emergency的解决方案的信心。同时，需要有足够的管理能力提高对项目的把控能力以支撑信念。以下，是此次项目中没能表现出来的能力。</p><p>组织思路与组织代码。不需要很详细的文档，可以是函数调用关系图，可以是对一个功能在实现前的规划草稿，还有把类似功能的函数集中到一块。在开始想好方案不要改，或者事后再重构。封装常用功能。通过肉眼查重降低冗余度。保留档案。</p><p>文件管理。把不同类型的文件搞到不同的文件夹里面，保持树状结构。文件名规范化（”tetris-ln-190616-2117”），并维护更新信息。</p><p>预设测试情形，想好有哪些功能是需要测试的。每拿到一个新的不同版本的文件测试并做标记（“ranklist——符合预期”，“editbox——异常退出”）。</p><h2 id="ui设计中的管理"><a href="#ui设计中的管理" class="headerlink" title="ui设计中的管理"></a>ui设计中的管理</h2><p>（好吧这个标题和上面的标题下面的标题都不对应，不过这个东西有必要讲讲的）</p><p>ui的设计是所见即所得的，能够给予开发者一定的成就感，但也容易利用这成就感极大地耗散开发者的时间与精力，降低其效率。故ui的设计虽然好玩，但也不能仅仅抱着玩的心态看待，它也是需要分析的。</p><p>怎么分析呢？可以先明确一下一个小的阶段中要达成的效果：设计出ranklist的实现样式。这需要先搞出一个原型，提炼出需要使用的控件，确定好控件的颜色，确定好背景，等等。有了原型，设计的时候能更有针对性，而不是这搞搞那搞搞。</p><p>放置控件时我们也经常会想“欸这个放在这里是不是更好看”“欸这个拉长一点会怎么样”。这些常常会在占去大量的时间，但最终效果相差无几。修参的工作最好集中出一块时间来做，同时在这过程中要保证有效的调试手段，如键入位置信息、颜色信息等，而不能总是关闭-重运行。</p><h2 id="沟通与团队协作"><a href="#沟通与团队协作" class="headerlink" title="沟通与团队协作"></a>沟通与团队协作</h2><p>个人观察发现，三人小组往往会退化为两人小组或是一人小组，尤其在组员间相互不是很熟的情况瞎，因为团队的凝聚力不总是很高。作业做着做着有时候就感觉累了，宁愿自己做也不想把任务分出去，或是对这个项目不上心就把它鸽了。但在tetris这个项目中，团队的凝聚力还是较高的，个人认为原因在于组员间有一定的了解，能够相互理解与体谅，所以退化并没有发生。（如果我前几个星期不是特别忙也对tetris特别感兴趣的话，也许io、加密、ui还有其他部分我都揽过去了？这样项目的结束可能会早一些，但也只会像我高中时候的其他作品一样吧，其间我无法收获管理等其他方面的教训。然后我和她们也不会有更多的交集了，应该。）</p><p>一个团队是否总会发生马太效应？能者往往多劳，故强者愈强，弱者愈弱。“弱者愈弱”指的并非在能力上发生倒退，而是指的不受待见的沮丧，对自身能力的怀疑，这么一种心态。这在计算机学科的学习中是非常危险的，因为实际上，许多课程并不难，需要的更多是信心而非能力。个人常秉持这样的观念：别人的东西看不懂，主要原因不是我太弱（这种话该事后说），而是对方写得不够清晰。变量名混乱，代码冗余度高，逻辑清奇（尤其这一点！）都是对方而非自身的过错。我已尽自身一部分所能梳理清楚其逻辑但仍对其总体架构抑或细节实现不甚明了，这反映了对方在对程序的运行逻辑的理解上也不够清晰（至少没有表现出来），故我当见不贤而内自省。</p><p>当然……问题也不尽是别人的问题，很多也是自己的问题。只会写hello world然后被lisp系的语法绕晕难道总是语言设计者的过错？在连最基本的图遍历算法都没写过的情况下看不懂人家的tarjan算法难道应该怪对方的代码不友好？这些问题，确实是自身能力不足所造成的，故我们在骂街之余当积极寻求解决方案。这个过程中尤其要注意解决方案面向的对象。在赛场上可以不加注释，但写题解时还应将各个细节点得清楚明白而不是把AC的代码往上一扔。要读懂这段代码需要什么样的前导知识，这些，我认为都是必要的，是将零散的知识点串成一环的有益疏理，也为对这一知识点尚不熟悉的同学提供了学习的方向。但遗憾的是，至少我很少看见这样的尝试，而与之相悖的做法（扔代码，玄学证明）倒是数见不鲜。</p><p>以上的情形更多发生在个人中，与团队中的情形略有不同。团队降低了沟通的成本（在网上发问，指不定有人会理你），但并没有降低沟通的难度（“你在说什么？”）。在这样的情况下，简单的沟通能够传递一些好的习惯，同时解决一些琐碎的问题；而更深入的沟通呢？至少还没想清楚……这或许还需要在长期的实践中思考才好得出一般性的方法论。</p><p>团队协作无可避免地涉及到交易成本——在软件工程中，集中表现为沟通的成本，理解代码的成本，等等。看自己的代码交易成本往往是比较低的，因为潜意识中对一些细节大脑已经做好了思考，整个程序的脉络也往往较为清晰。但是如果过了几个月，代码逻辑比较复杂还没什么注释，那么看自己的代码交易成本可能就上来了。至于看他人的代码，一般也都要付出高额的交易成本——时间、精力、信心。</p><p>那么如何降低交易成本呢？我们注意到，项目的一部分的代码是整体性的，是许多点连成的面，很稠密，复杂度很高。虽然理解整个面或许较为困难，但是理解一些要点相对来说会简单一些。（CTF一般都是找关键点，在复杂的题目中）于是可以提取关键点，抓住主要矛盾，逐个击破，同时准备好打持久战的意识，可能会有一些帮助。</p><h2 id="Leadership"><a href="#Leadership" class="headerlink" title="Leadership"></a>Leadership</h2><p>（我可能不具有这个东西，但理应具有这个东西）</p><p>一般而言，组长对项目的把控等级是最高的，ta决定项目宏观的方向，整体的架构。这些尚是个人层面的。在团队的层面，协调就麻烦了……</p><p>要分工，需要要了解他人的相性，了解其所面临的问题，了解其心理状态。这些都不容易做到。机器式的监督只会降低团队的凝聚力，但深入的了解也并不容易，这需要机遇，需要耐心，等等。</p><p>可能还是solo比较容易吧？</p><p>但把有着坚韧意志的厉害的女孩子一直置于对项目的焦虑与对自我的否定中，这实在不应该吧。</p><p>于是我只能随性地瞎指挥了。结果尚可，只是本来能更好。</p><hr><p>开始于2019-06-07</p><p>完稿于2019-06-16</p><p>更新于2019-08-06，添加了“亮点”的部分</p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【通天之塔】游戏设计5：记《门神眷顾》，及开发过程的的心路历程</title>
      <link href="/2019/08/07/Project-MenShenJuanGu/"/>
      <url>/2019/08/07/Project-MenShenJuanGu/</url>
      
        <content type="html"><![CDATA[<p>三年前与三年后。</p><a id="more"></a><p>三年前与三年后。</p><h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>今年五月到六月，因为某个原因和蒋哥一起开发了个小游戏。虽然比较粗糙，也没有取得什么，但不管怎么说也是心头肉呀……我比较没用，前期因为ACTF在划水，后期因为ICPC在划水，中间信心满满地接过蒋哥扔过来的锅，但打开sublime就陷入了看着代码痛苦不堪地“这是啥呀”“天哪这代码怎么这么乱”的死循环，这就比较累。其实自己没有写多少（程序上只是完成甲方的要求，话说哪有这么靠谱的甲方……游戏的平衡性和测试上也没有做太多工作。音乐放了等于没放。io又鸽了，话说我是讨厌io吗……写文档做PPT……），辛勤耕耘的都是蒋哥。虽然结果尚可（我觉得这作为一个游戏还是有可玩性与创新点的，虽然小瑕疵有些多……），但这样劳累的过程实在是不应该，而应该是happy coding的。那么问题出在哪里呢？在探讨之前，还是先来看一看这块心头肉。</p><p>（总算有一个不是以组长的身份参加的项目了……虽然我还是名义上的组长。为啥我总是组长啊orz还总是很糟糕的那种组长。）</p><h1 id="《门神眷顾》日后谈"><a href="#《门神眷顾》日后谈" class="headerlink" title="《门神眷顾》日后谈"></a>《门神眷顾》日后谈</h1><p>一开始的题目是“和门相关的游戏”（<del>暴露了呢</del>），然后我们觉得和传统文化挂钩比较好，就先独立地策划游戏策划了若干天。我的想法呢，是这个门，要大气，要恢弘，应该是“Gate”，整个部落的守护之门，而不能是“door”这种。既然如此，那么时间就得拨到部落时代，游戏得是生存向的。玩家是gate中的神灵，白天作为部落的一员参与活动，晚上作为神守护部落。这样玩家既是见证者，又是守护者，但不是决策者（部落首领）。游戏是rougelike性质的：有经济生活，政治生活，有军事要素，科技水平随部落规模不断提升后会出现更多要素……因为我不会画画所以游戏画面就走<em>dwarf fortress</em>这种风格好了，越简陋越好，以此作为卖点，突出游戏性。游戏的主题也能在这个设定下往高大里走：“反映整个部落乃至全世界中人类的不屈斗志与乐观精神”“门之守护神的守护即人类的自我守护；它也使向往安宁的人们汇聚在一起，构建出社会的原型；它还象征着人们对美好生活的憧憬与希冀。”……就叫它《巢湖志》吧。故事，发生在有巢氏所领导的部落……</p><p>然后蒋哥跟我说，要求里面有“致力于中国传统文化在游戏中的传承与创意呈现”。然后我就“嗯……”。如果坚持这个方案的话主导权就在我了，而我现在都很忙，对《巢湖志》在细节上当如何设计还不是很清楚，而蒋哥似乎颇有想法的样子，所以就决定改策划给蒋哥打工了……</p><p>（中国传统文化？Freud Gate体现了哪门子的传统文化啊怎么大家都在关心抑郁症患者啊这跟中华传统文化有个球的关系啊）</p><p>蒋哥设计游戏是以《金庸群侠传》为原型的（疑似），而我压根没接触过这个……于是策划全权交给蒋哥了，伴随着leadership。</p><p>蒋哥的《门神眷顾》是strategy game，钓鱼/砍柴-&gt;买门神-&gt;斗夜魔-&gt;钓鱼/砍柴，游戏模式就是这样，很简单，但挺好玩。游戏特色啥的全部写在游戏说明文件里，这里就不放了，这里毕竟是日后谈呀，该谈些没有写出来的东西……</p><p>一开始游戏的画风并没有确定，我想的是简约风（我也只会简约风了hhh），花13笔画了个“関聖帝”，蒋哥感觉不可，想试试Q版画风。虽然我一向不大喜欢Q版风格（国内很多辣鸡游戏都这种风格，不喜），但看到蒋哥画出的第一张“神荼郁垒”感觉还是好萌的，很可。于是之后蒋哥就进入了肝画的境界……咱也没体验过，咱也不知道什么样。</p><p>噢，说到游戏文件，我把它托管在github上：<a href="https://github.com/NessOffice/Game-MenShenJuanGu" target="_blank" rel="noopener">门神眷顾</a>。游戏的<a href="https://nessoffice.github.io/Game-MenShenJuanGu/">链接</a>也在里面。</p><h1 id="问题1-初始的游戏策划"><a href="#问题1-初始的游戏策划" class="headerlink" title="问题1.初始的游戏策划"></a>问题1.初始的游戏策划</h1><p>一开始蒋哥把大框架给了我，也就是游戏有哪些form，主界面是怎样的。不过看完这个框架后我还是一脸茫然并不知道蒋哥想要怎么设计，不知道这个village放在这是干嘛用的，不知道这个fish的模式是如何的，啥也不知道。直到蒋哥把魔物的属性发给我让我写Monster.js，我才猛地发现这游戏的游戏模式就这么简单……</p><p>设计课上提到，“原型设计”是设计中的一个关键步骤（真要说起来，没有哪个步骤不关键，嗯）。原型设计不仅表现在设计师对产品须具有初步的全局性的认识上，还表现在设计师同设计师，设计师同用户的交流上。</p><p>前者大家都明白，但后者不亲身经历并不好理解，尤其是设计师同设计师之间的交流。如果是两三个人的小作坊，大家对彼此的想法能很快理解，对于一个模型能够快速达成共识，这就几乎不存在交易成本，合作的效率也能比较高。</p><p>但如果人变多了，或者相互不能很快理解对方的想法，此时有效进行原型设计就比较重要了（要不然得用f(n)次研讨会替代，还不是等价的替代……），因为它能够让一方的想法能够快速被大家接受，以此提升合作的效率，同时避免错误理解造成的“走弯路”。原型设计的方法有很多，糊个交互界面出来固然是一种方法，但这个交互界面也不能过于简陋，必要的说明应当加上。不过个人更倾向于以故事板的方式呈现游戏的原型。</p><p>在这一次的游戏策划中，蒋哥有设计游戏的原型，但其保真度过低，缺乏说明，连基本的游戏模式都不能让别人领会。这样的原型无疑是失败的。而没有即时指出它的失败而是选择摸鱼的我也相当失败。第一步选择摸鱼，往往在后面因为信息不对称也补不回来，只能摸鱼了。所以这第一步得走好呀。一是摸鱼可耻，二是沟通技巧需要加强（不光是通过自然语言沟通，用原型沟通也是沟通）。</p><p>（谈起游戏策划，回想起以前和蒋哥口胡游戏的某几个中午，两支笔，一张草稿，两张嘴，一个主题。一个中午就这么过去，一个游戏，从大纲到细目，就全部清晰了。虽然还有很多要糊的dlc还没糊出来。有点累，因为没睡午觉，太过兴奋以至于头脑发胀，但还是兴奋地回不过神来，脑袋里一直盘旋着这个还没出生的游戏，想象着它这里这么做会更好，那里也能加点料，还有……真好啊，这样的感觉）</p><h1 id="问题2-交易成本"><a href="#问题2-交易成本" class="headerlink" title="问题2.交易成本"></a>问题2.交易成本</h1><p>策划已经确定，那么接下来就可以码代码了。在一番协商之后，我和蒋哥决定了合作的模式：</p><p>1）最新的代码（以日期区分版本）只能在一个人手里；</p><p>2）双方轮流更新，一方工作时另一方休息或处理其他工作（如绘图、搞音乐、学习要实现某一功能的相关知识等）；</p><p>3）维护log并每次在其中声明自己在本次更新中的done，to-do，对方的to-do。</p><p>这样的模式是较为高效的，它保证了版本清晰不会出现混乱（虽然最后还是挺混乱的，同一个名字下的“门神眷顾1.0.0”被传了好几遍，不过那个阶段已经不用写代码了）。但这样的模式的问题在于它仅适用于两人小组间的合作，而若要移植到三人小组上，就要做一些额外的工作，组员在更新之前需要声明自己要更新哪些内容，和其他同学的工作会不会产生冲突，并在各方均完成任务后由组长集成组员的更新。不然，版本一旦产生混乱，整个工程的进展也会被搅和地乱七八糟。MenShenJuanGu这一项目和Tetris这一项目是同时进展的，合作的模式大抵相同，但前者在版本管理上做得较好，而后者的版本管理在后期陷入严重的混乱。（zyls的RankList和ljq的StartMenu同时进展，她们把代码发给我，我不知道她们更新的代码基于哪个旧版本，也不知道她们彼此交流地如何，只能手动fc手动整合，也算是一种补救措施了，虽然这样比较累）</p><p>但模式的高效并不意味着实际操作的高效。蒋哥每次把代码发给我，我都得先略读一遍他的更新，以找出自己完成to-do所需要与之关联的变量、函数等。起初我还想着要重构蒋哥的代码的，但这实在太耗费时间耗费精力却不带来多少成就感，只得自降要求，只完成蒋哥给的to-do了。</p><p>即便如此，工作也并不轻松，一开始的困难显然是阅读蒋哥的代码，这个过程……一言难尽。</p><p>不得不承认，蒋哥代码的冗余度相当高。比如声明一个按钮，每次都得六行，中间一堆相似的变量名。这一做法的罪恶不仅在增加代码的冗余度，使本当精简的代码变得肥硕而丑陋。更罪恶的是，它使得代码更难分析更难找出要点了。F3变量名的跟踪效果变差了，因为要按F3的次数基本都乘上了个6，虽然听起来没什么，但是谁试谁知道，这到底有多难受……</p><p>代码中的冗余当然不止这一个地方。场景转换时的addEventListener/removeEventListener，一个文件存天下的模式，等等。这些有的解决了，有的没有解决，但总之都让分析代码的复杂度提高了若干个层级。</p><p>相对于对代码逻辑的理解，冗余还是小问题。接过一个涨了若干KB的文件，看到一大推完全不认识的新函数新变量，还要理清楚它们之间的关联，以开始自己的工作，这想想就可怕。更何况这些代码并不友好，没有显示函数调用关系的流程图，没有说明函数功能的注释。所有这些，都使得分析代码的工作痛苦非常。</p><p>写好注释，说明大框架下的小框架，讲明白函数的内容，这是对coder的要求。而对于analyst，也不能对着代码就这么看，还是要拿起纸拿起笔，梳理清楚代码的逻辑的，如果这个逻辑比较复杂。事实上蒋哥的代码并不复杂，静下心来就能看懂，但我的状态实在是太差了。后期蒋哥疯狂提醒我没时间了得肝肝Monster.js的部分，但我一直都不在状态。倒数第二天随便写写，也就写完了。不在状态的原因，一来是心理状态不佳（可能这个学期就没好过），二来是对代码逻辑缺乏认同吧。</p><p>我看蒋哥的代码看得挺难受，但想想如果自己是他的话写下这些代码的时候相比是充满激情有一定成就感的，而没有太管他人在阅读这样的代码时候是如何感受的……想到这里感觉有些愧疚（tetris一来就写了50%，只顾自己写得爽，没有考虑到她们在之后接锅时候的感受），就问了问ljq“我的代码冗余度是不是很高”“看我的代码的时候有没有很难受”。并没有得到有效的信息，反而让人家感叹“我太菜了”……明明应该是我的问题，你们要指出的呀。</p><h1 id="问题3-心理状态"><a href="#问题3-心理状态" class="headerlink" title="问题3.心理状态"></a>问题3.心理状态</h1><p>正反馈过少。这是在玩js时不太可能出现的一个问题，但它毕竟还是出现了。</p><p>为何会如此呢？首先是读蒋哥的代码读得很累，然后就不想读了，也不想完成任务。想摸鱼，可又想到有其他项目在身：whatolearn（我好棒哟，又咕咕咕了呢），史纲论文，物理考试，对微积分的理解，英语六级，打CF并写题解……其实这些都不算难，虽说有的可能比较烦。但没有祭出对它们在战略上的轻蔑就会导致心态很崩，感觉自己什么都做不好，什么都不想做，又水，又咸，就会很难过。写游戏应该是快乐的事情，解压的事情，但也加入了“锅”的行列，扩大了它们作为一个整体对我的影响，这很不应该呀。</p><p>这一学期的状态差得可怕，原因何在呢？我对事物的认识似乎发生了一些错位。不应该天天觉得自己很菜什么都做不成因为这种状态本身就很糟糕，没有认识到写游戏的快乐而只是抱着摸鱼的心态和蒋哥合作，没有发现史纲论文是一个晚上就能搞出来的而是让它烦了自己一个月，没有体会到英语六级的重要性及紧迫性故而在最后的关头才开始慌张，没有想到……这么多错位都叠在一块，也真是够可以的。更糟糕的是，我好像还一直把负能量传播给同学……我应该看开一点，心态摆好一些，这样应该就能，享受写游戏的乐趣，享受探索的乐趣，享受生活的乐趣了吧。</p><h1 id="问题4-知识掌握程度"><a href="#问题4-知识掌握程度" class="headerlink" title="问题4.知识掌握程度"></a>问题4.知识掌握程度</h1><p>我们是用的一个js库，但对库的用法，对js内对象的特性还不是很清晰，以至做不到把对按钮的声明封装起来以降低代码冗余度。</p><p>不太熟悉web相关的操作，在io上毫无头绪，游戏的一些功能（“昔日荣誉”）也就被鸽掉了。</p><p>不懂音乐也不会创作，不懂在这个库里循环播放的正确用法，这个功能又鸽掉了。</p><p>以上……</p><p>前端的事，很多查文档就好了，但在文档较少的情形之下， 必要的理解能够帮助解决问题，而这是我们所缺乏的，所不应该缺乏的。</p><h1 id="有趣的地方"><a href="#有趣的地方" class="headerlink" title="有趣的地方"></a>有趣的地方</h1><p>①游戏的demo出来后调参以调平衡性的这部分很有意思，玩过都知道，这就是很有意思。</p><p>②把游戏的demo发给同学后他认真地评测了……还提出了些有力的见解。</p><hr><p>开始于2019-08-05</p><p>完稿于2019-08-07</p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 设计 </tag>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【艺术其九】从艺术设计的角度看OneShot</title>
      <link href="/2019/08/03/Game-OneShot/"/>
      <url>/2019/08/03/Game-OneShot/</url>
      
        <content type="html"><![CDATA[<p>煎饼，灯泡，还有救世主。</p><a id="more"></a><p>（虽然标题写着“从艺术设计的角度看”，不过其他角度也是会涉及的。起这个标题主要是因为OneShot的艺术风格真的太棒了……虽然讲起来也说不出什么。然后我也不太了解艺术设计的理论，全程都在瞎讲，设计生不要生气呀……）</p><p>（虽然官方没有声明Niko的性别，但笔者倾向于把ta视作小姑娘。坚强的，善良的，但有时也会难过的，小姑娘。）</p><p>游戏名不知道怎么翻译。一次机会？怪怪的。solstice又怎么翻译？（第一次看成80L9TICE了）都不好翻译，伤脑筋。</p><p>OneShot，近来玩的一款metagame。一直以来都喜欢meta元素，喜欢metafiction，也喜欢metagame。喜欢对于真实与虚构的思索，也喜欢作品在展现meta元素中的独特表现。OneShot在结合meta元素的趣味性和艺术性上就做得比较好，虽然相比Undertale等其知名度或许比较低，但它的品质确实不错。虽然游戏很温馨，good end很美满，Niko和大家也很nice，但结束游戏时也能感到微微的一丝悲伤，是分别的难过。</p><blockquote><p>我在你的记忆里，你也在我的记忆里。</p></blockquote><p>游戏的情节就不细讲了，metagame嘛，自然是自己体验感受更深。本文主要聚焦的是OneShot的画面。</p><p>顺带一提，游戏的音乐也很棒，虽然并非能给人深刻印象，思想深邃，富于张力的那种音乐（玩完就忘了……），但和场景特别搭，尤其能增强你我的代入感。OneShot的音乐基调，总体而言，是舒缓的，平静而祥和，但在一些场景也会呈现出诡异的面貌（毕竟metagame呀……不过放心好了，游戏是单线的，最后很治愈，不会出现糟糕的发展）。</p><h1 id="情节"><a href="#情节" class="headerlink" title="情节"></a>情节</h1><p>虽说情节不细讲，不过还是要提的，因为这情节真的好治愈。</p><p>（世界观的话，非常自洽，从细节可以看出。世界中有城市有计算机有机器人有人工智能，但没有飞机也没有其他交通工具，或许是因为这个世界太小了？光能是主要的能源来源，无论在哪个区域都如此。其他……光这样讲讲也不足以描绘一个世界的）</p><p>OneShot开始时所展现的剧情比较“正统”：主角Niko一觉醒来发现自己身处异世界。世界已走到了尽头，因为曾经的太阳殒灭了，只有将新的太阳致于The Tower的塔顶之上世界才能重归稳定，Prophetbot这样对Niko说。于是，Niko抱着太阳（灯泡）踏上了前往The Tower的朝圣之旅，从Barrens，到Glen，到Refuge，再到The Tower。然而，事情的真相并非Prophetbot所描述的这么简单……</p><p>游戏的第一周目充满了悬念：Barrens中的机器人口中的“制御”是何意？一直给我们，而非Niko传递信息的终端又是谁？为何这世界中满是方块？我们的目的又是什么，拯救世界还是让Niko返回她的世界（终端告诉我们的任务是后者，而NPC们告诉Niko的任务是前者）？图书馆中众人口中的“他”又是谁？三叶草的意义？为何游戏要频频加入meta元素？如此种种的困惑，相信玩家们在探索时都会产生。而无论是Barrens，是Glen，还是Refuge，无论在哪个场景中NPC们都不会回答玩家的这些困惑。直到来到The Tower，直到solstice线开启，直到……</p><p>（开始剧透啦）</p><font color="FFFFFF">直到最后，我们发现游戏里没有反派，没有阴谋。此前所有的诡异的出发点都是The Entity（The World Machine，个人更喜欢The Entity这个名字）对Niko的保护。<br></font><font color="FFFFFF">每位NPC都很善良，表现在细节里。比如给Niko做煎饼，给大家提供避难所的咖啡店老板。比如在最后关头仍维护土地完整的植物精灵。比如陷入悖论的困惑而后被Niko制御的The Entity。<br></font><font color="FFFFFF">还有Niko对我们的信赖，她勇于拯救世界的坚强，她在吃煎饼时候的想家，都是一个平凡而不平凡的女孩子的表现，令人欣赏，惹人怜爱。<br></font><font color="FFFFFF">（虽说如此，但Niko以外的人物塑造地不是特别有特点，个人认为。OneShot在人物塑造上还是有些弱了。）<br></font><font color="FFFFFF">虽然是末世，但是完全没有末世的样子。大家都很乐观，相信希望，相信Niko，也相信我们。<br></font><font color="FFFFFF">这样的善意，渗透在作品里，使整部作品的色彩基调明亮无比（虽然实际上游戏的色彩基调都是比较暗的，这将在后面说）。这些人物的生命之光，展现了作者可贵的人文关怀。<br></font><font color="FFFFFF">既然是metagame，何谓真实总归是一个主题。在不真实的世界里，拯救有意义么？真实又是什么呢？我对这些问题不是很感兴趣，因为我们的情感，我们的体验总归是真实的呀，虽然有点唯心。<br></font><font color="FFFFFF">然后制御这个概念真的挺棒呀……因为认同，所以真实。<br></font><font color="FFFFFF">（说句实话，感觉游戏里的文本总体而言不是很吸引人，很多地方都想跳，有的地方有点太工科了？有的地方又感觉这个人就是会讲这样的话的，总归没什么信息量）<br></font><font color="FFFFFF">（还有steam界面那个游戏介绍……感觉都不像是中文，很西式中文）<br></font><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><p>(星号)困惑的猫叫声(星号)</p><p>在图书馆看到羽毛笔的时候，Niko会想起我们在Glen也碰到过羽毛笔。</p><p>（在初版的游戏中，游戏只能玩一次，按×之后游戏就继续不了了。而且MessageBox还会弹出“You killed Niko”这种比较可怕的字样。）</p><p>The Entity的形象是Niko的黑白镜像。</p><p>在告别的时候，Niko会叫我们好好照顾自己。（上一次被告诉要好好照顾自己，是几年前呢？除了我妈……）</p><h1 id="画面"><a href="#画面" class="headerlink" title="画面"></a>画面</h1><p>好，到重点了。</p><p>OneShot的过场CG表现极为出色。CG往往出现在一些重要的场景，或是转场时刻。CG在/Graphics/Pictures文件夹内（网上都没见大佬整理呢……），此处放上一些笔者所喜欢的。</p><p><img src="/2019/08/03/Game-OneShot/cg_barrens.png" alt></p><p><img src="/2019/08/03/Game-OneShot/cg_refuge1.jpg" alt></p><p>容易发现，CG中的物件要素总体而言较为简单，但它在画面中突出了重点（The Tower无疑是第一张的亮点所在，而第二张中飞机和其眼睛也正是这一画面的眼睛）在色彩和明暗也下了较大的功夫，故而富有表现力。在色彩和明暗上做的文章也正是OneShot在画面上能吸引人的主要原因，依余愚见。</p><p>前面讲到，在OneShot中世界分为四个region：Barrens，Glen，Refuge，The Tower。前三个region各有不同的主色调：蓝，绿，红（RGB）。以Barrens的地图为例，请看：</p><p><img src="/2019/08/03/Game-OneShot/stage_barrens.jpg" alt></p><p>整个地图以蓝黑白三种色调为主。布满荧光矿石的地面，闪着粼粼波光的水池（动态效果很棒很到位），以及波纹纹路清晰的海洋。要素间的和谐也造就了场景的和谐。</p><p>再如refuge，个人格外喜欢这个region的风格。紫色的楼房，红色的灯光，没有夜晚的都市，富有冲击力，诡谲又美丽。虽然是暖色调，但又给人一种微妙的距离感。</p><p>再来是The Tower，它的色调是纯黑和纯白，伴随着昏暗的深蓝。秩序在此陷于混乱。这个场景比较有《梦日记》那样的感觉，但它称不上猎奇，主要是崩坏。</p><p>地图的色调如此，而Niko，太阳，她们都是黄色的。黄光在游戏中无疑象征希望，象征拯救。尤其给人留下印象的是，Niko在穿过场景时，周遭一片漆黑，可见的只有她的眼睛，还有她手中的太阳（虽然略显恐怖）。将颜色用作象征并不罕见，但OneShot此举在视觉效果上显然取得了非常不错的成效，这或许要归功于纯色和像素风的契合。</p><p>色调之外，明暗也是OneShot画面之所以和谐动人的另一大要素。据设定，此前的太阳毁灭了，于是世界处于一片黑暗之中（但各个region还有一些荧光体，颜色各不相同，为人们提供了生存的资源）。故，游戏的画面虽然并不昏暗，但也不明亮，barrens尤其。这样的暗使得故事更有戏剧性，也更能调动玩家对于未知的恐惧，同时也加强了画面的表现力。在一周目若是选择拯救世界，那么会有太阳降世以后的一些CG，很明亮，但也少了各个region独特的艺术风格。</p><h1 id="游戏性"><a href="#游戏性" class="headerlink" title="游戏性"></a>游戏性</h1><p>游戏性，私以为，是OneShot主要的不足。虽然游戏中一些puzzle相当精妙而有趣，但一些puzzle的设置私以为影响了游戏节奏，也不利于剧情的推进。</p><p>puzzle的设置上，大多数和meta相关的puzzle都是很新奇的，也容易想到（不过我并没有想到胶片要放到窗口之外曝光orz），做出来也有一定的成就感。而OneShot中传统一些的puzzle（寻物并组和）私以为还是不那么“自然”的，比如把镜片和空电池扔一块，比如给按钮上胶带（可能我缺乏常识吧），这就导致容易重复跑路，会卡关。而这对于游戏性的影响是致命的。虽然地图很漂亮，但重复跑仍免不了会陷入审美疲劳。或许是我不擅长解密吧，个人认为开始场景的puzzle相当精妙，但后面的略有些困难，跑路量也较大。</p><p>OneShot涉及的比较好玩的较为创新的puzzle，整理一下，如下：</p><p>①找文件，文件依据场景提供提示与剧情指引（The Tower），这个尤其赞。</p><p>②曝光相片（refuge），这个我并没有想到，不过被惊艳到了。</p><p>③踩格子画图案（The Tower第三场景）。</p><hr><p>初稿写于2019-07-31</p><p>完稿写于2019-08-03</p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计 </tag>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【白冠之礼】深入浅出密码学：前一章 密码学导论</title>
      <link href="/2019/07/28/Notes-Understanding_Cryptography-CH01/"/>
      <url>/2019/07/28/Notes-Understanding_Cryptography-CH01/</url>
      
        <content type="html"><![CDATA[<p>密码学！</p><a id="more"></a><h1 id="何谓密码学"><a href="#何谓密码学" class="headerlink" title="何谓密码学"></a>何谓密码学</h1><p>虽然密码学中充满了如RSA、AES、PKA等高端现代缩写，但事实上，这已经是门有千年之久历史的古老学科了。自文字出现以来，密码一般也会同步地出现在了人们的生活中。这些是古典密码学，形式古雅而简单，富于趣味性。与之对应的是现代密码学，更“科学”（因为它和数学间的联系较古典密码学更紧密些），更安全，更符合现代文明的需求，但入门难度也更高一些。</p><p>密码学相关的模型有enigma加密机，它背后有一段惊险刺激的故事。还有斯巴达密码棒，虽然常会被作为高中大学的编程水题，但不要因为题目水就瞧不起古人的创意，没准告白的时候就能用上呢（<del>然而这与我有什么关系呢</del>）。</p><p>密码学，cryptology，是个涵盖较广的词，包括cryptography和所谓cryptanalysis。前者包括加密解密的艺术还有一些协议，而后者则强调对密码的安全性进行理论化的分析。而这本书名为<em>Understanding Cryptography</em>，主要是在讲述前者。</p><p>Cryptography主要能分成以下三块内容：对称算法，非对称算法（或公钥算法），密码协议。其实这三者并不并列，只是这三个词出现的频率比较高而已。真要说起来，前两者都是加密的大类，而后者是对加密算法在实际场景下的应用。</p><p>对称算法与非对称算法分别有何优点有何缺陷呢？这是后文所将详述的。在此，我们只需知道前者是双方共享一个密钥，而后者是用户有一个公钥也有一个私钥。看上去后者不太好理解？没事，搜一搜“数字签名”就知道为什么要这样设钥了，而且它的用处远不止用作签名。</p><p>一般来说，对称算法更容易入门些，那我们就来学学吧。</p><h1 id="对称密码学"><a href="#对称密码学" class="headerlink" title="对称密码学"></a>对称密码学</h1><p>首先是概念，先举个例子吧。</p><p>Alice和Bob在通过QQ交流他们对某个题目的想法，然后Bob的手机很容易被黑所以他们的聊天记录可能会被监听。为了让交流的内容不被外人所知，Alice和Bob决定加密他们对话的内容。他们很有古典情怀，所以选择了凯撒加密，双方约定一个密钥，一方在发送时将原文通过密钥加密，另一方也通过这个密钥解密即可。</p><p>上面的例子模拟了一个典型的通信场景，信息源分别为Alice和Bob，他们使用的信道有两个：一个是不安全的QQ，还有一个是相对安全的用于约定密钥的食堂餐桌。然后在前一个信道上可能有非法用户监听。为了在不安全的信道上使通信相对安全，内容不外泄，他们用到了cryptography中的对称密码，其特点是双方共用一个密钥。</p><p>然后他们所用的凯撒加密是一种非常经典（也非常vulnerable）的替换密码。所谓替换密码，顾名思义，就是把一个字母替换为另一个字母。考虑英文字母表中的小写字母，一个字母可能被替换为二十六个字母中的任意一个，而为消歧义性，一个字母的原像应只有一个。（当然，你也可以搞个非单射，一个字母的原像有贼多可能，然后出个题，交代一下原文的hash值，来恶心人）这样的替换有多少类，也就是密钥空间有多大呢？$26! \approx 2^{88}$，很大了。看上去这种加密方式非常不错。</p><p>真的不错么？可以看得出来，bruteforce对于这样的加密一般是相当无力的。假设一台2019年的标准个人计算机每秒能够检查1e8个密钥，那么要遍历完大至1e26的密钥空间要多久呢？1e18秒，1e13年。就算搬来一千台计算机分工也得算到宇宙的寿命翻一倍，很安全。然而，这样的替换没有把原文的统计属性予以一丝一毫的改变。当样本足够大时，英语中各个字母的出现频率会有显著的改变，词频也会趋于稳定。于是，我们便可通过分析统计数据进行解密了。除字母和单词外，还可以通过字母元组的统计规律（如，q后面一般总是跟着u）来进行分析。当然，还需要一些语感和灵感……这是解密的有趣所在。随着所谓人工智能的发展，我们也可通过计算机对此进行分析。</p><h1 id="密码的安全性"><a href="#密码的安全性" class="headerlink" title="密码的安全性"></a>密码的安全性</h1><p>为了知晓密码是否足够安全，我们需要对密码进行攻击尝试。攻击的方式有哪些呢？首先是经典的密码分析，比较登大雅之堂，可以暴力枚举密钥，也可在获悉加密方法的内部结构后进行分析攻击。然后就是比较离谱的攻击方式了：implementation attack，物理玩法，比如测量处理私钥的处理器的功耗搞到密钥；社工，利用人性的弱点，比如冒充公安局说对方涉嫌违法犯罪需要提供密码。</p><p>后两个方法比较玄，不是很数学，所以书后面就不怎么讲了，不过这两个方法还是非常好用的，虽然随着时代的进步人们的防范还有设备的防范都加深了。</p><p>可靠的密码体制需要遵守Kerckhoffs原理，即即便公开密钥以外系统的一切，包括加密解密算法，系统也应足够安全。</p><p>这个原理看上去不太符合常理，因为隐藏细节不是也扩大了“加密/解密算法空间”吗？这样的方案被称为隐蔽式安全性，security by obscurity。但历史经验（书上的例子似乎不够多）告诉我们这样是有风险的。</p><p>遵守Kerckhoffs原理的话，安全传输信息的问题便可以归结到安全地传输、存储密钥的问题上了。所以密钥是否足够robust呢？首先我们得让bruteforce无效化。即密钥空间开得多大能够使密钥保证计算安全？简单计算一下可知，64位虽然不能马上破解但是耗费数小时数天还是能够做到的。而128位要让电子计算机算个几十年。（以上为口胡）这些估算是把计算机性能的提升（摩尔定律）算在内了的。</p><h1 id="两类替换密码"><a href="#两类替换密码" class="headerlink" title="两类替换密码"></a>两类替换密码</h1><p>了解了一下密码分析相关知识，我们来拿简单可爱的古典密码开刀吧！首先是凯撒密码，接着是仿射密码。在分析之前，我们先得用现代化的语言表述这两种（其实是一种）加密算法的内容，而这，涉及到了编码和模运算。</p><p>模运算，相信学过一点初等数论或是基础的计算机课程就不会陌生，此处就略去不表了。书中也便是引入模运算的定义，同余的概念，同余等价类的概念，整数环的定义和若干性质（封闭、可结合、可交换、加法乘法存在不变元、加法存在逆元而乘法不一定存在逆元），如此而已。利用同余等价类可简化计算。对于乘法逆元的存在与否介绍了基于两数是否互素的判别方法。这是两个要点。</p><p>所谓凯撒密码，便是把字母（广义）编码到整数环上，再在环上进行加法运算，仅此而已。这种方式非常的vulnerable，因为它的密钥空间只有26，52，或是其他（总归不会大，即便是用字母表是所有汉字的集合……但这个样子也太为凯撒而凯撒了吧？），计算机秒秒钟就能算出来，甚至都不用进行频率分析。唯一的麻烦就是要判定可能的plaintext是不是readable的，不过浏览26个字符串对人类而言还是容易的，尤其很多扫一眼就能退出check了。（当然，也能用计算机分析readable指数，训练个模型什么的，可是咱也不会呀\cry）</p><p>然后是仿射加密，affine。凯撒的加密是$e_k (x) = y \equiv (x + k) mod 26$，则仿射加密便是$e_k (x) = y \equiv (ax + b) mod 26$。解密找反函数就好了。需要注意的是，此处密钥需满足$gcd(a, 26) = 1$，不然没有乘法逆元解密不总是能进行。仿射加密看上去比凯撒牛逼了很多，真的如此？并不是。由乘法原则，密钥空间=（a的可能取值数）×（b的可能取值数）=12×26=312，还是小的可怜呀，不过对入门级CTFer来说可能要难一丢丢（笑）。</p><h1 id="要点回顾"><a href="#要点回顾" class="headerlink" title="要点回顾"></a>要点回顾</h1><p>1.不要乱开发自己的加密算法。（这主要是在实际应用中，瞎搞很容易出问题；不过在学习生活中瞎搞还是好玩的，比如把告白用的text加个自己瞎搞的密然后把代码给妹子让她分析得出原文，<del>然而这与我有什么关系呢</del>）</p><p>2.不要使用未经证明的加密算法或未经证明的协议，基本同上。这也是对Kerckhoffs原理的强调。</p><p>3.攻击者总是试图寻找密码体制的最薄弱之处，大的密钥空间并不保证密钥的安全性因为它不一定能抵抗分析攻击。</p><p>4.用于防御bruteforce的对称算法的密钥长度为128位或以上为宜，64位存在危险。</p><p>5.模运算是一种以严格数学方式表示古典密码方案的工具。</p><h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><h2 id="替换密码解密题"><a href="#替换密码解密题" class="headerlink" title="替换密码解密题"></a>替换密码解密题</h2><p>以下密文是使用替换密码加密得到的，请在不知道密钥的情况下解出原文。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lrvmnir bpr sumvbwvr jx bpr lmiwv yjeryrkbi jx qmbm wibpr xjvni mkd ymibrutjx irhx wi bpr riirkvr jx ymbinlmtmipw utn qmumbr dj w ipmhh but bj rhnvwdmbr bpr yjeryrkbi jx bpr qmbm mvvjudwko bj yt wkbrusurbmbwjk lmird jk xjubt trmui jx ibndt</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wb wi kjb mk rmit bmiq bj rashmwk rmvp yjeryrkb mkd wbi iwokwxwvmkvr mkd ijyr ynib urymwk nkrashmwkrd bj ower m vjyshrbr rashmkmbwjk jkr cjnhd pmer bjlr fnmhwxwrd mkd wkiswurd bj invp mk rabrkb bpmb pr vjnhd urmvp bpr ibmbr jxrkhwopbrkrd ywkd vmsmlhr jx urvjokwgwko ijnkdhrii ijnkd mkd ipmsrhrii ipmsr wdj kjb drry ytirhx bpr xwkmh mnbpjuwbt lnb yt rasruwrkvr cwbp qmbm pmi hrxb kjdjnlb bpmb bpr xjhhjcwko wi bpr sujsru msshwvmvwjk mkd wkbrusurbmbwjk w jxxruyt bprjuwri wk bpr pjsr bpmb bpr riirkvr jx jqwkmcmk qmumbr cwhh urymwk wkbmvb</span><br></pre></td></tr></table></figure><p>这很明显是频率分析。虽然已经有造好的<a href="https://quipqiup.com/" target="_blank" rel="noopener">轮子</a>了（一开始不会做就直接丢进去了，也是一种选择啊），但还是想自己瞎搞搞搞看。写完了之后封装了一下，就是这样的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LEN = <span class="number">26</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Letter</span>&#123;</span><span class="keyword">char</span> ch;<span class="keyword">int</span> fre;&#125;; <span class="comment">// fre for frequency</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Letter&amp; lhs, <span class="keyword">const</span> Letter&amp; rhs)</span></span>&#123;<span class="keyword">return</span> lhs.fre &gt; rhs.fre;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FREQUENCY_ATTACK</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Letter letters[LEN];</span><br><span class="line"><span class="keyword">char</span> cipher_text[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">char</span> in_table[LEN];</span><br><span class="line"><span class="keyword">char</span> out_table[LEN];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">char</span>&gt; dict;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">load_cipher_text</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span></span>&#123;<span class="built_in">strcpy</span>(cipher_text, str);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_letters</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; LEN;i++)</span><br><span class="line">&#123;</span><br><span class="line">letters[i].fre = <span class="number">0</span>;</span><br><span class="line">letters[i].ch = i + <span class="string">'a'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_frequency</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="built_in">strlen</span>(cipher_text);i++)</span><br><span class="line">letters[cipher_text[i]-<span class="string">'a'</span>].fre++;</span><br><span class="line">sort(letters, letters + LEN, cmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_frequency</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> ch = <span class="number">0</span>;ch &lt; LEN;ch++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c: %d\n"</span>, letters[ch].ch, letters[ch].fre);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"order by frequency: "</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; LEN;i++)</span><br><span class="line"><span class="built_in">putchar</span>(letters[i].ch);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">analysis</span><span class="params">(<span class="keyword">bool</span> do_print)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">init_letters();</span><br><span class="line">get_frequency();</span><br><span class="line"><span class="keyword">if</span>(do_print) print_frequency();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dict_generate</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str1, <span class="keyword">const</span> <span class="keyword">char</span>* str2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(in_table, str1);</span><br><span class="line"><span class="built_in">strcpy</span>(out_table, str2);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; LEN;i++)</span><br><span class="line">dict[in_table[i]] = out_table[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">translate</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="built_in">strlen</span>(str);i++)</span><br><span class="line"><span class="built_in">putchar</span>(dict[str[i]]);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_letters_not_in_out_table</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; table;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="built_in">strlen</span>(str);i++)</span><br><span class="line">table[str[i]] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"letters that aren't in the out_table: "</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; LEN;i++)</span><br><span class="line"><span class="keyword">if</span>(!table.count(i + <span class="string">'a'</span>))</span><br><span class="line"><span class="built_in">putchar</span>(i + <span class="string">'a'</span>);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>思路就是先求出频率，再排序，再把这段文本中按频率降序的字母表和大量文本中按频率降序的字母表建立一个映射，思路是这样的，然后main函数里面是这样的，以第二段文本为例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// exercise 1.1.2</span></span><br><span class="line">FREQUENCY_ATTACK target;</span><br><span class="line">target.load_cipher_text(<span class="string">"wb wi kjb mk rmit bmiq bj rashmwk rmvp yjeryrkb mkd wbi iwokwxwvmkvr mkd ijyr ynib urymwk nkrashmwkrd bj ower m vjyshrbr rashmkmbwjk jkr cjnhd pmer bjlr fnmhwxwrd mkd wkiswurd bj invp mk rabrkb bpmb pr vjnhd urmvp bpr ibmbr jxrkhwopbrkrd ywkd vmsmlhr jx urvjokwgwko ijnkdhrii ijnkd mkd ipmsrhrii ipmsr wdj kjb drry ytirhx bpr xwkmh mnbpjuwbt lnb yt rasruwrkvr cwbp qmbm pmi hrxb kjdjnlb bpmb bpr xjhhjcwko wi bpr sujsru msshwvmvwjk mkd wkbrusurbmbwjk w jxxruyt bprjuwri wk bpr pjsr bpmb bpr riirkvr jx jqwkmcmk qmumbr cwhh urymwk wkbmvb"</span>);</span><br><span class="line">target.analysis(<span class="literal">true</span>); <span class="comment">// print the frequency</span></span><br><span class="line">target.dict_generate(<span class="string">"rbmkwjiphdvsunxyoatcqlegfz"</span>,</span><br><span class="line">                     <span class="string">"etanioshldcprufmgxywkbvzq_"</span>);</span><br><span class="line"><span class="comment">//                      etaoinrshdclmpufgwybkjvxqz</span></span><br><span class="line"><span class="comment">// the row above shows the frequency of letters in English</span></span><br><span class="line">target.translate(target.cipher_text);</span><br><span class="line">target.translate(<span class="string">"bjlr"</span>);</span><br><span class="line">target.print_letters_not_in_out_table(<span class="string">"etanioshldcprufmgxywk vzq "</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码应该比较容易看懂，但问题在于dict_generate对应的表是如何生成的呢？因为样本的问题，此表和普遍接受的英语字母频率表并不是完全一致的，所以需要微调，不然直接放进去搞出来的原文并不是readable的。那么怎么调呢？本人的做法是先把这个out_table全填上.（LaTeX不方便输入下划线，就用.替换了），方便确认各个单词的完整度和字母数。然后把et两个字母填进去，因为大数定律，它们更有可能占在原来的位置上。然后知道了et就能找the了。我们注意到，bpr在原文中出现了很多次，有理由相信它对应于the。这样之后发现了形如th.t的单词，就可以填a了。然后还有形如eas.，形如tas.的单词，都能填了。这样之后好像陷入瓶颈了？让我们来找一些特别短的差不多能够猜出来的词吧。已经知道了b对应t，那么bj能对应什么单词呢？也只有to了吧。确定了j对应于o，然后密文中又有很多的jx，又能确定x对应于f了。密文中有个单词w，而单个字母组成的单词似乎只有a和I，a又用掉了，这样就能确定w就是i了……如此。到后面几乎一下就能确定一个单词了，做得很快。print.letters.not.in.out.table是在大后期确定哪个单词还没有使用的。然后找到了一个差不多可以填的单词可以手工模拟一下（懒得写anti.translate这个函数了）其密文再搜索一下找到它。如此这般如此这般，就能做出来啦！（一开始对着书抄密文把y抄成v了，结果搞出来covement，soce这种单词……然后开始我不是用下划线占位而是用空格占位的，后面的单词看着特奇怪，很怀疑自己是不是有映射弄错了……）</p><h2 id="其他题目"><a href="#其他题目" class="headerlink" title="其他题目"></a>其他题目</h2><p>感觉只有第一个题目比较有意思（因为是手动造轮子吧，虽然扔到quipquip里面也是秒做的），其他题目都太简单了？不是很有挑战，但还可以。</p><p>第二题的话直接暴枚二十六个密钥然后找readable的原文，以前遇到凯撒我都是这么做的。今天它要我基于字母频率来攻击……其实也好办，跑一下频率，然后令k = ‘e’ + 26 - ‘t’就好了，大数定律（虽然一点也不大）。第十一题直接模拟，不过这行话是Dodgeson写的吗我居然毫无印象……</p><p>第三题这种费米问题，条件给得多了呀……不过我们现在也是在科学地分析嘛，精确点也好。注意对数的妙用，就差不多了。</p><p>第四题也足够让我们感受平时的8位密码有多么robust了，从而能够理解为什么各网站在检测密码强度时检测到只有小写字母是“弱”而有小写有大写有数字就是“强”，只要有一个位置的可能，密钥空间就能增加这么这么多。</p><p>第五六七八九十题，都是数论相关，包括等价类的应用，求逆元等，基础。其中1.9提到了“离散对数”的概念，这个东西后面还会讲的，在椭圆曲线加密那块。十是欧拉函数，看到它我想到了最近看到的欧拉乘积公式……</p><p>第十三题提到了选择明文攻击。这是个有趣的概念，想象两国交战中你作为间谍无法获取密钥的情报但能够发送加密的信息，也就是你能够选择一些原文，知道这段原文的密文。如果是这样，你如何攻击密码呢？仿射自然是很好破译的，但其他呢？</p><p>第十四题提到了多次加密。显然，对于仿射加密而言多次加密完全没有扩大密钥空间的作用，没有实质性的效果（除了唬人）。但是对于DES，多次加密就有意义了……</p><hr><p>初稿写于2019.07.23</p><p>完稿写于2019.07.28</p>]]></content>
      
      
      
        <tags>
            
            <tag> 信息安全 </tag>
            
            <tag> 课程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【朝花夕拾】吉静文选 凝望</title>
      <link href="/2019/07/27/History-My_Essays-The_Stones/"/>
      <url>/2019/07/27/History-My_Essays-The_Stones/</url>
      
        <content type="html"><![CDATA[<p>塑料诗集。</p><a id="more"></a><p>（版权所有，严禁转载。违者自行承担相应法律责任）</p><p>塑料诗集。</p><p>（本来是叫“块砾集”的，取自《阿房宫赋》“鼎铛玉石，金块珠砾，弃掷逦迤。”但这个名字感觉实在太……微妙了，就换成里头一篇的名字了，希望不要重名了……）</p><center><strong>在海那边</strong></center><center>在山的那边</center><center>终于不是山铁青着脸</center><center>妈妈，那是海啊</center><br><center>我奔向蔚蓝色的梦想</center><center>却淹死了</center><br><center><strong>当你开始仰望星空</strong></center><center>三十五万年前你开始仰望星空</center><center>昨天你刚刚踏上月球</center><center>七百万年前你才诞生在这大地</center><center>诞生在这三十六亿年来无数生灵存活又死灭的大地</center><br><center><strong>凝望</strong></center><center>等待，漫长的等待</center><center>沉默，不尽的沉默</center><center>我等成了一座化石</center><center>可我手里的馍还没干</center><br><center><strong>现代文明</strong></center><center>飞天</center><center>向上</center><center>向上</center><center>向上</center><center>向上</center><center>向上</center><center>烟囱</center><center>楼栋</center><center>井盖</center><center>管道</center>]]></content>
      
      
      
        <tags>
            
            <tag> 回忆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【围炉夜话】《论语》随谈</title>
      <link href="/2019/07/27/Toughts-The_Analects_Of_Confucius/"/>
      <url>/2019/07/27/Toughts-The_Analects_Of_Confucius/</url>
      
        <content type="html"><![CDATA[<p>这并不是本学术性或是宗教性的著作，这只是本有趣的书。</p><a id="more"></a><h1 id="缘起——《论语》的价值何在"><a href="#缘起——《论语》的价值何在" class="headerlink" title="缘起——《论语》的价值何在"></a>缘起——《论语》的价值何在</h1><p>一直不大喜欢儒家学派，不是很喜欢它对人伦方面的重视，对孔子还有他的弟子也一向没有感觉。但这些大都属于刻板印象（印象：陈腐、迂阔、古板、严肃），因为我并没有认真翻过这本书，只是单纯的不喜欢而已。</p><p>其实拨开偏见，《论语》还是挺有意思的。它的文学价值非常高，这是笔者的主要欣赏点。</p><p>当然，说《论语》，还是不能脱离儒学——它的环境的。那么我们也来聊聊儒学吧……就渗透到文章里，不单独拎出来讲了。</p><h2 id="记忆"><a href="#记忆" class="headerlink" title="记忆"></a>记忆</h2><p>高中语文课的某个阶段上的是《&lt;论语&gt;选读》，安排在《外国小说欣赏》之后。本以为会特无聊的，但其实这门课还不错（文史类的课程很看老师。至少在教学上，我认为自己以前碰到的文科老师都挺好），虽然现在我什么也记不起来了……</p><p>以前晚上有看闲书的习惯（在寝室里没话讲，也没有串寝的习惯），有一段时间看的就是《论语别裁》，老师在开《&lt;论语&gt;选读》之前推荐的若干注疏中的一本，想也不会看很多，就随便挑了一本。看看还挺好看。不过之后偶然想道“程子曰：今人不会读书。如读《论语》，未读时是此等人，读了后又只是此等人，便是不曾读。”不由得想到自己，突然觉得很悲哀。就没读了。对这一阶段的语文学习也感到异常的悲哀。这样的我只能把《论语》当文学作品看，否则只能为考试而学习了，而我不喜欢这样。</p><h2 id="历史价值"><a href="#历史价值" class="headerlink" title="历史价值"></a>历史价值</h2><p>对《论语》，人们的评价自然是两极化的。什么“圣人之书”“国学经典”，古人这么说，今天许多人也这么说（其实“四书”一个名号就够了，它较之“四大名著”更有推崇的意味）。或者“文化糟粕”，把孔老二和他提倡的旧道德都踩一踩。这在新文化运动时期，文革时期尤甚。今天很多人也这么说，一般语气都比较激进，看得出来心理年龄总体比较年轻。</p><p>所以我们该怎么看呢？辩证地看呗。首先《论语》它不仅仅是本书而已，它是儒学的代表作品之一，它的历史地位，还有它在历史进程中的影响都是至关重要的，不可不考察的。从思想史的角度看，《论语》显然是无法避开的在中华民族民族特点塑造上的一笔浓墨。对《论语》的接受，不仅仅是对这一本书的接受，更是对于一种价值体系的接受，也是政治相互作用上的文化表现。《论语》虽然是静态的事物，但人们对其的诠释与看法自然是随着时代变化而变化的——汉代的《论语》和朱熹以后的《论语》在思想体系建设上所起的作用自然不会完全相同，而是随着政治的趋势而有所改变。</p><p>我们当然有权利认为《论语》不足以被称为经典，及其背后儒学的无甚价值。比如王小波《我看国学》里这一段，就说得挺在理，至少我也是这么认为的。</p><blockquote><p>现在可以说，孔孟程朱我都读过了。虽然没有很钻进去，但我也怕钻进去就爬不出来。如果说，这就是中华文化遗产的主要部分，那我就要说，这点东西太少了，拢共就是人际关系里那么一点事，再加上后来的阴阳五行。这么多读书人研究了两千年，实在太过分。</p></blockquote><p>然而，我们否定不了《论语》，其背后的儒学在历史进程中所发挥的作用，它在国家治理、文化共同体构成、民族凝聚力提升上的作用。</p><h2 id="文学价值"><a href="#文学价值" class="headerlink" title="文学价值"></a>文学价值</h2><p>《论语》中的语言特别活泼具有表现力，倒装，语气词连用，反问，反复，对偶……应有尽有。许多语句脍炙人口，兼具诗歌的艺术性与格言的思想性。</p><p>《论语》的人物塑造是相当成功的，可谓形神兼备。一个表情，一句反复，便能把人物的亮点给点出来了。着墨较多的人物包括孔子、颜回、子路等。孔子很可爱，循循善诱的，和弟子的交流没有架子。子路就比较莽，看着傻乎乎的，但挺努力，结局也叫人唏嘘。</p><p>讲文学价值不能不结合文本，但手头没有《论语》……当年的笔记也在家里睡觉，改日再写吧。</p><h2 id="和《理想国》的比较"><a href="#和《理想国》的比较" class="headerlink" title="和《理想国》的比较"></a>和《理想国》的比较</h2><p>当然，我们也可以用比较的观点来看。一种比较是把《论语》和《理想国》放到一起，因为这两部作品比较像，都是语录体作品，都是古代社会差不多时段的经典，相关人物也有颇多相似之处。孔子与苏格拉底（虽然是披着苏格拉底外衣的柏拉图），相似而不相同，值得放到一块来研究。</p><p>这样的比较一般比较体系化，比如可以比较二者的教育观，二者对理想政治的看法，二者对世界本源的认识，等等。这些个意识和其社会环境也是不无关系的，于是我们还可以比较两个社会的分别……</p><p>书不在手里，没有史料，ddl也不在线，改日再写。（咕咕咕）</p><h1 id="《论语》的读法"><a href="#《论语》的读法" class="headerlink" title="《论语》的读法"></a>《论语》的读法</h1><p>就是本书而已，哪来那么多读法。瞎读即可。读得开心就读，不想读了就扔掉，这是看闲书的态度。没必要关注它的名号，没必要把它当正经书读，也没必要研究得很透（文科生自觉忽略）。喜欢谁的注疏就拿来看，就这样。</p><h2 id="个人读法"><a href="#个人读法" class="headerlink" title="个人读法"></a>个人读法</h2><p>个人是把《论语》作为格言集，随便翻翻，看到有感触的再细看，沉淀在记忆中，等到自己有了相似的体验后再把它拎出来，仔细端详……</p><p>可能对某一句会有很多很多想法，可能对另一句一点想法也没有（比如孝悌，说有什么意思，行动呗）。对后一类会忽略，对前一类则会把与之相关的思考挂在一起，等到什么时候堆足够高再把它们汇总起来，写到一块去。</p><p>不懂古文，只会望文生义，孔子的原意和我的想法可能差了十万八千里。不过话说回来意思不一样，又如何呢？我写的只是我眼中的，而不是大家眼中的《论语》呀。</p><p><strong>有朋自远方来，不亦说乎？</strong></p><p>以前我总觉得这不是废话吗……不爽，我哪来的朋友。这句话没意思。</p><p>而刘震云则能从这句话想到，什么才是朋友，这样一个尖锐的问题：</p><blockquote><p>如讲到“有朋自远方来，不亦乐乎”，徒儿们以为远道来了朋友，孔子高兴，而老汪说高兴个啥呀。恰恰是圣人伤了心。如果身边有朋友。心里的话都说完了，远道来个人，不是添堵吗？恰恰是身边没朋友，才把这个远道来的人当朋友呢；这个远道来的人，是不是朋友，还两说着呢；只不过措着这话儿，拐着弯骂人罢了。徒儿们都说孔子不是东西。老汪一个人伤心地流下了眼泪。</p></blockquote><p>选自《一句顶一万句》。全国卷有篇《塾师老汪》，是里面故事的缩写版，不妨一看（虽然经常在做语文《五三》的时候情不自禁地看阅读摸鱼，但还是不喜欢喜欢的文章成为高考题的感觉）。</p><p>于是乎，现在看到这句话，则会心生一丝凄凉的感觉。</p><p>但其实不应该这么割裂地看的。这半句话出自《论语·学而》，讲学习呢（虽说不是学术是伦理），前面跟着句“学而时习之，不亦说乎？”后面跟着句“人不知而不愠，不亦君子乎？”所以更好的解读是把这三句连在一起，放到这整篇里面看。于是，这三句主要在说学习的第一法则：复习并能从中得到快乐（这需要第一遍的学习形成了足够清晰完整度足够高的知识体系），和他人交流并从中收获友谊与喜悦，君子地处理学习中的信息不平等问题。看上去这三句内部关联不是很大？管他呢。如果我是孔子，我也不会把“不亦说乎”的充分条件枚举一遍列出来。而是，根据自身经验，感觉复习很快乐，和他人交流很快乐，把这些东西扔到“不亦说乎”堆里。平时聊天把堆顶的元素弹出来。啊，复习真快乐啊；啊，和朋友交流真舒服啊；啊，友善的交流才是君子啊。最后有个递进，还朗朗上口，好，徒儿们，记下来。</p><p>再比如这句。</p><p><strong>学而不思则罔，思而不学则殆</strong></p><p>以前只是觉得这句话很对，很合理，嗯，就这样。没啥感觉。</p><p>而这或许是因为没有体验过“罔”的感觉吧。这句和上一句一样，再小学课本里的《&lt;论语&gt;十则》这篇里都找得到。真的，小孩子对“罔”有什么感觉……</p><p>而在搞竞赛的时候，在被一个题卡了若干小时后翻看题解毫不意外地发现自己对这部分的知识一无所知的时候，翻开崭新的教程，准备接受知识的洗礼时，很容易会陷入迷惘。虽然想要学习想要提升，但在学了一页又一页的定理而面对例题仍手足无措，看到题解仍满腹疑惑，对自身的价值，对自己的学习能力，对自己过往的努力，也可能产生骤起的挥之不去的怀疑。学而不思，让我们只看到了知识海洋的浩淼与深不可测，于是乎我们开始迷惘。</p><p>每当此时，我们不妨放下脚步，停止打了鸡血一般的猛灌猛学，睡一觉，同时认真思考一下自己为何而迷惑，自己要学习些什么。总之信心不能耗散。</p><p>为什么这个题题解是这样的呢？它是裸题吗？它一定要用这种方法吗？这一方法体现了什么思想？用到了什么性质？还有什么样的模型可以用这种方法解决？等等等等。我们有很多的疑惑。首要的一步是把纷乱的疑惑归结起来，整理出其层次关系，再逐个击破。这样贯彻了自己思考的学习，往往较灌输式的学习（不仅包括没有思考地听老师讲，也包括没有思考的看书）来得有效果。</p><p>思考固然有乐趣，然而一味沉浸在自己的思索而妄图搭出学科的大厦来，对大多数人而言是不大可能的。思考之上，当思考我们思考时思考什么。什么样的问题需要考虑？知识点间能组建出什么样的联系？这些问题往往不能通过简单封闭的思索得出答案，而需要几代人的努力加上思想的沟通。而学习，便是让我们一窥这些问题的答案的大门。反过来说，思而不学，则无法更大地延伸自己的思维，反而可能造就井底之蛙般的学习态度乃至人生态度，这便是其有害之处。</p><h2 id="他人读法"><a href="#他人读法" class="headerlink" title="他人读法"></a>他人读法</h2><p>没读过相关的正经学术著作，只读过闲人写的闲文章，是语文老师发的若干课后阅读，她们整理的这系列阅读质量都挺不错。上到《知其不可而为之》这课时候课后阅读是相关的文章，都挺好，虽然我都忘掉了，只记得一篇周国平的《孔子的洒脱》，写得挺洒脱。</p><p>随着经济社会的发展，中产阶级队伍的壮大，市面上出现了许多和《论语》相关的一些“通俗著作”。这些作品的特点便是销量高但生命周期和出书周期短，内容和《论语》虽有关联，但夹杂私货甚多，可谓挂羊头卖狗肉。具体是哪些大作就不一一点名了。其他传统名著也有相关的“通俗读本”“xx解读”，不过近年来风向也有所改变。此类书市场的繁荣是营销的成功，但却是文化的失败。资本险恶的呀，我们当认清其本质，重视经济在这些社会乱象中的作用，用科学的理论武器分析这些社会现象的当下和未来（知道我在说什么吧，就不点出来了）。至少我们得清醒，媒体眼中的《论语》，不一定总是它原本的样子，也不要总是把其宣传信以为真，要保持自己独立的思考呀。</p><p>私以为将传承《论语》及其背后的传统文化的一种值得推崇的方式，不是营销式地推崇所谓国学，将其神秘化、功利化，而是将传统文化的精髓渗透在自己的理解中，同时加上自己时代的解读。除去上文所述刘震云从“有朋自远方来不亦说乎”引出其对于中式人际关系的思考（事实上，刘震云的小说更能让人想到《水浒》，在来与回之间的个体的无奈），笔者还很喜欢刘慈欣的《朝闻道》，从科研工作者对真理的求索中，我们可以看到古士大夫求索理想政治精神的影子，可以看到“人”的光辉。</p><p>或者是太祖的诗词中，《水调歌头·游泳》里的豪迈，“逝者如斯夫”，时间过得很快呀，已经是我们的时代了，小子们努力啊。</p><h2 id="印象"><a href="#印象" class="headerlink" title="印象"></a>印象</h2><blockquote><p>曰：“是知其不可而为之者与？”</p><p>暮春者，春服既成，冠者五六人，童子六七人，浴乎沂，风乎舞雩，咏而归。</p></blockquote><hr><p>开始于2019-06-03</p><p>完稿于2019-07-27</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随想 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【围炉夜话】吉静关于朋友的一些胡思乱想，及友链</title>
      <link href="/2019/07/22/Toughts-On_Friends/"/>
      <url>/2019/07/22/Toughts-On_Friends/</url>
      
        <content type="html"><![CDATA[<p>海水退去 露出了漫漫的旷野</p><a id="more"></a><h1 id="高中"><a href="#高中" class="headerlink" title="高中"></a>高中</h1><p>先讲朋友。ljq叫我广交朋友，但我不是很喜欢这样的建议。不是很愿意主动和别人结交。高中时候班主任也经常给我提这样的建议，我也都是“哦哦哦”过去的。你们不是我，也不了解我的平凡的普通的真实的我也不清楚为什么会感到的尴尬。</p><p>我没什么朋友，独来独往了若干年，没觉得这样有什么不好。自己学习，自己探索，自己难过。自己难过比较难受。可能和他人分享会好受些？不觉得。人真的能够理解他人吗？真正地，理解他人的痛苦，彷徨，徘徊与失落？我相信每个人都会有这样的感受，但不相信人能够<strong>理解</strong>他人的这番折磨。没有原因，仅是不相信而已。</p><p>有时候和同学走在一起，会有貌合神离的感觉。感觉大家都不喜欢我。和蒋哥们走一起时都是他们在聊天。感觉自己可有可无。好像是高二的时候吧，因为相关的原因不想吃饭，包括中饭，包括晚饭。饥饿很好，能把我的想法从那些乱七八糟的很烦很不爽的事情上转移到对饥饿本身的体味上。当然饿多了身体也吃不消，白天头会很晕，晚上会睡不着想着想吃东西想吃东西。于是就只能夜自修后去吃夜宵了。吃夜宵的时候，有时翔中会坐过来，这时候往往会感到一种莫名的感动。</p><p>感觉自己比较黏，谁都黏。大家似乎不喜欢这样的我？那我就只黏着自己好了。很多时候会很封闭，不愿意和人来往。宁愿盯着题目毫无思绪地发呆，宁愿一直一直生闷气，也不想去打扰别人。并不是没有尝试过，只是试的次数太多我厌倦了。错的似乎总是自己。我没有道理，我比较偏执。难过的也是自己，虽然别人也不好受？但我体味不到，理解不了。讨厌将心比心，当且仅当我很不很不开心。</p><p>高三时候心理可能正常了一些吧，虽然不是所有时候。晚上喜欢和阿彪聊天，虽然人家经常不理我。”睡觉。“但也不总是不理我。印象比较深的是四月选考结束后的晚上，我因为网络太崩成绩还没查出来，心还悬得很，完全睡不着。聊未来，聊选择，不知聊些什么，不知聊到几点。虽然我们基本都是自说自话，自问自答，但就是能沉浸在这样没有逻辑的对话中，在充满不确定的前方中感到一丝安定（当然，如果之后发现考试崩了，想必我的回味也不会是这个样子吧）。</p><h1 id="大学"><a href="#大学" class="headerlink" title="大学"></a>大学</h1><p>大学里朋友有很多划分：室友、课友、队友……反倒是“同学”用的少了。我用同学指代课友，同学还以为是高中同学。</p><p>这样的划分在“友”字之前更强调对方在己生活中的具体哪一部分（虽然说者不尽都这么想），更强调双方的共同点（或者说共同利益？），更社会了些，没有象牙塔里那么纯真（去他娘的纯真）。虽说是”友“，但终归只是个称谓而已，这很礼也很文明，但似乎也造成了成年人之间的一丝微妙的隔阂。</p><p>虽然结识很多厉害的人也是上大学的一个作用，但真的不喜欢主动。讨厌经营人脉。无聊。一般不会约别人出来。我对未来没什么想法也不想有什么想法。我只想过上平静的生活。</p><p>有时也会被认识，但并不是所有时候都想认识别人，也不是所有人都想认识。至于想认识和不想认识之间的区别，我也不清楚。私以为能力并不是重要因素。或许和开朗的同学更能聊得来吧。</p><p>有时看着大家都成双入对的会有一丝羡慕，但觉得自己并不是个能始终对女孩子负责的人。无意伤害他人，所以还是把可能的悲哀扼杀掉好了。</p><p>生活本就很拧巴。所以有一些隔阂，保持些距离似乎也不错。进了浙大以来心理状况比以前要健康地多了。庆幸自己能觉得自己是个正常人。这和所处的环境必然是有一定关联的。大家有了距离可以不相互打扰，我可以happy coding而不必在高考之外不自觉地考虑班级里年级里的partition问题，这很棒，对我而言。（当然大学的生活境况必然对每个人心理状况的影响是不一样的，起码我觉得自己的室友，碰到的同学，都很nice）</p><p>但下了雨还是希望能有人来给自己送伞呀。</p><h1 id="Cyber"><a href="#Cyber" class="headerlink" title="Cyber"></a>Cyber</h1><p>或许于我而言，朋友并不是个日常性的词汇吧。所谓“朋友圈”，里面却大都是陌生人的生活，真奇怪呀。</p><p>谈及朋友圈，及与之相关的social media，引一段卢昌海的相当有趣的思考：</p><blockquote><p>性格使然， 我较少与人互动， 微博微信都如此。 有时会想， 微信因为是朋友圈， 相互点赞比较频繁， 那里的点赞会不会无形中成为一种类似 “表忠心” 的行为？ 当一条微信被 N - n 个朋友点赞， 那没点赞的 n 个朋友会不会引起微信主人的留意 (尤其在 N ≫ n 时)？ 如果用 Ai 表示没给微信主人的第 i 条微信点赞的人的集合， 则 ∩Ai 会不会被当成 “叛徒” 集合， 那里的人会不会像《古拉格群岛》里那个在需要鼓掌的场合第一个停止鼓掌的人那样， 引起最高级别的留意？</p></blockquote><p>在信息流通渠道更加多样的今日，诚然人们能更加便捷地获取彼此的相关信息，但对于彼此的<strong>理解</strong>却并不较昔日有了同步的加深。相反，对于“友谊”的经营却更便捷，更快速，更细微化了，因为通信方式的变迁。看上去每个人的通信量都增加了故而朋友也更多了？但是人性并没有随之进化呀。表面稠密的friendship graph，实际上，各个edge的weight也并不像看上去的那么大。无往不在的枷锁呀。</p><h1 id="自己"><a href="#自己" class="headerlink" title="自己"></a>自己</h1><h2 id="其一"><a href="#其一" class="headerlink" title="其一"></a>其一</h2><p>不怎么打游戏，不怎么看番。</p><p>不怎么关注热点，包括科技，包括社会。</p><p>不敢在social media上说话，不敢水群，没有点赞的习惯。</p><p>不喜欢关于自己的照片。</p><p>不喜欢在所有人面前暴露自己。</p><p>不喜欢大的组织，不喜欢多人小组的退化，不喜欢不被搭理。</p><p>不喜欢碰到认识但是不熟悉的同学的时候被无视的感觉。</p><p>不喜欢应酬，不喜欢恭维与被恭维。</p><p>不喜欢从他人的身上看到自己的镜像。</p><p>等等。</p><h2 id="其二"><a href="#其二" class="headerlink" title="其二"></a>其二</h2><p>喜欢各式各样的童话。喜欢梦幻的环境，美好的结局。比如《爱丽丝漫游奇境》，作为数学家的Dodgeson自然也欣赏。</p><p>喜欢塞林格。喜欢没有故事的故事。</p><p>喜欢刘震云。喜欢无可言说无可表达的生命的苍凉。</p><p>喜欢余华，《世事如烟》。喜欢冷酷得看得有些难受的叙述，喜欢这样的真实。</p><p>也喜欢自己创作，乌七八糟的故事，思绪散乱的随笔，形式上的诗歌。</p><p>喜欢汤浅政明的动画。喜欢草稿的恣意，色彩的张扬，还有剧本的狂放。</p><p>喜欢《梦日记》。圆圆的树象征温暖。</p><p>喜欢马蒂斯的绘画，《舞》尤其。喜欢色彩和图案背后的洪流般的生命。</p><p>喜欢巴赫的音乐。喜欢天空。</p><p>喜欢逆向，喜欢密码学，喜欢隐写术，喜欢web，喜欢筋疲力尽而后看到“flag：xxx“的那一刻。</p><p>喜欢瞎搞，喜欢学习每个新算法时的苦涩和顿悟时的激动的兴奋，喜欢Accepted的绿色。</p><p>崇尚计算机科学家与数学家，尤其其中各个领域的开拓者。</p><h1 id="友链"><a href="#友链" class="headerlink" title="友链"></a>友链</h1><p>以文会友（可不是言在此而意在彼），是个人简单的希冀。当然以下很多都只是单向边……</p><h2 id="自己-1"><a href="#自己-1" class="headerlink" title="自己"></a>自己</h2><p>如果你能看到这个blog这篇随笔，你或许对一些文章的一些部分有一些想法？或许想交流？一种联系方式是与blog相关联的github账号，虽然通过github来交流感觉有一点点的奇怪……但是github是个交友网站不是吗（<del>划掉</del>）。</p><p>抑或，可以用更普遍也更俗套一点的交流方式，social media。鄙人的QQ号是第648647743个evil number（二进制表示中含有偶数个一的数字，第一个是evil number是0）。邮箱的话也是账号，因为并没有开其他邮箱。</p><p>我的称谓有很多（<del>因为喜欢胡乱取名字</del>），不过现在基本也固定下来只用几个了。作为successors of Alan Turing的我，作为艺术家与诗人的我，日常中的我，你们眼中的我，在不同维度下的同一个体。</p><h2 id="同期"><a href="#同期" class="headerlink" title="同期"></a>同期</h2><p>（排名，自然是不分先后的）</p><p>NCJ：<a href="https://ncj.wiki/" target="_blank" rel="noopener">https://ncj.wiki/</a></p><p>XTXTMTXTX：<a href="https://www.xtxtmtxtx.xyz/" target="_blank" rel="noopener">https://www.xtxtmtxtx.xyz/</a></p><p>chty_syq：<a href="https://chty.coding.me/" target="_blank" rel="noopener">https://chty.coding.me/</a> （那个nerds.pub好像是合作性质的，管理员还有logining等，不过其他我不认识/捂脸）</p><p>zkx06111：<a href="https://zkx06111.github.io/" target="_blank" rel="noopener">https://zkx06111.github.io/</a></p><p>知名退役选手jsb：<a href="https://www.cnblogs.com/jiangshibiao/" target="_blank" rel="noopener">https://www.cnblogs.com/jiangshibiao/</a> （其实只看学长的游记和好番推荐/捂脸）</p><h2 id="先辈"><a href="#先辈" class="headerlink" title="先辈"></a>先辈</h2><p>卢昌海（知名科普作家，物理/人文）：<a href="https://www.changhai.org/" target="_blank" rel="noopener">https://www.changhai.org/</a></p><p>matrix67（知名科普作家，数学，前OI选手）：<a href="http://www.matrix67.com/blog/" target="_blank" rel="noopener">http://www.matrix67.com/blog/</a></p><hr><p>初稿写于2019-07-21，夜</p><p>改于2019-07-23，昼</p><p>改于2019-07-26，夜，自己</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【朝花夕拾】吉静文选 告别</title>
      <link href="/2019/07/18/History-My_Essays-Farewell/"/>
      <url>/2019/07/18/History-My_Essays-Farewell/</url>
      
        <content type="html"><![CDATA[<p>往事如烟。整理昔日的文稿，总会感到一阵时空错位，和悲凉的感觉。</p><a id="more"></a><p>（版权所有，严禁转载。违者自行承担相应法律责任）</p><p>这个集子名《告别》。</p><p>虽然是随笔，但有些偏向于《残垣》那种风格，但色彩基调明显不一样，也更具现实感。</p><h1 id="教室，在夕阳下"><a href="#教室，在夕阳下" class="headerlink" title="教室，在夕阳下"></a>教室，在夕阳下</h1><p>初中的课本皱巴巴的，好多课文感觉都没学过，仔细一看它们又熟悉起来了。书中有蝈蝈和蛐蛐，有星星的变奏曲，它们提醒了我某段早已被遗忘但仍旧温馨的时光。于是彼时的我住进了此时的我的身体里，时间停止了。 </p><h1 id="竞赛时期标准日程"><a href="#竞赛时期标准日程" class="headerlink" title="竞赛时期标准日程"></a>竞赛时期标准日程</h1><p>起床，清醒，吃饭，待命，上课，能懂，不懂，课间，上课，下课，买饭，回寝，玩乐，午睡，起床，清醒……</p><p>这就是我们的一天，这就是我们的一生。</p><h1 id="最后一次春游"><a href="#最后一次春游" class="headerlink" title="最后一次春游"></a>最后一次春游</h1><p>还在路上，就闻到了前方传出浓郁的烤肉的芳香。烟雾那边我们手忙脚乱。烤架咝咝，送下了喷香的羊肉灼口，还有鲜嫩的青菜淌油。椅子上的自来水逐渐泛开了油滴与黑水。酥而脆的五花肉，韧而耐嚼的鸡心，弹来弹去的面筋，不肯抬头的里脊，以及大红的虾与白里透紫的鱿鱼，都发着小泡，点缀着若干孜然、椒盐，跃入食客们的口中，使得香留唇齿。大饮料瓶中的冰可乐不久就被抢灌一空，留下横七竖八的塑料杯狼藉地躺在桌子上。邻桌娴熟的新疆小伙已和一帮人出去开观光车了，余下一个新人懒懒地经营着几串豆腐，收获着数片扇贝。鼓鼓的肚子坐在长椅上悠闲地沉浸于自己的世界，胖胖的老师则在收拾罢餐桌后拉住路过的同学，来来来，再吃一点。烟雾渐渐散去，人群也变得三三两两，时间在这里走向静止。</p><p>我是在返程的大巴上想起这一切的，那时我因过度尽兴而感到有些疲倦。车里不少人睡着了，很安静，静得仿佛一切都在离我而去，包括三年来所有的好奇所有的不甘所有的恼怒所有的欣喜。</p><h1 id="旧照片"><a href="#旧照片" class="headerlink" title="旧照片"></a>旧照片</h1><p>画面上那个肥嘟嘟圆圆脸的表情呆呆的小孩子，穿着肥大的暖暖的棉衣，被高高抱起，在自己的农村老家门前。那是我。</p><p>这组照片包含了很多景点，看得出是全国各地的大好河山。美丽景色的前边只站了一个人，就那么直直地站着，带着说不好是什么的表情，或许是平静吧。那是妈妈，没有皱纹。</p><p>这张照片是在“温州乐园”拍的，那儿我只去过一次。我不记得那次自己玩得如何，但能从照片上明显地看出奇怪的飞行器上大笑着的那位，铁定是玩得很开心的。他眼睛睁得那么大，可以说有些夸张，不过他平日表现高兴也是这样的。那是我爸，我没法和他交流我现在的感受了。</p><p>不知是我几岁时的家庭聚会，标题写着奶奶的生日。这桌布、这光线，看上去都明亮亮的，很舒服。我穿着某件看上去挺漂亮的毛衣，妈妈有些朴实地目视前方，奶奶则略显笨拙地做着这会儿的主人。很温暖啊。</p><p>我不喜欢拍照，爱拍照的人是爷爷，相册弄了一大摞，不过我还没怎么看。我只在题目写不来时把题目拍下来问我爸，或偶尔想拍了拍两张。手机里的相册，如今仍忠实地提醒着我2017年9月的、2017年6月的往事，当时的情景历历在目，我还能感受照片中自己手指的温度。</p><p>照片还有很多，一一说来不免无趣。随意翻略它们，我看到记下了那只我曾爱不释手的恐龙、从前老家暗淡的光线以及其他许多触动心灵的细节。百味杂陈，我无力诉诸语言，也无意借助语言。</p><p>有时想想，世界还是挺残酷的。隔了一层纸的距离，时间就能永驻，任凭纸外的人感伤流涕也毫不改变。当然“永驻”不大可能，原子衰变或是其他物理化学因素可以轻松摧毁那个世界，只是这和我们正常人类不大相干罢了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 回忆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【朝花夕拾】吉静文选 寻趣</title>
      <link href="/2019/07/18/History-My_Essays-Collection_Of_Jokes/"/>
      <url>/2019/07/18/History-My_Essays-Collection_Of_Jokes/</url>
      
        <content type="html"><![CDATA[<p>不开心的大背景下难得真正开心的一些时刻。</p><a id="more"></a><p>（版权所有，严禁转载。违者自行承担相应法律责任）</p><p>难得的开心的文字呀。</p><p>（有几篇太羞耻了，不能放上来）</p><p>（“Meme的涨与落”这个栏目是之后放上来的，持续更新中）</p><h1 id="徐立海讲水浒故事"><a href="#徐立海讲水浒故事" class="headerlink" title="徐立海讲水浒故事"></a>徐立海讲水浒故事</h1><p>话说鲁提辖在街上买了十斤肉，他乘电梯回公寓时，这个肉呢，放在秤上重量变重了，这是为什么呢？因为它受到了一个向上的加速度！所以超重啦！他快到家的时候，又发现这个肉，又变轻了。他就想回去揍镇关西。他快到电梯门口的，肉又变重啦！哎他就觉得，这个肉有鬼，还是不爽，就去把镇关西给打啦！这就是“拳打镇关西”这个故事的由来。</p><h1 id="某活动课"><a href="#某活动课" class="headerlink" title="某活动课"></a>某活动课</h1><p>一对阴鸷的眼睛在里面四处摇头晃脑地打量着，伴随着牛皮男鞋的“哒哒”声空谷回响。发牌的手冷了下来，目光黯淡地看着前方这无尽深渊。校服以外的蓝色在几秒前还欢快嬉笑的身影后停了下来。“玩什么呀？”</p><p>但什么也没发生，那个男人用同样阴冷的语调说道：“玩吧玩吧，放松一下。”然后他走开了。</p><h1 id="三重奏鸣曲"><a href="#三重奏鸣曲" class="headerlink" title="三重奏鸣曲"></a>三重奏鸣曲</h1><p>平静如水的黑夜里，那个角落传出了不安分的声音。声音起初还只是微弱的鼻息，到了某个节点突然被添了过量的燃料一般，变得雄浑有力，宛若有一辆铁皮火车在喉咙间艰难地前行。它先是爬山坡，音调循序渐进升高，余音袅袅；到了山顶稍作停留，便马上坠下，准备一段时间后东山再起。如此往复，经久不息。对床的低音炮听闻火车隆隆，仿佛找到了知己，与之共鸣起来，时而高亢，巍巍乎若山峦；时而低沉，洋洋乎如流水，变化多端，响亮非凡，嗓子好似海绵被压榨般拼命地挤出声音。那边的重感冒也不曾闲着，这小子还宣称自己从不打呼噜的。三个喉咙不分你我不分轩轾不分高下，你方唱罢我登场，欲与天公试比响，共就三重奏鸣之曲，共成三足鼎立之势。哪怕人间至乐，动听不过如此。只是天下没有不散的宴席，不久便只剩下一辆孤独的小火车寂寞而坚毅地爬着山坡。然而这仙乐倒越发至臻至善了：头一秒还是火车蹒跚步，下一秒竟成了瀑布下高山。只是这样的境界不可久驻，它重复了两三回后，嘟嘟，没燃料了。</p><h1 id="灵魂宝石"><a href="#灵魂宝石" class="headerlink" title="灵魂宝石"></a>灵魂宝石</h1><p>阿狼（化名）此刻正在竞赛教室兴致勃勃地玩着手机，此前他正彻夜不眠地目不转睛于那个发光小长方体，而往常这个时间他都在垂下高贵的头颅以补充能量。</p><p>“阿狼，手机还我。”</p><p>就在中翔（化名）夺过他手机的那一刻，阿狼的眼中光芒尽失，他的身体轰然倒塌，他的灵魂仿佛在一瞬间被抽走了，只留下那具面对桌面沉思的躯体。</p><p><strong>续</strong></p><p>阿狼（化名）此刻正在竞赛教室沉睡仿佛与世长辞。娇男（化名）为不打扰他休息，轻轻地把手机放在他桌子上。听闻这手机碰桌的微小声息，不为任何大吵大闹所动的阿狼竟还魂一般立了起来，夺过那手机稳稳地玩了起来。</p><p><strong>续二</strong></p><p>阿狼（化名）此刻正在睡觉，这是因为手机被玩没电了。幸而它正在充电。随着手机电量越来越高，阿狼的眼睛越来越亮。在手机充满电的那一刻，阿狼自然地将手机拿起，解锁密码，玩了起来。</p><h1 id="Meme的涨与落"><a href="#Meme的涨与落" class="headerlink" title="Meme的涨与落"></a>Meme的涨与落</h1><h2 id="咆哮体"><a href="#咆哮体" class="headerlink" title="咆哮体"></a>咆哮体</h2><p>时间：2008-2009年</p><p>这种东西太长就不放实例了（一般也越长越有趣）……直接放<a href="https://v2ex.com/t/587216?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">链接</a>吧。</p><h2 id="禅师体"><a href="#禅师体" class="headerlink" title="禅师体"></a>禅师体</h2><p>时间：2012年7月</p><p><a href="https://baike.baidu.com/item/%E7%A6%85%E5%B8%88%E4%BD%93/7905342?fr=aladdin" target="_blank" rel="noopener">禅师体</a>，下为实例。</p><p>禅师举着一个钵，让青年把他装满，青年装了一钵石子。</p><p>禅师说：「其实，钵并没有满。」</p><p>青年于是往里又加了一些沙子：「现在满了吗？」</p><p>禅师又说：「其实，钵并没有满。」</p><p>青年略一沉吟，说：“还可以加<a href="https://baike.baidu.com/item/氢氟酸" target="_blank" rel="noopener">氢氟酸</a>溶解掉沙石蒸去残液，再高温熔融，最后还原成硅单质并且做成闪存装满数据。</p><h2 id="集句变种"><a href="#集句变种" class="headerlink" title="集句变种"></a>集句变种</h2><p>时间：2019年7月</p><p><a href="http://xue.paralworld.com/xuewen/2254/" target="_blank" rel="noopener">集句</a>，下为实例。</p><p>「老妪力虽衰，波撼岳阳城。」</p><p>「旧时王谢堂前燕，排空驭气奔如电。」</p><p>「我闻琵琶已叹息，呕哑嘲哳难为听。」</p>]]></content>
      
      
      
        <tags>
            
            <tag> 回忆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【朝花夕拾】吉静文选 无明谈</title>
      <link href="/2019/07/18/History-My_Essays-On_wuming/"/>
      <url>/2019/07/18/History-My_Essays-On_wuming/</url>
      
        <content type="html"><![CDATA[<p>一些工地哲学，不保证对概念的认知是正确的，也不保证逻辑顺畅严密。如果觉得不值得批判就不必批判吧，但是可以推荐笔者阅读什么以提高认识。</p><a id="more"></a><p>（版权所有，严禁转载。违者自行承担相应法律责任）</p><p>一些工地哲学，不保证对概念的认知是正确的，也不保证逻辑顺畅严密。如果觉得不值得批判就不必批判吧，但是可以推荐笔者阅读什么以提高认识。</p><h1 id="无明谈"><a href="#无明谈" class="headerlink" title="无明谈"></a>无明谈</h1><p>太初有道。在语言的力量下，人类由分散的个体团结成群形成氏族构成部落建立国家。传说人类语言相通的时候人类企图修建通天塔以获取神的荣耀。神怒，乱匠人言语，故塔不成，人心异，人类中出现了纷争、不和与矛盾，世界也走向多元化的融合与冲突。象征人类力量的通天塔，也只得毁灭，显示着人类的无力。</p><p>先民总爱将眼光放到不确定的古代，仿佛那里真有尧舜，真有太平。然而人类的生存状态大抵都是一致的，各有其烦恼之处。通天塔的繁华是短暂的表象。造神的是人，用神惩罚人的也是人。人，既非天使也非恶魔，受世间规律制约，却总以为自己独立于自然之外。人生而会痛苦，会在许多方面与世界格格不入。</p><p>为了面对人生命中的苦难，人类发明了人文情怀，一种对人类自身生存状态的关怀。其表现形式多样：知其不可而为之，从辟世之士，游戏与逍遥……西方也有研究人生哲学的，也有人因“在路上”而接受禅宗，而找到了自己的存在主义。所有的主义回答的均是一个问题：如何活下去，饮下生活这杯苦难之酒。</p><p>究其社会本质，人不过一个点，一个细胞，但却是有灵魂的细胞。灵魂有追求，有不满，有彷徨，有无奈。我们很多时候都在被灵魂牵着鼻子走，向出人头地，想惊天动地，想成为世界中心，想消灭一切异己，想逃向死亡以摆脱痛苦。即便如此，人们总还是倾向于认为灵魂是高贵的，而肉体是粪土。对此，尼采以“人是一条不洁的河流”回应，不洁的自然是自以为高贵却在暗中努力扩张的自以为是的灵魂。一个人就算成了权力的中心，学界的泰斗，舆论的化身，他又怎样呢？他不过一个点，一个细胞。生物上将不断扩张还要死命转移的细胞称作癌细胞，而个人在社会中不也一直发生着癌变么。要治好人类这一疾病，我们依靠的道德或法律的放射线，但这仅是外部的治疗而已。</p><p>人的自我扩张应在一定的限度内，否则易变得畸形。一个点的最好归宿是线。凭借点与点的连结，有了氏族、部落、国家……于是滔滔的人类洪水凭着智慧与社会性重新构建了世界各地的生态链，爬上了顶层，这是人类的荣誉或罪恶。但即便线在整体上是牢靠的，它在局部不一定稳定，这是因为作为人与人连结纽带的语言或心灵是不稳定的。这使人类在体验个人悲剧性的同时，在与人交往过程前后会凄凉会哀伤，这是一种普遍的，难解的，持续性的，孤独。</p><p>个人的悲剧性，私以为源于生命的荒诞本身，及其带来的痛苦。这不适宜用议论性的语言，而适合用故事去描述，去激起共情。乞煤者骑煤桶飞行，巴山夜雨永无止尽，鲁镇的祝福中空气醉醺醺。这就是痛苦，这就是悲剧。</p><p>个人也是不可能完全融入群体的。人生而各异，而有不同的经历，而无法真正共情。就算能又如何呢。思维不可表达自我，故痛苦对于群体中的个体而言虽然普遍，但个体无法相互理解，这也是荒诞艺术的合理性所在——非理性的情感无从表达自我，只能表现表现本身来表达自我。语言本就是理性的产物，很多话说了没用，很多话不能说，有理的话也并不一定有理。心与口的距离有时候可以大得离谱。举刘震云小说《手机》为例，因为说话，剧情一步步偏离我们的预想，人物也陷入了平常而荒诞的“拧巴”状态。“拧巴”一词可谓刘震云小说的标签，也是他对人生的看法。言不尽意是必然，语言可以缔造一个国家，但不足以构建一个普遍的共同价值体系，使得万众一心。</p><p>语言是一个原因，还有很多原因，如道德与法律。这两兄弟其实是一体的，都是社会对个人的规范，不过一个善打一个善劝。在道德体系中人应是绝对规范的，逾越了规范人就是禽兽就要被排挤，但是灵魂它桀骜不驯呀，敢于质疑理性，或自以为理性地离经叛道。规范总是外部的，治标不治本，其内化也不完全。何况道德还不普适，随土壤变色很厉害，如有奴隶主阶级的道德，地主阶级的道德，资产阶级的道德，条条框框都不一样。张三的道德同王二的道德又不一样。法律的问题则是它太硬了，可以种下敬畏，无法种下心服，虽然表面看上去是心服了。生活是一个复杂的多元博弈，是一个高阶混沌系统，里面的玩家和规则都不能不能一直抽象下去，而那再抽象不下去的，就是我们多彩而灰暗的社会生活。</p><p>人的一生中快乐是短暂的，而痛苦是永恒的，至少我这么觉得。宗教的说法是人有罪故人生而痛苦，此生的目的是过渡到彼岸。可惜彼岸并不存在。周国平有一篇《哲学家或中蛊者》，看完深有感触。因为在很多时候，我也同那些因思想而痛苦的普通人一样，想得太多，活得太累。我不否认他们发现的是真理，我的疑问是：真理又如何呢？世界上是真理的认识太多了。不是说我找到真理人生就good end了，我还得无味地活下去，应付生活中的鸡毛蒜皮，而且我比之前还累，因为我用真理把自己抬高了，于是他人都理解不了我，我怀才不遇，我百年孤独。我认为生命的价值在于生命赋予我们的可能性，而非达成某个具体的目标，比如考好大学，比如创造杰作，比如发现真理。人生好比旅途，沿途景点虽好但并非我们的终极目的，我们的本质在于不断地行走，在于生命体验，在于向往远方的心不会安息。在这个意义上，我对永生没有什么想法，因为那基本只是痛苦的延续。我只希望自己能在旅途某处安然地躺下，回归于大地。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 回忆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【朝花夕拾】吉静文选 桃园</title>
      <link href="/2019/07/18/History-My_Essays-The_Utopia/"/>
      <url>/2019/07/18/History-My_Essays-The_Utopia/</url>
      
        <content type="html"><![CDATA[<p>最后一段是借鉴的《兽爪》中的某段剧情：第八集的大战之后，一个服用了“药”的社员拖着半截身子在等死，他请求路过的男主给他一把枪自杀，但他接过枪后却企图射杀男主女主。他们跑掉之后，他想要自杀，却没有子弹了。</p><a id="more"></a><p>（版权所有，严禁转载。违者自行承担相应法律责任）</p><p>最后一段是借鉴的《兽爪》中的某段剧情：第八集的大战之后，一个服用了“药”的社员拖着半截身子在等死，他请求路过的男主给他一把枪自杀，但他接过枪后却企图射杀男主女主。他们跑掉之后，他想要自杀，却没有子弹了。</p><p>Cthulhu风格的科幻小说。</p><h1 id="桃园"><a href="#桃园" class="headerlink" title="桃园"></a>桃园</h1><p>这里是桃园，我是根据祖上流传下的地图来的。老人们说此图非关键时刻不得启封。就连我在厕所中郁郁而死的高祖父、死在五十个女人手上的伯父和用两把手枪终结自己生命的父亲都没有打开过这张地图。如今它在我手上，我在桃园，以一个社会调查员的身份。我想知道这颗黄色星球上的最后一片净土是怎么样的。</p><p>岛的外貌和记载的一样，“芳草腥美，落英缤纷”，外沿是桃花盛开。“林尽水源，便得一山……”我沿小孔进入。光在聚集，就像世界在创立，我感到那边是一个美好的新世界。</p><p>这里的确和我们那不同，偌大的村庄内空无一人。古建筑鳞次栉比，这引起了我调查的兴趣。我走入村庄的内部，打算从房子开始调查。</p><p>每所房屋都不是空的，我在屋外能清楚地感受到。然而门窗紧掩、窗帘遮蔽，里头时不时发出大型食肉动物的进食声、婴儿的尖利笑声以及一些不可名状的声音，大脑产生了本能的畏惧感。窗帘、墙壁或是门楣上不时会冒出或消失些圆睁的眼睛注视着我不断移动。我无法想象里面是怎样一种压抑的恐怖，故而我完全没胆敲门。</p><p>这里是北温带，空气中却一直蒸发着一种浓厚的热气，人待久了足以窒息。</p><p>这里的房屋毫无特点，这是我长久观察后惊惶得出的结论。尽管第一眼看上去是第一航道的古代庭市，它们事实上有种蜡似的虚伪感。房屋的材质并非地球上的任何一种已知材料，性质奇特又恶心。它们的反应甚至让我感觉他们具有生命。</p><p>我终于看见人了，那是一个蘑菇头圆圆脸的小孩和一个胖胖的小孩。他们很欢快地跑着跳着，似乎在进行历史书中提到的“婴孩的游戏”。他们靠近了，脸上洋溢的欢快就像太阳驱散乌云，我感到一种无名的快乐自外界涌入身体。他们靠得越来越近了，我能够听到他们玲珑的小嘴里蹦跳着的欢快的音符，那是：</p><p>“肏你妈…肏你妈…”蘑菇头咧着笑脸，拍打着前面的小胖子，用童稚的声音低声笑骂。</p><p>突然小胖子被路上的石头绊倒了。他的表情即刻突变，它的面具好像裂开了一点。它迅速站起，朝着那石头破口大骂：“肏你妈——的屄！”但随后又仿佛自豪于自己刚才所能说出的最后两字，心满意足地拐进一条小巷，不见了。</p><p>天更热了。</p><p>我突然想到卡夫卡的一篇小说，想到那个被父亲一句判决就马上投河了的孩子，从地上捡了把枪。我想找真正的桃园。</p><p>然而尽是这样的劣等枪。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 回忆 </tag>
            
            <tag> 虚构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【朝花夕拾】吉静文选 残垣</title>
      <link href="/2019/07/18/History-My_Essays-The_Ruins/"/>
      <url>/2019/07/18/History-My_Essays-The_Ruins/</url>
      
        <content type="html"><![CDATA[<p>小说或者寓言。</p><a id="more"></a><p>（版权所有，严禁转载。违者自行承担相应法律责任）</p><p>这个集子名《残垣》。</p><p>我并不知道这样的文章应当归到哪种文体。自认是小说，或者寓言。</p><p>戏谑为少，幽怨为多。</p><p>完全不美好的，过去。</p><h1 id="狼"><a href="#狼" class="headerlink" title="狼"></a>狼</h1><p>“狼来了，狼来了。”我说。</p><p>他们没理我，他们照常工作。</p><p>之后，我把他们吃了。</p><h1 id="鱼"><a href="#鱼" class="headerlink" title="鱼"></a>鱼</h1><p>“子非我，安知我不知鱼之乐？”庄周言毕，跃而入水，曳尾于涂。</p><h1 id="哈姆雷特"><a href="#哈姆雷特" class="headerlink" title="哈姆雷特"></a>哈姆雷特</h1><p>无穷大的图书馆中一只猴子在如山的稿纸中昏昏欲睡地打字直到它滑下椅去在散落的稿纸中留下了串脏脚印。</p><h1 id="君子之风"><a href="#君子之风" class="headerlink" title="君子之风"></a>君子之风</h1><p>你说他说你说你他妈的分明已经纯乎就是个傻逼傻缺傻狗就是个白痴就是个人渣你拉屎吧你去死吧你你你就是个……</p><p>多讽刺啊，这是相互否定吗？其实这是平等。</p><p>一切冲突均同理，即便你以为故作不争就是君子。</p><h1 id="朋友"><a href="#朋友" class="headerlink" title="朋友"></a>朋友</h1><p>我生活在壳里。</p><h1 id="天堂之门"><a href="#天堂之门" class="headerlink" title="天堂之门"></a>天堂之门</h1><p>从未有人从里面出来过。</p><h1 id="海底两万里的风景"><a href="#海底两万里的风景" class="headerlink" title="海底两万里的风景"></a>海底两万里的风景</h1><p>一只塑料袋悠然飘过。</p><h1 id="蟋蟀和蚂蚁"><a href="#蟋蟀和蚂蚁" class="headerlink" title="蟋蟀和蚂蚁"></a>蟋蟀和蚂蚁</h1><p>艺术家飞往天堂，劳动者驻留于大地。</p><h1 id="善之花"><a href="#善之花" class="headerlink" title="善之花"></a>善之花</h1><p>裸露的大地一旷无垠。地上的我看到地缝中的花朵和远处的石像。石像的表情如它复活节岛上的同胞那样复杂。石像或许等了我千年，或许因我的出现而出现。我未可知。</p><p>我朝花朵走去，石像为我流泪。</p><p>我摘起花朵，石像顷之倒塌。</p><p>不详姓字的花，在被摘起时就枯萎了。</p><h1 id="远方"><a href="#远方" class="headerlink" title="远方"></a>远方</h1><p>我是自己醒的，没有人来叫我，这说明火车还没有修好。火车外的男人们咒骂着火车、行程以及世界上的一切，车厢里则堆积着絮絮叨叨的家常女。我想起城市，打着虚假的暖气，烙上了工业文明的钢印，面无表情的机器公民横行其间。雪花落在我的脸上，打断了我的想象。空中仍摇曳着数片晶莹雪花，但它们不属于我，我也不属于它们，我的归属在火车本会到达的那片地方。在轻微而持续的寒冷中，我还能做什么呢？我睡着的时候尚早，以至那提醒乘客火车故障让他们转回巴士的电子音要过一会儿才响起。其间雪下得越来越大了。</p><h1 id="三只小猪"><a href="#三只小猪" class="headerlink" title="三只小猪"></a>三只小猪</h1><p>猪A在把猪B卖给灰狼后长吁了一口气：终于除掉这个心腹之患了。他却未料自己被猪B反咬了一口，在他之前被那匹狼捅了一刀进了酒肆。酒场中猪C与灰狼划拳碰杯，共啖猪肉，谈天说地。</p><h1 id="心之刃"><a href="#心之刃" class="headerlink" title="心之刃"></a>心之刃</h1><p>历史的事实是不明朗的，没有人真正理解一切的细节，而那在一定程度上会导致不可预测的结果。</p><p>我回到班级。有的人回头看我，有的人没有。她像只花蝴蝶一样仍旧谈笑风生对开门两耳不闻，声音尖锐刺耳。一股无名火起，我径自走去，手上握着把刀，它好像一直就在那里。我用力一刺，然后就没声响了。</p><p>有人来劝架，我一一把他们杀了。</p><p>血干得很快，刀像崭新的一样，锃锃发亮。他们的皮肉和骨头马上腐烂了。</p><p>其他学生也消失了。夕阳照进了干净的教室。</p><p>然后，外面飞来了一只蓝蝴蝶，眨巴着翅膀上的一对眼睛。</p><h1 id="食人症"><a href="#食人症" class="headerlink" title="食人症"></a>食人症</h1><p>我住在房子外面，他们在房子里面。平时我们相安无事，但他们时常莺歌燕舞欢笑不断，而我一个朋友什么房间也没有，常常感到很悲哀。他们是如此的冷漠，却又无比热情地对待同间的房客。他们看见我了，他们的目光满是怜悯，他们的脚扎根于水泥地，他们的表情仍旧愉悦。我好悲哀，我好悲哀；每每这种时候我就想吃东西。人类在休息的时候大脑会消耗20%的能量，为什么要这么多呢？有什么用呢？但外面没有什么可吃的东西，随着我越来越沮丧周围的事物越来越奇怪越来越不可名状。我只能吃掉自己了，它们也是这么认为的，至于他们的观点我不知道我也没有感情顾及。先是手指，是没有味道的鸡爪；再是手掌、手臂、双脚、双腿、躯干还有内脏——人类为什么要思想，为什么要接受一切痛苦的根源——我的头部、我的脑浆、我的思想、我的心。最终我被吃得一干二净。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 回忆 </tag>
            
            <tag> 虚构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【朝花夕拾】【转载】听雨轩文选 我的罗曼史</title>
      <link href="/2019/07/18/History-Essays_Of_Classmates-My_Romance/"/>
      <url>/2019/07/18/History-Essays_Of_Classmates-My_Romance/</url>
      
        <content type="html"><![CDATA[<p>非常非常有趣的写法。我也想写这样的内容，不过写的肯定没人家有意趣啦。</p><a id="more"></a><p>（如有侵权，请联系博主。将于第一时间予以删除）</p><h1 id="我的罗曼史"><a href="#我的罗曼史" class="headerlink" title="我的罗曼史"></a>我的罗曼史</h1><p>作者：王敏洁</p><p>月光在墨色的涟漪里晕染开来，满塘浮动的青雾，白衣赤足，衣袂飘飞，跨过万水千山、时光苍茫，她向我走来。一卷楚辞，满纸荒唐，千年哀愁从笔墨间流淌下来，凝成一滴，融入她清俊的眉眼。一见钟情，我和语文的邂逅，是一场宿命的相会。</p><p>人说初恋难忘，果真如此。语文亦师亦友，见识广，有百面之性格，千般之故事。她可以是不谙世事的翠翠，也可以是精明世故的熙凤：可以是赤壁怀古、寻想人生哲理之东坡，也可以是月下荷塘、体悟理想境界之配弦。无论如何，她总携着华丽、朴素、热烈、淡泊之美向我走近，她总带着一种诗意的人生向我走来。喜欢在午后的阳光里修文，铺开一张纸，让每一个坎坷都被照得灿亮，然后开始百般打磨，千般润饰，直至笔墨间蜿蜒出精金美玉般的光华。我从不可惜这样一个下午，也许它本有他用，但我觉得值得。语文值得被一个人认真对待，认真去爱。我们的爱，已渐入佳境。</p><p>至于后来与英语坠入爱河，却又是他话了。金发碧眼，身长九尺，英语虽形貌妍丽，望之而令人生畏。然英雄过不了美人关，终究还是深陷温柔乡。英语为我打开了世界之窗，浩淼的遥远的大西洋上，有一片大陆从海雾后隐现了它的真容。繁荣都市，寂静土地，宏伟繁复的西式建筑，艰涩深邃的文学著作……一群深眉邃眼、高鼻鹰目的外族人，在地球的另一端，同样日出而作，日落而息。细水长流，日久生情，越是深入地了解，越助人抵达一个顿悟的境界：每一个民族，都在经历着同样的喜怒哀乐、兴衰荣辱，都在共享同一片苍穹，同一颗太阳，同一片土地。每一个民族的语言和文化，都同一棵树上不同的花朵。我们同根，我们同生。</p><p>与数学的相爱可谓是回肠九转，异常艰辛。一张空白的试卷，两幅极简的几何，三根愁白的头发，满室弥漫的寂静。不是我不想爱他，而是我不敢爱他。数学长得未免太过生人勿进，白衬衫，黑西裤，纽扣一直系到领口，一副泛着蓝光的深度眼镜，目光让人不寒而栗。数学似乎一辈子都不会对我感兴趣。可是你无法否定，数学的魅力浑然天成，令人无法抗拒。冬夜寂静，一灯如豆，你披衣在桌前与数学对视，感觉一种独属于人类的理性和热情在脑海里冷却，在胸膛里燃烧。于是你开始翻山越岭，千里跋涉，一意孤行，只为寻找一个不为人知的答案。思维的火花在黑夜里闪现出雷电般摄人的光彩。你到达了，或者你倒下了，飞蛾扑火的热情还在胸膛里寂静地燃烧。这是人类至高的理性，他的名字叫数学。</p><p>后来又在倾城日光下邂逅化学，在车水马龙的街道偶遇政治，与胸怀大略、满面沧桑的历史有了交集……学科是有生命的，能在今生今世和他们相知、相爱、相守，是一种莫大的荣幸。</p><p>我不是不在乎外在的东西，只是更重要的是爱，不是结晶；是过程，不是结果；是学习，不是收获。真正热爱的人，将它们所有的爱和生命都注入自己的一片田地，他们将汗水滴入土壤，而不去想耕耘是否会有收货。而他们坐拥的，不只是一个秋天的金黄，还有整个精神世界的富甲一方。</p><p>爱你所学，学你所爱。</p><p>“我在生活里不需要更深地思索，从书卷里获取粮食，在野花盛开的文字中获取爱情，我的世界宁静有序，痛很清晰，爱恨简单存粹。”</p>]]></content>
      
      
      
        <tags>
            
            <tag> 回忆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【朝花夕拾】【转载】听雨轩文选 创世纪</title>
      <link href="/2019/07/18/History-Essays_Of_Classmates-Genesis/"/>
      <url>/2019/07/18/History-Essays_Of_Classmates-Genesis/</url>
      
        <content type="html"><![CDATA[<p>私以为这样的科幻是真正诗意的，文学的，而非仅是“文化的“。</p><a id="more"></a><p>（如有侵权，请联系博主。将于第一时间予以删除）</p><h1 id="创世纪"><a href="#创世纪" class="headerlink" title="创世纪"></a>创世纪</h1><p>作者：孔炳翔</p><p>熵值已经接近了最高点。</p><p>所有文明都停止了战争，在不断临近的热寂面前苟延残喘。</p><p>宇宙已经黯淡无光，唯有深处有几点火光，那是低等生物在用仅存的物质合成恒星。这像是一片涸辙，大鱼们早早地感觉到了干涸的恐惧，潜在水底。而小鱼们还浅浅地浮在水面附近，浑然不知这即将到来的，光明的黯淡。</p><p>此外还有不少的暗点，那是高等文明，它们已经能够完全的使用恒星的光和热或是正反物质湮灭所释放出的能量，包裹它们母星的是一类类似黑体的物质，完全吸收外来的和内在的光线并储存。</p><p>更深处，还有一个暗点和一个光点，在互为中心相互旋转。</p><p>暗问：“你怎么让能量外溢了？你能制造逆熵场了？”</p><p>光：“我不能，但我愿意。”</p><p>“愿闻其详。”</p><p>光：“这是一个故事，或一首史诗，绝非一条物理定则。”</p><p>光的诗：</p><p>“只要我一息尚存，我就称你为我的一切。</p><p>只要我一成不变，你就感觉你在我的四周。任何事情我都来请教你，任何时候我都把我的爱献上给你。</p><p>只要我一息尚存，我就永不把你藏匿起来。</p><p>只要把我和你的意旨锁在一起的脚镣还留一小段，你的意旨就在我的生命中实现——这脚镣就是你的爱。”</p><p>超弦的震动传导着这首诗。暗点们隐藏在黑暗中，揣度着这宇宙的最高解读者之一的隐晦的诗句。</p><p>良久，暗问：“如果答案为爱，那么问题为何？”</p><p>……</p><p>光点挨个地黯淡，熄灭。不少暗点也无声无息地冷却。</p><p>光的光芒同样愈发地不稳定。</p><p>……</p><p>沉寂了许久的超弦再一次地抖动起来，不过这次应该没有听众了。</p><p>光：“你感觉到了吗，这个空间只剩下这里存在塌陷了。他们都熄灭了。我们是热寂屠刀下最后的生还者。”</p><p>“嗯”</p><p>“你想到什么了吗。”</p><p>“有点思路。就是从一个平行宇宙中窃取能量，先躲过热寂。再试试能不能躲到另一个宇宙里去。”</p><p>“那躲过热寂是有办法了，只是大坍塌不一定有办法。”</p><p>“你的光强越来越不稳定了。这就是你那首史诗的意义，你真能逆转熵了？”</p><p>“那我们打个赌吧。”</p><p>“好。”</p><p>“如果你能够在大坍塌前制造出让物质在两个宇宙间流通的通道，这就是你的胜利。而我，如果我的方法能成功，我会重新出现在下一次大爆炸中，继续我的文明。其他文明也会有尝试我的方法，从大坍塌中跳出来，我将这个方法命名为洗礼或是圣餐。”</p><p>“那这样宇宙的能量就会不断减少，宇宙就不稳定了。”</p><p>“不会的，这就是我从很早之前就一直在外放能量的原因。”</p><p>……</p><p>最后的最后。</p><p>……</p><p>光在一片耀眼的光芒中塌陷了，像是大坍塌的序曲。在灼目的闪光中隐约可以看到一块十字形的晶体在挥发。从最重的钚碎裂到了最轻的氢，氢则直接碎裂成中子、质子和电子。电子在高速运动中轰击在质子上中和成中子。中子碎裂成夸克，夸克碎裂成基本粒子，这片空间的普朗克长度。引力场、电磁场融入时间。</p><p>超弦也因这场序曲而沸腾。</p><p>“要是干了以后就完了，那么还是快点干。”</p><p>“Cogito， ergo sum.”</p><p>最后一切都归于沉寂。</p><p>暗细细地感受着引力场，除了她所压迫地这片空间，其他的各处均平坦而光滑。</p><p>全宇宙统一了温度、密度和时间。</p><p>未来的世界是银子的。</p><p>热寂。</p><p>白银时代。</p><p>超弦也沉寂了下来。</p><p>暗试着拨动了一下，一道细细地波传向了宇宙深处。她想了想，拨出一道旋律。</p><p>“就这样，让我独自面对这孤独的死亡。让大坍塌——这场没有客人的最后的晚餐见鬼去吧！”</p><p>在大坍塌前，它都回不来了。她想。</p><p>的确，这道波以超越光速的速度没入黑暗中，像是一位开拓者进入荒野，亦或是一头鲸潜入深海。</p><p>……</p><p>这无边的黑暗像是一个漫长而无月的夜晚在期待着一个黎明。</p><p>它期待着一句话。</p><p>“要有光。”</p><p>……</p><p>大坍塌后的那一刹那，时间终结。</p><p>“又有新成员了，老规矩。你的创世纪。”</p><p>这像是一个沙龙，黑暗中藏着很多身影。</p><p>“那好吧。”</p><p>“要有光！”</p><p>这个奇点便开始发光发热。它极欲爆炸，却听从于这黑暗中的意志。</p><p>“这个世界被光明笼罩，它限制了我不能同时是我却又同时不是我，那我就得有自己的身体。”</p><p>虚空中出现了一块球形的全反射体。</p><p>“这个宇宙不能没有物质，他本将依托于基本粒子而存在。并且它活着。”</p><p>宇宙膨胀了一点，能量迅速形成基本粒子，高速地在局促的空间里移动着。两者的转化达到了平衡。</p><p>“它不能是十维的，它是三维的。那这样我也得是三维的。”</p><p>随着长度、数目、温度这三个维度的建立，它也从球形转化为了十字形晶体。</p><p>“所有粒子都要保有量子纠缠，这样在大坍塌来临时，它们能重新聚拢成一点而这将通过超弦相作用。”它像是叹息了一声。“那这样，速度和空间位置就是相矛盾的了。与此同时，基本粒子就成为超弦在长度维上的震颤。”</p><p>无数冰冷的超弦穿透了它的身体。</p><p>“既然基本粒子是超弦的震颤，那么第一，它不会停止运动，第二，震颤又两个方向。这导致了两种完全相反的物质的存在，而我需要做的只有预定一个方向。”</p><p>它随意地朝一个方向拨动了一下，不同于它之前所做的，这次，它只是在长度维上，而不是在温度维上拨动。</p><p>“它得保障文明的出现。”</p><p>“它得有几种基本力来规定粒子的运动。”</p><p>他幻化出一个正N面体，一个在三维的长度维下就是球体的物体。这个物体最终定格在代表四的那个面上。</p><p>……</p><p>“它还需要一个能量源，和时间轴。”</p><p>“那就是我。”</p><p>“因为它因为我而存在。”</p><p>“我没有活着，也不曾死去。”</p><p>“Cogito， ergo sum.”</p><p>“它诞生之日，便是我消亡之时，它消亡之时，便是我归来之日。”</p><p>他率先成为一道能量流，融入这个奇点。</p><p>“那我们也该加入其中了。”</p><p>黑暗中的身影一一融入了这个奇点。</p><p>它像一颗心脏开始跳动。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 回忆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【围炉夜话】对于国内计算机普及教育考核体系范式的简要批判</title>
      <link href="/2019/07/18/Toughts-Exams_Of_Computer_Courses/"/>
      <url>/2019/07/18/Toughts-Exams_Of_Computer_Courses/</url>
      
        <content type="html"><![CDATA[<p>日经，因为不开心。</p><a id="more"></a><p>（文章可能比较情绪化，一些观点会有失偏颇？欢迎批评）</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>咱不谈国内教材的风格问题，不谈谭浩强等经典教育家，不谈十年不更新的课件。咱就来看看现在高校中的计算机考核体系（考试制度、评分制度等等）中存在着哪些问题。</p><p>首先需要说明的是，此处涉及的计算机类课程是“计算机普及教育”性质的，是面向低年级学生的计算机基础课程，包括中学时的信息技术课程、大一的程序设计基础课程等，而非专业性较强的课程，后者因笔者尚未接触过故不作评价。</p><p>所谓考核体系中存在的问题，指的是计算机学科课程的考核无法客观全面地反映学生的能力，造成低能者高分，高能者低分的现象。当然，我并没有做统计，只能拿自己说事。个人看到这样的成绩比较不爽，写篇软文骂骂街，期盼一下更加让人（己）信服的计算机课程考核体系，仅此而已。</p><p>标题中所谓范式，指的是当前国内学校普遍采取的这种考核模式。不光浙大如此，大多数学校在计算机学科的考核模式上虽有差异，但总体而言还是如此的。个人比较不喜这样的考核模式，但也不了解其他的模式，对于墙外的教学也不甚了解，无法提出有指导性的教学改进意见。</p><p>对这种考核体系的厌恶是自中学时代开始的。从中学开始，我就不喜欢技术这门学科的考试，无论是信息技术，还是通用技术（这里不谈通用）。高一时候还能凭借着信息差稳拿信息技术的第一，但等到大家都明白这门课的套路后就发现它也就这样了。大家都满分，很没意思。（高中同学之前在寝室里吹水哪些课拿过第一的时候把信息拿出来吹，搞邪了你）倒是我会因为乱七八糟的问题满不了。难道分数不比别人高说明我不比别人强？怎么可能。难道每个分高于我的人都比我热爱计算机，都比我有程序设计的思想，都比我更理解算法？怎么可能。但分数就是摆在那里。很不爽。很不爽。高中的信息技术无法在思想深度上作拓展，只得在边边角角上挖坑，坑一坑考试技巧低的人。这到底有什么意思？设置这样一门考试是要考察什么？想不明白，于是我不选技术，选历史。</p><p>到了大学，本以为进了计院就不用再接触这些糟心的考试了，但还是事与愿违。</p><p>从浙江大学《C语言程序设计》《程序设计专题》课程的情况来看，这类计算机普及课程的考核一般会由project，平时参与情况，期中期末考三部分构成。其中后者为大头，占了50%~60%。我们便来谈谈这考试。不过在说考试之前，我们有必要关注，考试要考察什么。</p><h1 id="能力"><a href="#能力" class="headerlink" title="能力"></a>能力</h1><p>普及性的计算机学科，需要学生掌握哪些能力呢？中学课本中往往会有office、ps、flash（该换h5啦）的基础操作指南。这些好拿出来考试？有什么思维含量？通过简单的搜索就能掌握的记忆性的知识，完全没必要考察。让学生用文字描述具体的操作过程也挺蠢，有一种独到的滑稽感。说到底，我知道这些内容对中学生而言并非不重要，但感觉用传统的中学教学模式对待计算机课程就有种说不出的拧巴感。</p><p>还有呢？程序设计的能力，这实质上是对计算思维的培养，对逻辑思维以外一种独特而有效的解决问题的思维模式的培养，这是相当有价值的。教授一些简单的算法，一些常见的数据结构，足以打开低年级学生（尤其是中学生）的心智，让他们领略到计算机科学的魅力，而不是薪水的魅力。</p><p>把宏观的程序设计能力再细分，在具体的程序设计上，我们还需要具备对程序流程的理解能力，对意外事件的处理能力，对程序正确性与复杂度的分析能力，等等等等。虽然归纳地并不细，不过考试大抵也便是考察这些个能力。ok，那我们开始讲试卷，看看它能否较好地检验学生的综合能力。</p><h1 id="试卷"><a href="#试卷" class="headerlink" title="试卷"></a>试卷</h1><p>考试试卷会由多个部分组成：判断题（理论性较强），填空题（用大脑编译运行程序），程序填空题。这些部分分别能考察什么东西呢？首先是判断题，个人非常讨厌。有些理论书上没提看似值得深挖，但个人觉得真的没啥意思，举个例子：</p><blockquote><p>定义FILE  *fp; 则文件指针fp 指向的是（）。(1分)</p><p>A. 文件在磁盘上的读写位置</p><p>B. 文件在缓冲区上的读写位置</p><p>C. 整个磁盘文件</p><p>D. 文件类型结构体</p></blockquote><p>这种题目要考察什么？如果教师在课堂上对这一知识点有所强调，并能进行知识点的延伸，那这样的题目可作为检验听课情况的一枚试金石。可若是教师对此完全没有提，学生面对这样的题目要怎么办？虽然自学是重要的技能，但我们也应理清什么样的知识是好的，是值得我们投入时间的。计算机课程不是思想道德修养，它里头虽然也有理论，但切不可空谈理论而忽视实践。而在这样一类的题目中，实践的影子，何在呢？</p><p>虽然题库中存在许多这样无趣的题目，但无可否认的是，许多题目还是有一定价值的，能够帮助同学们检验知识漏洞。这是值得肯定的。</p><p>填空题最大的特点，就是没意思，和实际的工程比较脱节。它是在考察学生对于语法规则，简单的算法的理解能力，但笔者不认为这是一种合格的考核方式。且不谈优先级排序，++++++这种反人类题。填空题与工程的一大脱节便体现在考试的限制上，学生被要求不得打开编译器对程序进行调试。诚然，如果不这么做则填空题的区分度会大幅减少。但这样的规定也在很大程度上破坏了计算机课程可贵的实践性，这和程序填空题的弊端是一致的。本来一个编译运行，几个调试就能发现的低级错误，硬是成了所谓体现区分点的地方。这能区分个什么对语言特性的认识对编程范式的思索，只是停留在大众教育阶段的对于所谓“勤奋”“仔细”的筛选。想到大家在走出高考考场后仍要惦着曾经的那么一些无趣的行为模型，我比较无语。</p><p>至少我没有见到过有趣的填空题和程序填空题，虽然都会做，但做起来慌得不行，唯恐哪个细节又没注意到，感觉写下来的都是错的。事实也正是如此，总会因为trivial的错误错掉一些题（虽然中学老师教我们强调细节，不过在大学的context里，“仔细”的重要程度还是第一位吗？）。程序填空题的初衷是好的，希望考察学生对代码的阅读能力与对程序流程的认识。但不得不说这种形式实在不讨喜。码风的不一本应通过建立语言使用的共识（编码规范）来达到一定程度的消除，然而学校并未这么做。另外，对陌生代码细节的把控不当也是所谓“区分点”的一环，而这本应通过测试来消除的。</p><p>简言之，这三类题除了选择题尚可，对其他两类题鄙人均比较反感。虽然如此，我也不清楚什么样的题型是自己是大家所喜闻乐见的。感觉计算机学科就不适合笔试。加入一定量的编程题（不可以有码量巨大的模拟题）或许比较好吧，但浙大《程序设计专题》课程今年把编程题取消了，原因不明。</p><p>这里顺便吐槽一下PTA系统。死板的填空题检测机制不支持等价写法，程序填空题的评测系统简单粗暴连拼写都不帮你检查一下（变量名错了扣了一堆分，无语）。最让我不爽的是，编程题的题库里放了很多三流学校（浙大不知算不算）三流教师编写的牛逼题，什么答案输出4+-3i才能过，什么手动实现atof函数（还nm是残的，不支持指数写法），什么“题目主要是输入花费大量的时间，如查找出现超时，尝试多次提交。”我还能说什么呢？牛逼，真nmd牛逼。我不知道这样的题目能锻炼我什么能力，只知道我浪费了好多时间好多心情在这种没营养的东西上面。</p><h1 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h1><p>笔者眼中理想的计算机普及教育课程的评价体系相较于此前模式的改变，大抵如下：</p><p>提升project在评价中的占比，达到50%~60%。同时对project的拓展功能进行额外评分（拓展功能与正态分布不可得兼，不当让学生为了不被正太而将简单的project过分复杂化，加上许多“冗余”功能，使得恶性竞争的风气盛行。入门级的计算机课程是简单的，大家都能学得好，搞什么正态分布？猪头领导，不具体问题具体分析，不求是，当什么浙大校长），由教师、助教依据细则、个人判断进行评分。增加project的数目，包括小组project与个人project，两个短学期的课程中，前者一项（工作量较大），后者三项（工作量较小）为宜。互评作为签到性质的任务，在project的评分中只不占比重，只是平时参与情况的一部分，作为同学们相互学习的一环。同时恶意评分者当受到惩罚。</p><p>不取消期中期末考试因其还有一定价值，但应降低其比重至20%~30%。保证题库的质量，撤销同学们普遍认为没有价值的题目。教师当对所谓“考试技巧”进行强调，强调考试与工程的差异与考试本身的价值，本身的特点。考试要增加对伪代码的支持，简单粗暴的程序填空题当少，更能反映考生理解力和表达力（可用伪代码表达自己的想法）的简述题当有。添加一定量的编程题。</p><p>中学阶段的信息技术课程当向这样的模式看齐，尤其是浙江省的信息技术学科。</p><p>以上的方案不尽成熟，还是需要迭代优化的。（所以就鸽在这吧）</p><hr><p>开始于2019-07-03</p><p>完稿于2019-07-18</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【围炉夜话】互膜与卖弱——黑暗森林中的生存法则</title>
      <link href="/2019/07/18/Toughts-Wo_Laji_Nin_Niubi/"/>
      <url>/2019/07/18/Toughts-Wo_Laji_Nin_Niubi/</url>
      
        <content type="html"><![CDATA[<p>“我最菜了，您最强啦。”金牌玩家如是说。</p><a id="more"></a><p>没有问卷，没有调查。全程瞎bb，欢迎指责本菜鸡哪里说的不对。</p><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>说到卖弱，大家很容易想到NOI，ACM（IMO怎么没人卖？），想到某几个或某几十个大佬间互夸互卖，“我要退学啦”“我是真的菜”，或者，“还是您更强”“您多厉害啊”。定睛一看，我们能看到一张强连通图，没有自环的那种（夸夸图），还有一张非常神奇的仅由自环构成的图（卖卖图）。</p><p>其中可能有历史原因：一开始某些毒瘤学长喜欢这样，于是后辈也都染上了这种风气。不过这样只能保证风气的开端而无法保证其生命力，真正要维持互夸互卖的风气，还是由互夸互卖这一行为本身的特点决定的。这一Meme的生命力为何得以那么顽强呢？首先，我们需要确定我们需要考虑的问题是否属实，在什么条件下属实。</p><p>互夸互卖的风气着实是存在的，但它存在在哪里呢？在别的学科，比如人文社科的学科上，大家也这样吗？在相对一般的大学中，大家也这样吗？这些先不管，虽然它们和我们要考虑的变量间也存在着一定的相关关系而可作为证据佐证我们的观点（因为懒得调查所以懒得管）。我们来yy一下，在工信学子中，在计院学子中，互夸互卖为何能成为一种历久弥新的风气。</p><h1 id="计院？"><a href="#计院？" class="headerlink" title="计院？"></a>计院？</h1><p>是否计算机专业的学生更能膜人呢？从专业，蔓延到其他领域，似乎是这样。</p><p>计算机课程较适合自学，其起点较低而终点难以估量。于是，同一年龄段的学生间往往差异较大。另外，计算机学科的实践性也使得其与数学物理这样的学科有明显的差异，在计算机学科上的领先能直接表现为可见的成果：动不动就能搞看上去很厉害的项目。这能给其他同学造成较大的冲击。</p><p>这套理论听上去很正确？但它能够解释OI选手间的互膜吗？另外，所谓“看上去很厉害的项目”实际上并不一定有难度。世界上有很多封装好的轮子和实现好的库，许多项目只是调库而已，很容易实现，但效果往往不错。</p><p>个人认为，互膜始于计算机课题的难以描述，还有难以把握，而非其难解性。对于同一个问题，或许大家都有些想法。但是要把它具体地实现，则要考虑许许多多的细节，其中许多并不好描述。于是在问题比较复杂的情况下，对这样的问题的解答有一定“玄学”的特质。一段程序，它为何是正确的呢？它这样不可名状，逻辑这般诡异，却又能得出正确的答案？在能够理解者与无法理解者之间，仿佛存在着语言上的隔阂，虽然处理的都是一样的作业，但二者对程序的理解是完全不同的。这层隔阂，或许是造成互膜风气的一个重要原因。开始这样的“膜”是敬畏性的，但逐渐地它演变为游戏性质的meme。</p><h1 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h1><p>单纯把这一行为视为一种游戏的话，它似乎也有可探讨的余地。</p><p>互夸与互卖似乎是一体两面的，表面上，前者是对他人的赞同，后者是对自身的否定。其目的也是相同的，这在之后讨论。但在操作的难易度上，二者并不相同，夸人可以因人而异，抓住对方的vulnerability猛夸猛奶；卖弱则要更深入的挖掘自己，挖到什么宝都能拿出来卖，以增强说服力。夸和卖也要有新意，有气势，这样效果才好。</p><p>夸人-被夸-夸人-被夸……简单的闭环系统，或者简单的博弈。当然，决策也可以是多样的，比如夸和卖可以结合在一起，这样博弈树的当前节点便能得到转换，其走向也能得以改变：“哎哟，我哪有您强啊，您看看您，①②③；您看我多菜啊，①②③”……</p><p>虽然作为调剂而言，偶尔互膜卖弱还是好玩的。但频率多了会感觉这样的对话真的很像小孩子吵架，只不过内容从“我是你爸爸”“我是你爷爷”变成了“您多强啊”“不不不还是您更强”。追求一个虚无缥缈的无法达到的共识，无法达成的认同，这从方向上来说就错了吧。网络上的辩论家们也沉浸在类似的行为中，不过他们争执的内容也不太一样。重复性强迫行为。自虐。Fort-Da。</p><p>是否我们永远长不大？</p><h1 id="认知"><a href="#认知" class="headerlink" title="认知"></a>认知</h1><p>我们为何而互膜而卖弱？因为我们关心自己在他人眼中的形象。</p><p>感到弱小倒是很稀松平常的状态。在庞大的知识体系面前，在生活的无字之书面前。学得越多，越能感到前人已经将弯路都走遍了，可探讨的问题也探讨个遍了，但自己还有很多细节没明白，对于宏观的知识架构也不甚清晰。面对这样的知识大厦，感到弱小，或者更确切些，敬畏，再自然不过的了。我不相信存在热爱数学而不敬畏她的人。</p><p>但是由热爱、信念、意志出发的作研究，与一般的考试，又是两种状态。既然是敬畏，何必要宣扬呢？对于考试，我们在题目之外也相当看中排名，会自觉不自觉地关注自己的别人的位次。</p><p>惧怕形象在他人心目中跌落不起。无法在成绩上做补救，只得在其他方面上做努力。不去想关于考试的细节，假装看淡一切。拒绝交流，做些无关紧要的事情，划水，摸鱼。</p><p>当然，情况也不尽然，以上是我的情形。不过其他情形也就不讨论了吧，没什么好讨论的，大抵在行为上表现出“卖弱”的同学可以分为四五类，每类有不同的特征。但总归，我们当为自己的言行负责。即便是真的不满意，总是表现出来也不免会让他人不舒服，这是客观结果。在游戏的同时应兼顾他人的感受，尤其是因考试而心情不佳的同学，这并不容易，但我认为是必要的，至少自己要做到（似乎，并非人人这么想，这不是普适的价值观）。</p><h1 id="态度"><a href="#态度" class="headerlink" title="态度"></a>态度</h1><p>所以面对这样的风气，我们该怎么做呢？随意。</p><p>以下是笔者的态度：</p><blockquote><p>世人皆浊，何不淈其泥而扬其波？</p><p>众人皆醉，何不餔其糟而歠其醨？</p></blockquote><p>毕竟，主要是你的综合能力，而不是你的言论，决定了你到底是什么嘛。</p><hr><p>初稿写于2019-07-02</p><p>完稿写于2019-07-18</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【艺术其九】从设计的角度看《以撒的结合》</title>
      <link href="/2019/07/18/Game-The_Binding_Of_Isaac/"/>
      <url>/2019/07/18/Game-The_Binding_Of_Isaac/</url>
      
        <content type="html"><![CDATA[<p>并非严谨的考究，只是随便写写而已。</p><a id="more"></a><blockquote><p>以撒的结合是一款集合了推箱子、血统检验、少女换装、宠物养成等等元素的跨世代大作。——灰机wiki</p></blockquote><h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>游戏有多好玩，要素有多丰富就不讲了。初次对以撒感兴趣是因为它的名字，然后是游戏方式吧。在盗版游戏网站上下了羔羊，没玩多久，感觉不好玩，不太适应这种游戏模式，也不知道道具是干啥用的。于是就弃了。那时候大概是初一初二吧。</p><p>高中的时候班里流行元气骑士，我也跟风玩了一会，发现这种游戏模式和以撒很像，这时候能接受了。之后重新开始羔羊，打了几把，感觉不错，于是开始入正。</p><p>然后就是常规的入坑环节了。</p><h1 id="剧情"><a href="#剧情" class="headerlink" title="剧情"></a>剧情</h1><p>游戏究竟讲了一个怎样的故事？其实故事的逻辑并不重要。其中的一些细节也没必要深挖，如为什么天启只掉肉块/绷带，“afterbirth”是什么意思，为何又要设置“mega satan”。这些都是为游戏性，而非剧情服务的。拿hush来说，没有这个boss游戏在剧情上也是完整的，那它加进去的作用是什么呢？丰富boss的种类，给予玩家挑战。再如ultra greed，它不过是七宗罪之一的强化版，为何也是最终boss之一，有这样高的地位？因为游戏要加入greed mode，所以要加入跟这个模式相匹配的boss。从游戏性的角度考虑，这些困惑大都能迎刃而解。</p><p>而剧情也是开放的，没有真正的所谓结局。原版有十三个，重生又多了三个，胎衣又加了几个。那么故事究竟是如何的？无所谓，关键在于它能否打动你。</p><p>游戏中能打动我的点（重生版本），大致如下（<strong>严重剧透</strong>）：</p><font color="FFFFFF">①???结局，一些照片：全家福、带上妈妈的假发、独自一人不开心、愤怒的妈妈……祥和的音乐中，记忆远去，THE END。<br></font><font color="FFFFFF">②拿到cancer时，以撒会哭得更伤心。<br></font><font color="FFFFFF">③用眼泪和怪物对抗。<br></font><font color="FFFFFF">④“Are you sure you want me to die？”<br></font><font color="FFFFFF">⑤原版的海报中，光芒之下是绻缩的以撒，他的身边，是成千上万的腐烂血腥的觊觎的怪物。<br></font><font color="FFFFFF">⑥“子宫层”这个名字，以及其中噬咬的声音。<br></font><font color="FFFFFF">⑦妈心战斗背景音乐名为“Ventricide”，心之死；以撒战斗背景音乐名为“Infanticide”，弑婴。<br></font><font color="FFFFFF">⑧muligen的哭声，leech的叫声……Gurdling的表情与叫声<br></font><font color="FFFFFF">⑨“瘘管”“畸胎瘤”“枯萎卵”，它们的名称；“bloat”“the carrion queen”“枯萎卵”它们的形态。<br></font><h1 id="游戏性"><a href="#游戏性" class="headerlink" title="游戏性"></a>游戏性</h1><p>《以撒》中的元素有哪些呢？道具是为面板属性还有特殊能力服务的，故先来看属性吧。</p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>首先这个游戏要保障生存，所以要有血量和移速；为了生存还要杀怪，这需要射速和伤害。作为roguelike游戏需要引入更多要素，这先放在“其他”这一项中。简单划分一下，我们能得出基础属性大致能归到这几类中。</p><h3 id="玩家属性"><a href="#玩家属性" class="headerlink" title="玩家属性"></a>玩家属性</h3><p>（粗体字为可拓展可创新点）</p><p>①生存：血量、状态、<strong>受伤机制</strong></p><p>②攻击：伤害、距离、<strong>特效</strong></p><p>③速度：移速、射速、弹速</p><p>④其他：幸运等</p><h3 id="人物特性"><a href="#人物特性" class="headerlink" title="人物特性"></a>人物特性</h3><p>设计更多的可选人物更能激发玩家游戏的兴致，为使人物有特色，一方面要将不同人物的面板区别开来，但更要做的是给人物添加特点。《以撒》在这方面是通过人物初始道具及特性凸显人物的，比如Eve在一血时便能开启Whore of Babyron，???不可获取红心等。</p><p>这里还涉及了人物形象的塑造。总而言之，《以撒》中除Lazarus和Eden外的人物形象都较为独特而讨喜，个人尤其喜欢Eve、Azazel、Magdalene的形象，另外Magdalene和妈妈形象的相似及其恢复系特点则从侧面对剧情有所表现。</p><h3 id="眼泪属性"><a href="#眼泪属性" class="headerlink" title="眼泪属性"></a>眼泪属性</h3><p>除了基础的伤害、距离，特效就需要用到思维发散了。另外，伤害也能通过其他方式得到加成，如生成蓝苍蝇，烧伤或中毒效果。简单盘点一下，《以撒》中有这些个特效。</p><p>1.分裂（分击中分裂与直接分裂）：寄生虫或洛基的角、四眼蜘蛛</p><p>2.穿透（分穿透敌人与穿透地形两种）</p><p>3.击退：狗头</p><p>4.悬浮：反重力</p><p>5.状态变更(中毒/烧伤/迟缓/石化/恐惧）</p><p>6.追踪：弯勺者</p><p>7.蓄力：巧克力奶</p><p>8.爆炸：吐根</p><p>9.制造友军：猫套</p><p>10.变轨：除了各种worm外，还有镜像和妈刀，因为回程也算得上一种变轨</p><p>11.防御：隐形眼镜</p><p>12.吸引：奇异吸子</p><p>13.攻击方式变更：鲁多维科科技</p><p>……</p><p>这些并不好做归纳。但确实非常多样，非常给游戏性加分。</p><h2 id="地图与怪物"><a href="#地图与怪物" class="headerlink" title="地图与怪物"></a>地图与怪物</h2><h3 id="地形与地图结构"><a href="#地形与地图结构" class="headerlink" title="地形与地图结构"></a>地形与地图结构</h3><p>伤害类：刺、血</p><p>障碍：洞、石头</p><p>地图结构的总趋势是越下层地图越大目标房间越难找。而且越往下走，单个房间的难度一般也会更高。结合具体的地图说明或许更有说服力些。</p><h3 id="怪物"><a href="#怪物" class="headerlink" title="怪物"></a>怪物</h3><p>怪物的基础属性和玩家是类似的。所不同的是，怪物的攻击方式一般更加多样，除了“弹幕”，还可以以各种方式冲撞，放硫磺火（血束），招小怪等。</p><p>怪物的免疫方式也各有特色。The carrion queen就是个比较好的例子，虽然很蛋疼。</p><h2 id="道具"><a href="#道具" class="headerlink" title="道具"></a>道具</h2><h3 id="道具渊源"><a href="#道具渊源" class="headerlink" title="道具渊源"></a>道具渊源</h3><p>1.源自宗教：硫磺火、三位一体盾……分天使与恶魔两个方向</p><p>2.源自以撒的生活，包括很多腐烂的事物，如早餐中餐晚餐，Guppy相关的道具等</p><p>3.源自其他文化，包括其他游戏（魔法菇）、流行文化（十二星座）等</p><p>其中第三类看上去有些跟剧情不搭嘎，但也是合理的，不光是因为《以撒》并非剧情向的游戏。星座文化可能有些俗套，但在以撒的视角中，这也没什么问题——以撒作为一个既有普遍性又特殊的美国小男孩，了解这些文化，玩各式各样的游戏是很正常的。</p><h3 id="道具形象"><a href="#道具形象" class="headerlink" title="道具形象"></a>道具形象</h3><p>如果是我来设计这款游戏的话，我会先把道具的功能设计出来，再考虑形象。不过如果捡了道具而角色形象完全没改变，游戏性可能会有所下降。在这个意义上，《以撒》“换装”的特点将其roguelike的特性发挥得更深了一层，虽然这并非游戏的主要功能，但着实是一个很漂亮的bonus。（但是，后面的服装会覆盖前面的，我觉得这样不够好）</p><h2 id="探索性"><a href="#探索性" class="headerlink" title="探索性"></a>探索性</h2><p>《以撒》在游戏要素的展现尚做得还是可以的。一开始玩家只能start game。死亡。重开。死亡。重开。打完妈腿，游戏结束了？子宫解锁。妈心。每次都有不同的结局。黑暗层，教堂。再来是宝箱层，阴间。再之后呢？好像并没有个名义上的终点。虽然打完哪个boss都可能是the end。但相信玩家并不总是有the end的感觉。</p><p>但之后游戏的探索性便比较弱了。毕竟游戏的剧情并不清晰，可探索的元素在游戏后期相对较少了。之后，《以撒》更像是个日常打卡游戏。个人在玩了70h之后感觉游戏要素已经较少了，我也不是成就党，所以游戏基本就扔栈底了。这样看来，《以撒的》生命周期至少有40h，对一些核心玩家而言会较长。</p><h1 id="画面"><a href="#画面" class="headerlink" title="画面"></a>画面</h1><p>血腥、黏着、腐化的环境，却并不阴暗，而是非常明亮，真讽刺啊。</p><p>总体的画风还是比较萌的，但是有的道具，细细一想，好瘆人的。铁丝衣架还好了，眼球突出就比较引人不适了。用可爱的画风吸引玩家并使之适应，同时制造出反差，这也算是游戏的特色吧。</p><hr><p>初稿写于2019年5月4日</p><p>完稿写于2019年7月18日</p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计 </tag>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学之美】离散数学及其应用：第八章 计数进阶</title>
      <link href="/2019/06/22/Discrete_Mathematics-CH08/"/>
      <url>/2019/06/22/Discrete_Mathematics-CH08/</url>
      
        <content type="html"><![CDATA[<p>虽然这章名为“计数进阶”，但其内容和“计数”关系似乎不是很大。除了生成函数是标准的“计数”内容，“递推”“分治”看起来和“计数”都没啥关系。另外容斥定理讲得也比较浅。</p><a id="more"></a><h1 id="递推关系"><a href="#递推关系" class="headerlink" title="递推关系"></a>递推关系</h1><h2 id="递推关系模型-需补充"><a href="#递推关系模型-需补充" class="headerlink" title="递推关系模型[需补充]"></a>递推关系模型[需补充]</h2><p>从兔子数列到牛数列</p><p>汉诺塔</p><p>满足特定条件的01串（如，不包括连续两个0的01串）</p><p>（卡塔兰数的一种情形）n个数相乘的顺序总数</p><h2 id="递推算法-需补充"><a href="#递推算法-需补充" class="headerlink" title="递推算法[需补充]"></a>递推算法[需补充]</h2><p>讲座问题</p><p>动态规划</p><h1 id="线性递推"><a href="#线性递推" class="headerlink" title="线性递推"></a>线性递推</h1><h2 id="齐次"><a href="#齐次" class="headerlink" title="齐次"></a>齐次</h2><p>所谓线性齐次常系数递推关系（linear homogeneous recurrence relations with constant coefficients），指的是形如$a_n = c_1 a_{n-1} + c_2 a_{n-2} + … c_k a_{n-k}$的递推关系。</p><p>提到“线性齐次常系数递推关系”我们就会提特征方程与特征根，它们是用以解递推式的利器。</p><p>特征根是个非常有效但也让人摸不着头脑的东西。它本身有何意义？下面笔者粗浅地谈谈自己对其的认识。</p><h3 id="二阶递推式-需完善"><a href="#二阶递推式-需完善" class="headerlink" title="二阶递推式[需完善]"></a>二阶递推式[需完善]</h3><p>如果递推式形如$a_n = Aa_{n-1} + Ba_{n-2}$，$a_n$该如何解呢？我们考虑能否用特殊的$a_n$凑出答案，比如，$a_n = x^n$，这样？把它代入原递推式，我们得到一个二次方程$x^2 - Ax - B = 0$，如果它有不同的解$x_1, x_2$，诶，好，$a_n = x_1^n$或者$a_n = x_2^n$看上去都可以。</p><p>但是啊，$a_n = Aa_{n-1} + Ba_{n-2}$是由$a_1, a_2$完全确定的。如果$a_1 \not = x_1$，那不就出问题了吗？其实，前面说$a_n = x_1^n$“可以”，那么$a_n = Cx_1^n + Dx_2^n$也是“可以”的。这样便能够通过给定的$a_1, a_2$解一解C、D，$a_n$的通解也就出来了。</p><p>因为$x^2 - Ax - B = 0$和$a_n$有着密切的联系，我们称前者为“特征方程”。</p><p>以上是特征方程有两个相异根的情形，如果相同则如何呢？不一定存在$C$使得$a_1 = Cx_1$且$a_2 = Cx_1^2$啊！在这个条件下，我们令$a_n = Cx_1^n + Dnx_1^n$。可以证明，这样的$a_n$满足条件//为什么想到要这样做？</p><h3 id="n阶递推式"><a href="#n阶递推式" class="headerlink" title="n阶递推式"></a>n阶递推式</h3><p>与上面类似的，我们能想到无重根的n阶递推式的通解形如$a_n = \sum\limits_{i = 1}^k \alpha_i r_i^n$，其中$r_i$为特征方程的解。</p><p>至于有重根的n阶递推式，它则形如$a_n = \sum\limits_{i = 1}^k(\sum\limits_{j = 0}^{m_i} \alpha_{(i, j)} n^j r_i^n)$，其中$r_i$为特征方程的解，$m_i$为重数。</p><p>证明呢？不管了(¬､¬)</p><p>有重根的n阶递推式</p><h2 id="非齐次-需完善"><a href="#非齐次-需完善" class="headerlink" title="非齐次[需完善]"></a>非齐次[需完善]</h2><p>所谓线性非齐次常系数递推关系（linear nonhomogeneous recurrence relations with constant coefficients），指的是形如$a_n = c_1 a_{n-1} + c_2 a_{n-2} + … c_k a_{n-k} + F(n)$的递推关系。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>找特解，而后化归到齐次。（这些方程都这种套路，得归纳一下）</p><p>特解怎么找呢？比如$a_n = 3a_{n-1} + 2n$，我们可以从结构上猜出$a_n = Cn$。而对于$a_n = 5a_{n-1} - 6a_{n-2} + 7^n$，我们也可以猜一个$a_n = C \cdot 7^n$。但是如果是$a_n = 5a_{n-1} - 6a_{n-2} + 3^n$，$a_n = C \cdot 3^n$就不管用了，要$a_n = C \cdot n^2 \cdot 3^n$才行（为什么又是这个形式？我不知道）。</p><p>一般的，有下面的定理。</p><h3 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h3><p>若$a_n = c_1 a_{n-1} + c_2 a_{n-2} + … c_k a_{n-k} + F(n)$，$F(n)$形如$(b_t n^t + b_{t-1} n^{t-1} + … + b_1 n + b_0) s^n$，其中b、s均为常数。递推关系的特征方程$x^n - c_1 x^{n-1} - c_2 x^{n-2} - … c_k x^{n-k} = 0$的解中s的重数为m，则特解的形式形如$a_n = n^m (p_t n^t + p_{t-1} n^{t-1} + … + p_1 n + p_0) s^n$。</p><p><del>我不会，就不证了</del>例子：$a_n = 6a_{n-1} - 9a_{n-2} + F(n)$，当$F(n)$分别取$F(n) = 3^n, F(n) = n 3^n, F(n) = n^2 2^n, F(n) = (n^2 + 1) 3^n$，求$a_n$的通解。</p><p>应用：如求$a_n = \sum n^k$。</p><h1 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h1><p>研究分治算法时，一个值得关注的对象是时间复杂度。下面举几个大家耳熟能详的例子。</p><p>例子：矩阵乘法、二进制乘法（汇编乘法？）、二分查找、归并排序</p><p>上面的例子看似相似，但其算法复杂度可以很不一样！最后的公式会依据递推关系中的常数专门进行分类讨论，而且结论虽然能推，但是并不好记。//如何认识这一结论？</p><p>关于复杂度的推导，我们可以先简化问题，因为只要得到$f(n) = O(g(n))$就好了，可以对n进行“适当”的放大。这里，我们考虑$n = b^k$。</p><h2 id="f-n-的复杂度估计-需完善"><a href="#f-n-的复杂度估计-需完善" class="headerlink" title="f(n)的复杂度估计[需完善]"></a>f(n)的复杂度估计[需完善]</h2><h3 id="定理1"><a href="#定理1" class="headerlink" title="定理1"></a>定理1</h3><p>对于形如$f(n) = af(n/b) + c$的递推式，有</p><p>………………..$a = 1 \Rightarrow f(n) = O(log n)$</p><p>………………..$a &gt; 1 \Rightarrow f(n) = O(n^{log_b a})$</p><p>………………..$a &lt; 1 \Rightarrow f(n) = O(1)$</p><p>第一项很好理解，第二项是怎么得到的呢？其实直接得到的是$f(n) = O(a^k)$，而通过换底公式能得到$a^k = n^{log_b a}$，因为我们喜欢把n放到真数的位置。下面也是要用到这个转换的。</p><h3 id="定理2"><a href="#定理2" class="headerlink" title="定理2"></a>定理2</h3><p>对于形如$f(n) = af(n/b) + cn^d$的递推式，有</p><p>………………..$a = b^d \Rightarrow f(n) = O(n^d log n)$</p><p>………………..$a &lt; b^d \Rightarrow f(n) = O(n^d)$</p><p>………………..$a &gt; b^d \Rightarrow f(n) = O(n^{log_b a})$</p><h2 id="典例：最近点对问题-需完善"><a href="#典例：最近点对问题-需完善" class="headerlink" title="典例：最近点对问题[需完善]"></a>典例：最近点对问题[需完善]</h2><p>计算几何的一个<del>毒瘤</del>经典例题，初看非常的抽象，下面我试着以直观的方式说明一下如何用分治法解决这个问题。</p><p>首先分治呢，要先“分”，而后“治”。“分”的话二分比较常见，但二分要在有序集里才好进行。考虑以x坐标对这些点进行排序，然后取中间的点作为分界就好了。</p><p>下面的思路有些跳跃，我们从最后的算法出发来反推，这样可能更容易理解些。</p><p>分治法大框架的伪代码如下，一些细节先不必理解：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">closest</span><span class="params">(Point p[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(high - low == <span class="number">1</span> <span class="keyword">or</span> <span class="number">2</span>)...</span><br><span class="line">    <span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">double</span> d1 = closest(p, low, mid);</span><br><span class="line">    <span class="keyword">double</span> d2 = closest(p, mid + <span class="number">1</span>, high);</span><br><span class="line">    <span class="keyword">double</span> d = min(d1, d2);</span><br><span class="line">    d = merge(...);</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面框架的细节主要是这个：d = min(d1, d2)。为什么要先算d呢？</p><p>这实质上是用于提高效率的。你想，“分”做好了，就是左右两边的最近点对距离都已经分别算出来了，“治”要怎么做呢？枚举左边的点和右边的点的距离么？这样还是$O(n^2)$，算法的复杂度还是没有降低呀！于是我们得限制枚举的点的数量。聪明的Preparata和Shamos发现，如果先算出d1、d2和d，那么用要枚举点的话，只要在下图中两条红线间的区域间（x坐标距mid为d的区域内）枚举即可。</p><p><img src="/2019/06/22/Discrete_Mathematics-CH08/closest_distance1.png" alt></p><p>就是说，这里用到了剪枝：把一些分居左右而距离必定超过d的点对剪掉。这个剪枝还是比较宽的，但它容易想到呀，如果要更深入地剪就要深入探究点的结构了，太复杂啦！我们不考虑。</p><p><img src="/2019/06/22/Discrete_Mathematics-CH08/closest_distance2.png" alt></p><p>可是，看这张图，即便上面有剪枝，枚举量还是太大了呀，如何缩减呢？我们遇到的问题是这些剩下的点还是无序的，只得暴力枚举，而没有有效的降低枚举量的技巧。于是，聪明的Preparata和Shamos又把剩下的点有序化了，并利用“两点间距离不能大于d”继续剪枝。请看伪代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">merge</span><span class="params">(Point p[], <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high, <span class="keyword">double</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;<span class="comment">// the size of the array "temp"</span></span><br><span class="line">    Point temp[];<span class="comment">// the points between the red lines</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//branch-cutting 1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = low;i &lt;= high;i++)</span><br><span class="line">        <span class="keyword">if</span>(p[i].x &gt;= p[mid].x - d)</span><br><span class="line">        <span class="keyword">if</span>(p[i].x &lt;= p[mid].x + d)</span><br><span class="line">        temp[len++] = p[i];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// the merge part</span></span><br><span class="line">    sort(temp, temp + len, cmp_y);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;i + j &lt; len;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp[i+j].y - temp[i].y &gt; d) <span class="keyword">break</span>;<span class="comment">// branch-cutting 2</span></span><br><span class="line">            d = min(d, dist(temp[i], temp[i+j]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意上面“branch-cutting 2”这一行，它很容易理解，但是否足够有效呢？是否存在某组数据使得“the merge part”的运算量退化到$n^2$呢？幸运的是，它足够有效！而且运算量至多是7n！请看下面的图示。</p><p><img src="/2019/06/22/Discrete_Mathematics-CH08/closest_distance3.png" alt></p><p>假设我们正枚举到$P1$。Preparata和Shamos证明了，至多有7个$P2$满足$P2.y - P1.y \leq d$。因为前面在左右两边已经”分“过了，故有closest(left), closest(right) &gt;= d，即在“一边”的点两两距离大于d。这个结论非常有用！因为前面已经构造出了以2d为边长的长方形作为我们选点的区域，我们再在这个长方形里画小的正方形，再把P1放进去。能够发现，在图中所示的八个虚线区域中，每个区域至多一个点（否则矛盾）。故而“branch-cutting 2”在至多7步后就会退出，这个剪枝足够有效！</p><p>上面的分析还是比较粗略的，因为实际运算时似乎用不着7步，我们能否证明对每个点至多只要4次或5次比较呢？不论如何，总之都是较小的常数就是了。</p><p>接着来分析一下算法复杂度吧。开始的按x排序：O(nlogn)，之后的递推：f(n) = 2f(n/2) + nlogn + 7n（nlogn是按y排序）。解上面的递推式，得f(n) = O(nlogn)//为何网上有说法是nloglogn？</p><p>以反推的方式理解了一下这个算法，我们再来正面地总结一下我们的步骤：</p><p>①准备，按x排序原数组，使之有序；</p><p>②“分”，以中点为界，得到两子域中的最短点距；</p><p>③“治”，依据②中的最短点距d找出需要枚举的点，这里进行了第一次剪枝；</p><p>④“治”，将③中得到的点按y排序，顺序枚举，并通过y的距离进行第二次剪枝；</p><p>以上。</p><p>总而言之，这个算法的步骤还是容易实现的，难的是深入地理解它。这里两个剪枝分开来看都可能是效率不高的，但合在一起就产生了奇妙的相互作用，保证了总体剪枝的有效性。这十分精妙，但也很难想到，而且不好推广。</p><p>另外书上的算法是设了两个数组，分别对x排序与对y排序，之后在后者这一数组中检索，但这样细节是如何处理的呢？我还不知道。</p><p>算法的完整代码见下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span><span class="keyword">double</span> x, y;&#125;Points[maxn], temp[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp_x</span><span class="params">(Point &amp;lhs, Point &amp;rhs)</span></span>&#123;<span class="keyword">return</span> lhs.x &lt; rhs.x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp_y</span><span class="params">(Point &amp;lhs, Point &amp;rhs)</span></span>&#123;<span class="keyword">return</span> lhs.y &lt; rhs.y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dist</span><span class="params">(Point &amp;lhs, Point &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>((lhs.x - rhs.x)*(lhs.x - rhs.x) + (lhs.y - rhs.y)*(lhs.y - rhs.y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high, <span class="keyword">double</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> mid_x = Points[mid].x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = low;i &lt;= high;i++)</span><br><span class="line"><span class="keyword">if</span>(Points[i].x &gt;= mid_x - d)</span><br><span class="line"><span class="keyword">if</span>(Points[i].x &lt;= mid_x + d)</span><br><span class="line">temp[len++] = Points[i];</span><br><span class="line">sort(temp, temp + len, cmp_y);<span class="comment">//in the book, it's not necessary to sort. Why?</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;i + j &lt; len &amp;&amp; (temp[i+j].y - temp[i].y &lt;= d);j++)</span><br><span class="line">d = min(d, dist(temp[i], temp[i+j]));</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">closest</span><span class="params">(<span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(high == low) <span class="keyword">return</span> INF;</span><br><span class="line"><span class="keyword">if</span>(high - low == <span class="number">1</span>) <span class="keyword">return</span> dist(Points[low], Points[low+<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">double</span> d1 = closest(low, mid);</span><br><span class="line"><span class="keyword">double</span> d2 = closest(mid + <span class="number">1</span>, high);</span><br><span class="line"><span class="keyword">double</span> d = min(d1, d2);</span><br><span class="line"><span class="keyword">return</span> merge(low, mid, high, d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...<span class="comment">//scanf</span></span><br><span class="line">sort(Points, Points + n, cmp_x);</span><br><span class="line">...<span class="comment">//printf</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>①分治算法在不同递推式下算法复杂度可能不同，需特殊情况特殊分析。</p><p>②分治算法的精髓在于“分而后治”，“分”是“治”的基础，通过“分”得到的有效信息能够帮助我们降低“治”部分的复杂度。在归并排序中，“分”得到的有效信息是子序列的有序性；在最近点对问题中，“分”得到的有效信息是子区域的最近点对距离。</p><p>③分治算法本身不难理解，但比较难想到，也比较灵活。分析分治算法时“为何这种问题可以用分治处理”。</p><h1 id="生成函数"><a href="#生成函数" class="headerlink" title="生成函数"></a>生成函数</h1><p>何谓生成函数？这是个比较玄妙的问题，它的定义很简单，但为何要这样定义，及它为何能用来解决组合问题，则常常会给人带来迷惑，下面笔者以个人的理解粗略地讲讲生成函数。</p><h2 id="生成函数的概念"><a href="#生成函数的概念" class="headerlink" title="生成函数的概念"></a>生成函数的概念</h2><p>先来看这样一个例子：$x_1 + x_2 + x_3 = 7$，其中$0 \leq x_1 \leq 2, 2 \leq x_2 \leq 3, 3 \leq x_4 \leq 4$，$x_1, x_2, x_3$为整数。求$(x_1, x_2, x_3)$有多少种可能。</p><p>我们固然可以通过解答树得到答案，但是否有其他更“代数”的做法呢？考虑这个式子：$(1 + x + x^2) \cdot (x^2 + x^3) \cdot (x^3 + x^4)$。它意味着什么？我们把第一个括号中x的指数看作$x_1$的取值，第二三个括号同理。从一二三个括号中各选一项乘起来，恰好对应$x_1 + x_2 + x_3 = k$的一种方法。故$(1 + x + x^2) \cdot (x^2 + x^3) \cdot (x^3 + x^4)$展开式中$x^k$的系数，即$x_1 + x_2 + x_3 = k$的方法数（而指数所对应的便是$x_1 + x_2 + x_3$的取值）。特别的，取k = 7，就得到了上面问题的答案。</p><p>这个方法看上去和暴力枚举并无二致，但事实并非如此。首先，生成函数将组合问题与代数问题连接起来，从而使得组和问题更易表示，而能为计算机所处理（多项式乘法）。其次，这样的算法在运算时更为容易，因为我们更熟练于多项式的乘法而不是列出解答树。</p><p>为何上述做法能建立从组和到代数的一一映射呢？原因在于乘法法则与加法法则——$ax^c + bx^c = (a+b)x^c$，这对应于加法法则；$ax^c \cdot bx^d = ab x^{c+d}$，这对应于乘法法则。如果认为这有些抽象，不妨在上面的例子中找找哪里用到了这两个法则。生成函数之所以能够解决组合问题，原因就在于多项式的运算能有这样和组和相关的性质。</p><p>上面的生成函数$G(x) = (1 + x + x^2) \cdot (x^2 + x^3) \cdot (x^3 + x^4)$是有限项的，容易理解。但是实际运用中我们一般会考虑无穷项的情况，即将$G(x)$写作无穷级数的形式。然后玄学东西又来了：比如$G(x) = \sum\limits_{i = 0}^{\infty} x^i = \dfrac{1}{1-x}$。为什么可以这样做？这样做有什么好处？这些我们将在下文中，结合具体的案例进行探讨，此时先不要被它迷糊了头脑。</p><h2 id="用生成函数证明组和恒等式-需完善"><a href="#用生成函数证明组和恒等式-需完善" class="headerlink" title="用生成函数证明组和恒等式[需完善]"></a>用生成函数证明组和恒等式[需完善]</h2><p>使用生成函数时，我们需要考虑“意义”。这不是指x的意义——x毫无意义，我们引入x只是要利用多项式的运算，因为它是好的。此处的意义指的是我们运算式子中的意义。拿上面的例子来说，$((1 + x + x^2)), (x^2 + x^3)$分别都有意义，它们相乘也是有意义的。谈到”意义“，你可能想到了第六章玄学的”组合证明“。而生成函数与组合证明，它们恰能够结合在一起。</p><p>//二项式定理？</p><p>比如Yanghui恒等式，可以这么证：$(1+ x)^n = (1 + x)^{n-1} + x (1 + x)^{n-1}$，关注左右式中$x^k$的系数即可。</p><p>又比如Vandermonde恒等式，关键的式子是$(1 + x)^{m + n} = (1 + x)^n (1 + x)^m$。</p><p>不难发现，使用生成函数的思路和组合证明的思路是完全一致的。但这个形式看起来就”正经“的多。</p><h2 id="用生成函数解决组和问题"><a href="#用生成函数解决组和问题" class="headerlink" title="用生成函数解决组和问题"></a>用生成函数解决组和问题</h2><h3 id="生成函数的模型"><a href="#生成函数的模型" class="headerlink" title="生成函数的模型"></a>生成函数的模型</h3><p><strong>例1</strong></p><p>$x_1 + x_2 + x_3 = 7$，其中$0 \leq x_1 \leq 2, 2 \leq x_2 \leq 3, 3 \leq x_4 \leq 4$，$x_1, x_2, x_3$为整数。求$(x_1, x_2, x_3)$有多少种可能。</p><p><strong>例2</strong></p><p>八本书，分给三个小孩，每人得到的书不少于两本不多于四本，求总方法数。</p><h3 id="再谈可重复元素的组和"><a href="#再谈可重复元素的组和" class="headerlink" title="再谈可重复元素的组和"></a><strong>再谈可重复元素的组和</strong></h3><p>在讲这个例子前，先要提一提广义二项式定理。</p><p><strong>广义二项式系数</strong>：$C_u^m = \dfrac{u \cdot (u-1) \cdot … \cdot (u - m + 1)} {1 \cdot 2 \cdot … \cdot m}$，其中m为非负整数，u为任意实数。</p><p>特别的，当u为负整数的时候，我们有$C_{-n}^m = (-1)^m C_{n + m - 1}^m$。</p><p><strong>广义二项式定理</strong>：$(1 + x)^u = \sum\limits_{i = 0}^{\infty} C_u^i x^i$。（证明的话，幂级数展开就好）</p><p><strong>例3</strong></p><p>有n种硬币，每种有无穷多个，问取r个硬币有多少种方法。</p><p>第一种硬币可以取0个、1个、2个、……，这样考虑的话，生成函数便是$G(x) = (1 + x + …)^n$。</p><p>但无穷级数相乘很难算。我们为了能够算出结果，假定级数收敛，那么$(1 + x + …) = \dfrac{1} {1 - x}$。则$G(x) = \dfrac{1} {(1 - x)^n}$。</p><p>于是可以使用上面的广义二项式定理了，得$x^r$的系数是$C_{n + r - 1}^r$。</p><p>回过来再考虑生成函数的问题，它为何要是无穷级数？为了方便表示”可重复元素“，也是为了计算上的方便，因为这样就可以在微积分和组合数学之间建立联系了，从而使用微积分中的一些性质。而对于实际的问题，我们都可以在模$x^r$的意义下考虑原式子，这样让人困惑的无穷就消失啦。</p><p>为何能假定上面的式子收敛？<del>我也不知道，好用就行了</del></p><p><strong>例4</strong></p><p>有三种硬币，币值分别为1、2、5，每种都有无穷个，求取r元有多少种方法？</p><h2 id="用生成函数解决排列问题-需完善"><a href="#用生成函数解决排列问题-需完善" class="headerlink" title="用生成函数解决排列问题[需完善]"></a>用生成函数解决排列问题[需完善]</h2><h2 id="用生成函数解决递推问题-需完善"><a href="#用生成函数解决递推问题-需完善" class="headerlink" title="用生成函数解决递推问题[需完善]"></a>用生成函数解决递推问题[需完善]</h2><p>考虑斐波那契数列的生成函数：$G(x) = \sum\limits_{i = 0}^{\infty} f_i x^i$，$G(x) = x + \sum\limits_{i = 2}^{\infty} f_i x^i = x + \sum\limits_{i = 2}^{\infty} (f_{i-1} + f_{i-2}) x^i = x + x\sum\limits_{i = 0}^{\infty} f_i x^i + x^2 \sum\limits_{i = 0}^{\infty} f_i x^i = x + xG(x) + x^2 G(x)$，则$G(x) = \dfrac{x} {1 - x - x^2}$，因式分解再裂项，就得到我们常见的结果了。</p><p>为什么生成函数这么奇妙？因为它巧妙地将递推关系用来消项。//<del>然后我也讲不出什么道道了</del></p><p>这里的G(x)看起来是很抽象的，有没有办法让它表现得具体一点呢？您好，有的。我们来算一下$G(1/10) = \dfrac{10}{89} = 0.1123595506…$，不难发现小数点后第i项就是斐波那契数列第i项（仅限前几项，因为后面的要进位）。</p><p>如此，我们便可以用生成函数在小数和数列间建立联系啦，也可以用生成函数得到一些好玩的小数。</p><h1 id="容斥原理-需补充"><a href="#容斥原理-需补充" class="headerlink" title="容斥原理[需补充]"></a>容斥原理[需补充]</h1><p>内容</p><p>素数个数（关注计算复杂度）</p><p>满射的个数</p><h2 id="错排问题"><a href="#错排问题" class="headerlink" title="错排问题"></a>错排问题</h2><p>后面的部分<a href="https://www.cnblogs.com/c1299401227/p/5349727.html" target="_blank" rel="noopener">引自网络</a>，略有删改。（不知是否这位老哥原创的）</p><p>$\forall i, f(i) \not = i, i, f(i) \in \{ 1, 2, …, n \};\forall i \not = j, f(i) \not = f(j)$，求符合要求的函数个数D(n)。</p><p>核心递推公式：</p><p>$D(n) = (n-1) [D(n-2) + D(n-1)]$</p><p>初始值：$D(1) = 0, D(2) = 1$。</p><h3 id="递推的推导错排公式"><a href="#递推的推导错排公式" class="headerlink" title="递推的推导错排公式"></a>递推的推导错排公式</h3><p>分析i = 1，它有n-1个取值。不失一般性，设$f(1) = 2$。再分析i = 2，若$f(2) = 1$，剩下的个数就是$D(n-2)$。</p><p>下面的一步就好玩了：如果$f(2) \not = 1$，那么剩下的个数是多少呢？注意！$f(2) \not = 1, f(3) \not = 3, …, f(n) \not = n$，这难道不是新的错排，个数是$D(n-1)$？于是，上面的递推式就得到啦！</p><p>下面咱们来推公式。</p><p>根据套路，设$D(n) = n! N(n)$，然后推一推，得//怎么想到要这么做的？</p><p>$nN(n) = (n-1) N(n-1) + N(n-2)$​，然后有</p><p>$N(n-1) - N(n-2) = (-1)^{n-1} / (n-1)!$，相加得</p><p>$N(n) = (-1)^2/2! + … + (-1)^{n-1} / (n-1)! + (-1)^n/n!$</p><p>故</p><p>$D(n) = n! [(-1)^2/2! + … + (-1)^{n-1}/(n-1)! + (-1)^n/n!]$</p><p>此即错排公式。</p><h3 id="用容斥原理的推导"><a href="#用容斥原理的推导" class="headerlink" title="用容斥原理的推导"></a>用容斥原理的推导</h3><p>用容斥原理也可以推出错排公式:</p><p>正整数1, 2, 3, ……, n的全排列有 n! 种，其中第k位是k的排列有 (n-1)! 种;当k分别取1, 2, 3, ……, n时，共有n*(n-1)!种排列是至少放对了一个的，由于所求的是错排的种数，所以应当减去这些排列;但是此时把同时有两个数不错排的排列多排除了一次，应补上;在补上时，把同时有三个数不错排的排列多补上了一次，应排除……重复该一过程，得到错排的排列种数为</p><p>$D(n) = n! - n!/1! + n!/2! - n!/3! + … + (-1)^n<em>n!/n! = ∑(k=2~n) (-1)^k </em> n! / k!$，</p><p>即$D(n) = n! [1/0! - 1/1! + 1/2! - 1/3! + 1/4! + … + (-1)^n/n!]$.</p><h3 id="简化公式"><a href="#简化公式" class="headerlink" title="简化公式"></a>简化公式</h3><p>错排的公式里有n项，计算复杂度是O(n)，有没有简便的近似值呢，像Stirling公式一般？有的，而且不仅仅是近似值：$D(n) = \lfloor n!/e+0.5 \rfloor$。（但是这个公式有何意义呢？计算n!不还得O(n)？）</p><p>以下是证明：</p><p>对$1/e$幂级数展开一波，得$1/e = e^{-1} = 1/0! - 1/1! + 1/2! - 1/3! - ….. + (-1)^n/n! + R_n(-1)$//看不懂</p><p>其中$R_n(-1)$，$R_n(-1) = (-1)^{n+1} \cdot e^u / (n+1), u∈(-1, 0)$</p><p>所以，$D(n) = n! \cdot e^{-1} - (-1)^{n+1} \cdot e^u / (n+1), u∈(-1, 0)$</p><p>而$|n! R_n| = |(-1)^{n+1} \cdot \dfrac{e^u} {n+1}| = \dfrac{e^u} {n+1} ∈ (\dfrac{1} {[e(n+1)]}, \dfrac{1}{n+1})$，可知即使在n=1时，该余项(的绝对值)也小于1/2。</p><h1 id="术语-需审核"><a href="#术语-需审核" class="headerlink" title="术语[需审核]"></a>术语[需审核]</h1><p>递推关系：recurrence relations</p><p>初始条件：initial conditions</p><p>线性常系数(非)齐次递推关系：linear (non)homogeneous recurrence relations with constant coefficients</p><p>关联的齐次递推关系：associated homogeneous recurrence relations（把F(n)去掉得到的递推关系）</p><p>特征方程/特征根：characteristic equation/roots</p><p>分治算法：divide-and-conquer algorithms</p><p>分治算法的递推关系：divide-and-conquer recurrence relation</p><p>最近点对问题：closest-pair problem</p><p>埃氏筛：sieve of Eratosthenes</p><p>错排：derangement</p><hr><p>完稿于2019-05-01</p>]]></content>
      
      
      
        <tags>
            
            <tag> 课程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学之美】离散数学及其应用：第二章 基本结构</title>
      <link href="/2019/06/22/Discrete_Mathematics-CH02/"/>
      <url>/2019/06/22/Discrete_Mathematics-CH02/</url>
      
        <content type="html"><![CDATA[<p>通过学习这一章，你可以了解到：</p><p>①集合、函数、序列、前缀和、矩阵</p><p>②（我不知道）</p><a id="more"></a><h1 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h1><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>这里涉及的是康托尔的朴素集合论而非公理集合论。后者是为解决悖论（著名的罗素悖论）而出现的，更为抽象。</p><p>集合有两种表示方法：穷举抑或描述。</p><p>Venn图在证明关于集合的命题中比较直观，关于证明，还可以采取列真值表，等价推导的方法。</p><p>集合是无序的，而有序的概念是“元组”，有了顺序，乘法就有了规范。集合的乘法称笛卡尔积（Cartesian product），它不满足交换律，除非两边相等或有空集。</p><p>谈到笛卡尔，你的第一印象是否会是平面直角坐标系？（抑或是“Cogito ergo sum.”？）事实上，笛卡尔积正是坐标系的基础：$R \times R$的结果便是所有二元组$(x, y)$的集合。推广到更高维也同理。</p><p>正如前面我们提到的模糊逻辑，模糊集合在AI中有广泛的应用。另外，多重集合也用于表示复杂图。</p><h3 id="幂集"><a href="#幂集" class="headerlink" title="幂集"></a>幂集</h3><p>以下是一些关于幂集的结论。</p><p>$x \in P(S) \Rightarrow x \subseteq S$</p><p>$x \in S \Rightarrow \{ x \} \in P(S)$</p><p>$S \in P(S)$</p><p>$P(A) \in P(B) \Rightarrow A \in B, A \in B \not \Rightarrow P(A) \in P(B)$</p><p>$A \subseteq B \Leftrightarrow P(A) \subseteq P(B)$</p><h3 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h3><p>总计五种：交（intersection）、并（union）、补（complement）差（difference）、对称差（symmetric difference）。顺带一提，compliment和complement是易混淆的单词，它们的意思是什么呢？</p><p>集合恒等式：类似逻辑中的等价，证明也类似。</p><p>交集的元素个数，用交与并表示对称差，集合的计算机表示。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><p>提到函数，我们先要提映射。如同其他的很多概念一样，和图一样，映射也是架构在集合之上的。集合论，是现代数学大厦的基石之一。</p><p>映射相关术语：domain&amp;codomain，image&amp;pre-image（像与原像），range（domain的子集），map。</p><p>映射的类别：one-to-one（单射，亦称injection），onto（满射，亦称surjection），bijection（双射，亦称one-to-one correspondence）。</p><p>映射的逻辑表示如下</p><ul><li>one-to-one：$\forall x \forall y (x \not = y) f(x) \not = f(y)$</li><li>onto：$\forall (y \in B) \exist (x \in A) f(x) = y$</li></ul><p>习题：存在$f : A \rightarrow B$，$|A| = m, |B| = n$。求$f$分别为一般映射、单射（如果是满射，考虑逆映射就好了）以及$f$为partial时满足以上条件可能的f数目。（$key: n^m, A_n^m, (n+1)^m, \sum\limits_{k = 0}^m C_m^k A_n^{m-k}$）</p><p>//最后一项未经验证？</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>书中记了一些不是很常用的记号：$(f_1 + f_2)(x) = f_1(x) + f_2(x), (f_1 f_2)(x) = f_1(x)f_2(x)$。</p><p>$f(S) = \{ t | \exist s \in S (f(s) = t) \}$，以此可以较严谨地证明$f(S \bigcap U) \subseteq f(S) \bigcap f(T)$。</p><p>关于函数复合和反函数，有$(f^{-1} o f)(x) = x$。</p><h3 id="特殊函数"><a href="#特殊函数" class="headerlink" title="特殊函数"></a>特殊函数</h3><p>floor、ceil、fractional……</p><p>这里我们就主要讨论“底与顶”吧，恰好《具体数学》也就其写了一整个章节。</p><p>为什么引入底之后还要引入可以之表示的顶？为了形式上推理的方便，正如我们既有sin也有cos一样。</p><p>$-\lfloor x \rfloor = \lfloor -x \rfloor$不总是成立，但是$- \lfloor x \rfloor = \lceil -x \rceil$。</p><p>如要将$\lfloor x \rfloor$的括号除去，我们可以用不等式（根据n的位置，也有两种形式），或者将它表示出来：$\lfloor x \rfloor = x - \{ x \}$。</p><p>一个真命题：$\lfloor \sqrt x \rfloor = \lfloor \sqrt {\lfloor x \rfloor} \rfloor$</p><p>由其联想到的真命题：$( f(x)为整 \rightarrow x为整) \rightarrow \lfloor f(x) \rfloor = \lfloor f({\lfloor x  \rfloor} ) \rfloor$</p><p>//证明待补充</p><p>由上述命题引出的有用结论：$\lfloor \frac{x + m}{n} \rfloor = \lfloor \frac{\lfloor x \rfloor + m}{n} \rfloor$</p><p>一个假命题：$\lceil \sqrt x \rceil = \lceil \sqrt{\lfloor x \rfloor} \rceil$（思考：它何时为真？）</p><p>实用的问题：$[\alpha, \beta]$中的整数个数？左闭右开如何，左开右闭又如何，左开右开呢？</p><p>有趣的问题：具体数学赌场中的转轮赌轮有1000个（或n个）投币口，标号从1到n，若$\lfloor \sqrt[3]n \rfloor | n$则庄家赔我们五百块，否则我们给庄家一百块。问玩100局是否会被警察抓起来。</p><p>有趣的问题：没有两个谱是相等的；Spec($2$)和Spec($2 + \sqrt 2$)构成正整数的一个划分。</p><p>有趣的问题：隔两人处决一人的约瑟夫问题。</p><p>//细节待补充</p><h2 id="基数"><a href="#基数" class="headerlink" title="基数"></a>基数</h2><h3 id="无限的概念"><a href="#无限的概念" class="headerlink" title="无限的概念"></a>无限的概念</h3><p>无限实际上有两种：潜无限与实无限。前者表明一种趋势，比如微积分中的极限就是一种潜无限：比任意接近都更接近。而后者则是将无限作为一种实体考察，它是一个怪兽一般不符合常识的存在。古希腊人就不承认实无限的存在，他们的证明总是“素数的数量比任意给定的数都大”而非“素数有无穷多个”。另外，芝诺的悖论也令人们对后者感到恐惧。真正以科学而非思辨考察实无限的开拓者，大概就是康托吧。</p><h3 id="无限的大小"><a href="#无限的大小" class="headerlink" title="无限的大小"></a>无限的大小</h3><p>判断无限集合，我们唯一可以信赖的方法便是一一对应，而非“整体大于部分”的原则。这一规则是康托所提出的，它并非先验的，受到了当时（也包括现在）不少人的质疑与排挤，被认为是异端邪说。康托晚年深受精神疾病的折磨，可即便如此，他还是以一己之力将集合论发展到了一定的高度，为现代数学大厦搭好了基石。康托实在是个伟大的人，虽说我对他还并不了解。</p><p>所谓可数，指的是一个集合与有限集或是自然数集具有相同的基数，即可建立二者间的一一映射。</p><p>基数、势，讲的是一个东西，无限集基数相等称为等势。</p><p>先从简单的结论开始吧：证明正整数和整数一样多。（不妨从希尔伯特旅馆的角度再看看这个例子：我们所关注的是每个个体，而非不可描述的整体）</p><p>再来是集合论中经典而又令人惊诧的结论：正整数和正有理数等势；无理数较有理数势更高。</p><p>以上分别用了两种对角线，后者即著名的康托对角线法。</p><p>通过一系列的推导，我们知道整系数多项式是可数的，故代数数——整系数多项式的根是可数的，而超越数是不可数的，即它要比代数数多得多。有趣的是，我们能数的过来的超越数少之又少。//代数数的相关资料？</p><h3 id="Schroder–Bernstein定理"><a href="#Schroder–Bernstein定理" class="headerlink" title="Schröder–Bernstein定理"></a>Schröder–Bernstein定理</h3><p>给定两集合A、B。若存在$A \rightarrow B$与$B \rightarrow A$的单射（即$|A| \leq |B|$且$|B| \leq |A|$），那么|A|=|B|。</p><p>这一定理可用于证明$|(0, 1)| = |(0, 1]|$，构造g:f(x) = x/2是$B \rightarrow A$的单射即可。</p><h3 id="不可计算数"><a href="#不可计算数" class="headerlink" title="不可计算数"></a>不可计算数</h3><p>图灵机的指令数是可数的，而实数是不可数的，故存在不可计算的数，Chaitin常数便是一个，不过我并不知道它为啥不可计算……</p><h3 id="连续统假设"><a href="#连续统假设" class="headerlink" title="连续统假设"></a>连续统假设</h3><p>先看一道例题：从正整数到{0，1，…，9}的所有映射的集合的势与[0, 1]内实数形成的集合的势相等。</p><p>把上面的十进制改为二进制，可以得到$N$的幂集与实数集等势。</p><p>记正整数的势为$\aleph_0$，实数集的势为c，上述结论即$2^{\aleph_0} = c$。如果势是可数的，而且它们按大小可以记成$\aleph_0 &lt; \aleph_1 &lt; …$（所谓一个无穷集“小于”另一者，指的是前者到后者无法得到满射）。那么，连续统假设说的就是$c = \aleph_1$，也即在两者中间没有元素。</p><p>这里连续统假设的语言表述中假设了无穷集的势的集合是离散的，是可数的。</p><p>连续统假设长久没有得到解决，希尔伯特将其作为“第一问题”。之后哥德尔还有科恩证明了CH（continuum hypothesis）在ZF公理系统中不可判定。ZF公理系统是什么？区别于“朴素集合论”的公理体系，规范了一下集合的基本性质等等，具体有八条，至少我不懂。</p><p>连续统假设假设的是$2^{\aleph_0} = \aleph_1$，照这个思路，有“广义连续统假设”（GCH）：$2^{\aleph_i} = \aleph_{i+1}$，这似乎更加困难，不过先贤也已经证明了它在ZF公理系统还有ZFC公理系统中的不可判定。ZFC比ZF多了项选择公理，反正我不懂。</p><p>小声BB一句，这些ZF、ZFC系统的名字第一眼看到感觉比较随便，没有“黎曼几何”“罗巴切夫斯基几何”看着大气，让人感觉这些所谓“公理”有一些随便（个人意见）。</p><p>我有点不明白：为什么$|N| = \aleph_0$呢，即为什么正整数的势是最小的势呢？有没有比可数集更“小”的无限集呢？</p><h3 id="攻玉与其他"><a href="#攻玉与其他" class="headerlink" title="攻玉与其他"></a>攻玉与其他</h3><p>先贴一下m67的文章：</p><p><a href="http://www.matrix67.com/blog/archives/2172" target="_blank" rel="noopener">http://www.matrix67.com/blog/archives/2172</a></p><p><a href="http://www.matrix67.com/blog/archives/4812" target="_blank" rel="noopener">http://www.matrix67.com/blog/archives/4812</a></p><p>然后讲讲文学作品中的“无限”吧。</p><p>谈到基数，弱弱地安利一下刘宇昆的《可数集》。小说将理性与非理性、数学的简单与生活的复杂做了很好的映射，以别出心裁的方式（有些意识流，在这个设定下尤其自然）表现了两个世界的冲突：理性的学术（或者更柏拉图些，“理念”）与非理性的生活。当主人公走在康托的路上，觉察到数学的可怖与不可描述，体味到理念的无稽与诡谲之时，他也只得放弃自己曾经坚守的理性，成为生活的荒诞的一部分，在多种意义上。这篇用大刘的话说，是“从宏大的数学背景上重新审视人生”，颇具“科幻的诗意”。</p><p>谈到无穷，也不能不提博尔赫斯，《小径分岔的花园》《巴别图书馆》《阿莱夫》《沙之书》……不过这边就不展开了。顺便，《可数集》收录在《杀敌算法》里头，而《科幻世界》中的译名是“人生可数集”，我觉得是画蛇添足（原文<em>The Countable</em>）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 课程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学之美】离散数学及其应用：第一章 逻辑与证明</title>
      <link href="/2019/06/22/Discrete_Mathematics-CH01/"/>
      <url>/2019/06/22/Discrete_Mathematics-CH01/</url>
      
        <content type="html"><![CDATA[<p>通过学习这一章，你可以了解到：</p><p>①形式逻辑与谓词逻辑相关知识</p><p>②一些证明的方法</p><a id="more"></a><h1 id="命题逻辑"><a href="#命题逻辑" class="headerlink" title="命题逻辑"></a>命题逻辑</h1><p>逻辑中的符号系统：对自然语言的抽象，以便研究符号间的关系。</p><p>通过对复杂的语句进行编码，用逻辑学的方式讨论他们，那么语句本身的特殊性就消失了，含糊与歧义在一定程度上的被消灭了（但整个系统并非完备的，据哥德尔的证明）。这样语篇就被转化为了命题的组合，我们得以更容易地判断它们是否合乎逻辑的。</p><p>命题的定义即可判断真假的陈述句，故若将命题记作变量p，则它有两种取值，那么我们可以把它和二进制，和布尔代数联系起来。但世界上也存在多值逻辑与模糊逻辑。//虽然我根本不懂</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>命题（Proposition），“往矣”“可乎”“此言谬矣”等并非命题。</p><p>否定（Negation）</p><p>合取（Conjunction），$\wedge$，and的抽象。</p><p>析取（Disjunction），$\vee$，or的抽象。</p><p>异或（Exclusive Or），在自然语言向符号系统转化的时候尤其要关注关系是exclusive还是inclusive。</p><p>异或有个很漂亮的应用，博弈论中的Nimm’s Game，它涉及的性质是a^b=0当且仅当a=b，还有异或的交换律，所以这种博弈以所有数的异或和作为判断基准。（我瞎说的）</p><p>异或还有一些简单的性质，在有的题目中可能会用到。如a ^ b = c $\Leftrightarrow$ a ^ c = b，还有a - b $\leq$ a ^ b。这些并不难证明，但要想到它们就有一些难度了。</p><p>蕴含（Implication），关注only if和if的区别，充分条件和必要条件及其他表达。蕴含式的真值规则可以在生活中找到一些很好的例子，如合同，承诺等。</p><p>等价（Equivalent），注意它和$\equiv$还有$\Leftrightarrow$的区别，后两者是等价的。</p><p>真值表（Truth Table），多用于证明，但我不大喜欢这样的证明，感觉不如Venn图直观，也不如简单的推理来得漂亮。</p><p>概念还有运算符顺序、位运算。//运算符顺序为何如此？</p><p>习题1：有100句话，第i句说的是“这些话中恰有i句是假话”（变式：“这些话中至少i句是假话”），求哪些是真话哪些是假话。（lrj在他的鬼书里也有这样递归的鬼问题，但我不会啊qwq）</p><p>习题2：判断$(p \vee \lnot q) \wedge (q \vee \lnot r) \wedge (r \vee \lnot p)$何时为真，何时为假。</p><p>习题3：判断$(p \wedge q \wedge r) \vee (\lnot p \wedge \lnot q \wedge \lnot r)$何时为真，何时为假。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>1.翻译自然语言并判断其间的逻辑性。</p><p>2.对一大串语言能否同时为真做判断。因为语言所涉及的多为一个系统所以这也叫System Specification。如果同时为真，称they are consistent。</p><p>3.在数据库中检索信息，在网络中查找网页。（在吴军老师的书中有进一步的介绍，但我还没好好看）</p><p>4.Puzzles，如说谎者游戏。这些游戏可能能发展小孩的智力。道奇森在这方面有一定的建树，其著作《爱丽丝漫游奇境》就蕴含了作者丰富的数学思想和对儿童的深切的关爱。</p><p>5.表示逻辑电路（香农首次大规模将逻辑与电路连接起来，从而建立了通信理论的大厦）。</p><p>Exercise 15，16，17，//题干太长懒得抄</p><p>习题2：斑马问题（zebra puzzle）</p><p>题解：先冷静下来，放松一下心情。（怪我英语不好，把to the right和on the right意思搞反了，也懒得改过来了，就这么做吧~心路历程而已）</p><p>1.先观察房子颜色，题目中出现了全部五色房子，挪威人住第一间，他右边是蓝房子。房子颜色，经过简单疏理，是黄蓝红绿白或黄蓝绿白红，推出挪威人住黄房子，他是外交官，然后蓝屋子屋主养马。</p><p>2.绿屋子人喝咖啡，而中间屋子人喝奶，所以房子排列只能是黄蓝红绿白。英国人住红房子喝奶。</p><p>3.下面看职业和饮料。𠸄人嗜奶，意人嗜茶，挪威人是外交官，日本人是画家，故而喝橙汁的音乐家是西班牙人，他养狗，不住蓝屋子（马限制），不住红屋子（英国人已占），不住绿屋子（咖啡限制），住白房子。</p><p>4.意大利人喝茶，不住绿屋子，那么他住蓝屋子。排除法得日本人住绿房子，画家，喝咖啡。</p><p>4.再看宠物。摄影师养蜗牛，西班牙人白房子养狗，意大利人蓝屋子主养马，挪威人不是摄影师，那么摄影师是意大利人或英国人，若为前者，则后者是医生，旁边没狐狸，矛盾。所以英国人是摄影师养蜗牛，挪威人养狐狸。排除得日本人养斑马。</p><p>5.英国牛奶，西班牙橙汁，意大利的茶，日本咖啡。排除出来矿泉水挪威。</p><p>疑惑：为什么错误的前提也能推出正确的结论呢？是什么影响了答案的走向与其是否自洽？另外，这个题目是如何构思出的呢？怎样保证在讯息最少的情况下可解呢？</p><h2 id="等价"><a href="#等价" class="headerlink" title="等价"></a>等价</h2><p>等价、同构，将复杂的问题归而为一，充分展现了数学的奇妙与瑰丽。</p><p>等价涉及了一些概念：重言式或永真式，矛盾式，将这些概念和蕴含想结合定义等价会更方便。</p><p>说到等价，势必要讲到一系列定律，其中需要记的有德·摩根律（及其n元形态）、分配律、蕴含到析取合取的转化，而对吸收律等的运用要具备一定观察能力。</p><p>判断命题为真时的取值问题，习题3是个很好的例子。</p><p>上述问题的一个应用是解数独，貌似可以用bfs实现。//但我还不会啊qwq，而且书上那个记号是啥意思咧？</p><p>习题1：探索何谓对偶命题及为何等价的命题能推出其对偶命题也等价。//不会鸭。。</p><p>习题2：Exercise 41，有无更巧妙的构造方法？</p><p>习题3：什么样的取值能使$p \vee \lnot q \vee s, \lnot p \vee \lnot r \vee s,$ $ \lnot p \vee \lnot r \vee \lnot s, \lnot p \vee q \vee \lnot s$ $, q \vee r \vee \lnot s,<script type="math/tex">q \vee \lnot r \vee \lnot s,</script> \lnot p \vee \lnot q \vee \lnot s, p \vee r \vee s, p \vee r \vee \lnot s$中尽可能多的值为真呢？//普遍的算法？</p><p>//NAND，NOR这些都什么东西？干嘛要提它们？</p><h2 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h2><p>命题的组和是无穷无尽的，但其真值是有限的。为了将不同形式下真值一致的复合命题归为一类，我们引入范式(normal form)的概念，其中有CNF与DNF两类(C for conjunction)，他们间也可以互相转化。//补充</p><p>不过，许多范式仍然不够漂亮，比方说$p \vee \lnot p \vee (q \wedge \lnot r)$。为了让范式更加规范，我们引入主(full)析取/合取范式的概念，这样范式就和真值表紧密相连了。而任何命题均可转化到范式，由真值表易知。</p><p>欲将复合命题转化为范式，一种做法是列真值表，这是比较容易的。如果得到了主析取范式，利用真值表也能够直接得到主合取范式。</p><p>另一种做法是直接推导。先将部分的$\lnot$（任何不是修饰原子命题的）及$\rightarrow$除去及重复的原子命题。这样原命题便被转化为$p_i, \vee, \wedge$的串，接着再大量使用结合律就好了，同时注意添项。//例子</p><h1 id="谓词逻辑"><a href="#谓词逻辑" class="headerlink" title="谓词逻辑"></a>谓词逻辑</h1><h2 id="谓词"><a href="#谓词" class="headerlink" title="谓词"></a>谓词</h2><p>谈到逻辑，一个相当经典的概念便是亚里士多德提出的三段论。然而，仅凭命题逻辑无法从小前提与大前提得出结论，因为前提与结论中有的只是内容而非形式上的联系（还记得么？命题逻辑中的if then前后的语句无需有任何关联。还有，包含未定变元的陈述句亦不成命题）。数学上，我们常要研究对象的性质问题，故需将问题细化，从命题逻辑深入谓词逻辑。</p><p>谓词逻辑中的对象一般是未定式，故在形式上一个谓词命题，P(x)，看上去更接近一个函数，x也有自己的定义域(domain)。看到变元就关注定义域是一个重要而良好的习惯。</p><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><p>x的定义域是一个集合，其中的元素有的满足性质P，有的并不满足。为了表达定义域中是否存在满足性质的x这一需求，我们再引入量词(quantifier)的概念。常用的量词有$\exists, \forall$，不常见的有$\exists_1$等等。</p><p>量词的引入实则是对符号系统的一种简化，使其能更好地符合我们的思维习惯以提高推理效率。以$\forall x P(x)$为例，它等价于$\bigvee\limits_x P(x), x \in S$。因为这种等价性，含量词的复合命题在取否定有“存在转任意，任意转存在”的规则，这实则就是德摩根律的推广。</p><p>量词的一个重要要素就是它的约束范围，即它与哪一式子结合(bind)。$\forall x P(x) \wedge \forall x Q(x)$与$\forall x (P(x) \wedge Q(x))$在意义上并不一致。前者那样的写法在式子变得更加复杂时很可能引起一定程度混乱，故我们再引入前束范式(prenex normal form)的概念——将所有量词提前，可能产生歧义的变元用不同的记号标识（插一句，我觉得$\forall x (P(x, y) \wedge \forall y Q(y))$这样的写法很反人类）。</p><h2 id="等价-1"><a href="#等价-1" class="headerlink" title="等价"></a>等价</h2><p>涉及量词的等价，往往不能简单粗暴地列真值表了，而是要用推理了。</p><p>习题？证明$\forall x (P(x) \wedge Q(x)) \equiv \forall x P(x) \wedge \forall x Q(x)$和$\exists x (P(x) \vee Q(x)) \equiv \exists x P(x) \vee \exists x Q(x)$，举出$\exists x (P(x) \wedge Q(x)) \not\equiv \exists x P(x) \wedge \exists x Q(x)$还有$\forall x (P(x) \vee Q(x)) \not \equiv \forall x P(x) \vee \forall x Q(x)$的例子。</p><p>另外还有量词命题和无量词命题(null quantification)析取合取（如$\forall P(x) \vee A$）的等价式，一般情况下都是可以直接去括号的，但涉及蕴含的时候要小心点因为蕴含和否定是相关联的。</p><p>谓词和量词的概念就介绍到这里了，不过有了新的记号我们前面的翻译啊什么的也都升级了，毕竟这一章仍是前几章的推广嘛，中心思想仍未变。翻译中值得注意的一种类型是定义域较小的情况。比方说，令全集为生物，P(x)表示“x是狮子”，Q(x)表示“x爱喝茶”。则“所有狮子爱喝茶”是$\forall x (P(x) \rightarrow Q(x))$，而“有狮子爱喝茶”是$\exists x (P(x) \wedge Q(x))$。为什么会这样？其实只要关注狮子以外的动物就好了。</p><p>//书上的习题没怎么做，标*的也就是类似三段论的。</p><h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><p>上面讲的往往都是单个量词的情况，但现实是“更多量词，更多欢乐”。比如说，表示加法结合律，表示$\epsilon - \delta$语言，都要用到量词的嵌套。量词嵌套涉及到顺序的问题，里头的规则很简单：相同的能替换，不同的不能换，这也很好理解，可以在脑海中对所有元素遍历一遍来加深印象。</p><p>有新的概念引入，否定自然也是要实时更新的了，不过规则格外简单：存在变任意，任意变存在，否定移进去。</p><p>有新的概念引入，翻译自然也会更新了，除了和自然语言间转来转去，有了量词嵌套，数学语言也可以加入转换行列了，快来用最新的量词嵌套试试九种最基本的算数性质吧！</p><p>有了嵌套，命题者就可以用更<del>新颖</del>恶意的方式定义$\exists_1$等量词了。比如，好好的$\exists_1 b P(a, b)$会变成$\exists b \forall c (P(a, b) \wedge (b \not = c) \rightarrow \lnot P(a, c))$，更漂亮了对吧。</p><h1 id="推理与证明"><a href="#推理与证明" class="headerlink" title="推理与证明"></a>推理与证明</h1><p>在讲命题逻辑的时候，我们都是根据已有的命题组判断其真假性，涉及到的命题组还只是个封闭的集合。那么，我们能否由已知的命题推出新的命题，比如三段论中的结论？推理规则就要派上用场了，它能让我们进行推理——在假定premises均为真的情况下推出新的命题。</p><h2 id="推理规则"><a href="#推理规则" class="headerlink" title="推理规则"></a>推理规则</h2><p>关于推理规则有一整张表，但是我不喜欢列表，就逐项分析吧。</p><p>1.Modus ponens/tollens，它们和蕴含相关联。前提真则结论真，结论假则前提假，非常好理解。关于后者的证明可以直接感受也可以列真值表也可以用逆否命题来证，个人感觉最后一项比较漂亮，因为它涉及的是化归的思想。而且，使用逆否命题有时候可以让推理变得简单。</p><p>//关于modus ponens的中文命名“假言推理”我并不是很明白。同时这些规则为什么要叫这些名字呢？</p><p>2.Hypothetical syllogism，假言三段论，这就更好理解了。可以把它和析取三段论（Disjunctive syllogism）放一块记。</p><p>3.和析取/合取有关的规则。从单项到合取式是添项（Addition，$p \Rightarrow p \vee q$），从析取式到单项是减项（Simplification，$p \wedge q \Rightarrow p$），还有析取（Conjunction，$p, q \Rightarrow p \wedge q$）。很容易推，因为前提是真的。</p><p>4.Resolution，这个比较特别，两个析取推出一个析取，起到删项的作用。有点像一个元素和他的逆相乘然后抵掉这样的感觉。</p><p>推理规则和永真式是有所联系的，比如$p_1, p_2, …, p_n \Rightarrow q$是有效（valid）推理，那么$\bigwedge\limits_i p_i\rightarrow q$便是永真式。</p><p>一般情况下我们要推理的结论都是可爱的非复合命题，如果它长得比较丑陋，比方说，$p \rightarrow q$，该怎么办呢？不用慌，把p看作新的条件而q看作新的结论就好了。而如果它是析取项，可以考虑Resolution。</p><p><del>5.Fallacy of affirming the conclusion，错误推理。</del>比如，有萌新可能会发现这样的新大陆：$p \rightarrow q, q \Rightarrow p$。这非常的正确！而且它还有好多等价的涉及否定的变形，快来用它们拓展你的推理规则仓库吧！（手动滑稽）</p><p>5.涉及量词的推理，universal/existsential instantiation/generalization，共四个，可以望文生义。为什么要引入它们呢？因为我们具体推理地时候不能抽象地说“存在一个”“对任一”，而要用具体的符号表示“那一个/那一类”。但引入这些东西有时候也会造成推理的错误，但一般通过举出一个具体的例子这一方式还是能发现问题所在的。</p><h2 id="证明初步"><a href="#证明初步" class="headerlink" title="证明初步"></a>证明初步</h2><p>证明，首先有Formal Proof与Informal Proof之分，前者是上一节所要遵守的规范格式，很丑陋，很麻烦，很不人性，故现实中我们一般都采取后者，省掉一些“显然”的步骤来使证明在格式上更漂亮。但是要注意，“显然”有时并不“显然”，蕴含了跳步与可能的错误。为让愚昧的计算机理解智慧的人类的证明，我们只得采取Formal Proof。</p><p>关于证明，这里推荐张景中院士的《数学家的眼光》一书，虽然它主要面向中学生，但其中证明的思路与看待问题的眼光都是相当犀利的。（如果诸位了解同类型的优质读物请务必向我推荐，毕竟我对数学只懂些皮毛而已）</p><h3 id="证明策略"><a href="#证明策略" class="headerlink" title="证明策略"></a>证明策略</h3><ol><li><p>直接法</p><p>1-1：对$\exists$可以分类遍历，对$\forall$则可以分类枚举；</p><p>1-2：正向或反向或正向反向一起用证明（正向曰由因导果或“综合法”，反向曰由果索因或“分析法”）。</p><p>1-3：对$\exists$可以采用构造的方式（典例：证明存在连续10个合数），对$\forall$可以采取找反例的方式；</p></li><li><p>间接法</p><p>如果直接法不好入手（如“无理数”是实数排除“有理数”而生的概念，本身的定义不好用），可以考虑间接法。</p><p>2-1：证明逆否命题。</p><p>2-2：反证法，假设结论不成立，推出矛盾之处。反证法的理论基础是$\lnot p \rightarrow (r \wedge \lnot r)$，其中r是任意矛盾的命题，在$\sqrt 2$的例子中，即“m，n互素”。</p><p>关于反证法有很多漂亮的例子，此处列出一些，以飨读者。</p><p>典例1（数论）：证明$\sqrt 2$为无理数。</p><p>典例2（数论）：证明素数有无穷多个。</p><p>典例3（组和）：证明抽屉原理。</p></li><li><p>归纳</p><p>包括但不限于数学归纳法及其变种（第二类数学归纳法，反向数学归纳法，后者可用于证明n元的基本不等式）。</p><p>归纳（induction）不只是种证明的方法，它更是一种思维方式，“告诸往而知来者”，从特殊到一般的思想。与之相对的是演绎（deduction），从一般到特殊的思想。我们前面所学的推理便是都是演绎的典范。</p></li><li><p>其他</p><p>Vacuous Proof与Trivial Proof，相当没意思：证明条件为假或结论为真，于是$p \rightarrow q$必为真。</p></li></ol><h3 id="证明类别"><a href="#证明类别" class="headerlink" title="证明类别"></a>证明类别</h3><p>证明可以正向也可以反向也可以结合二者，反向的一个例子是Bash Game。</p><h4 id="存在性证明"><a href="#存在性证明" class="headerlink" title="存在性证明"></a>存在性证明</h4><p>对于存在性证明，有构造性的也有非构造性的，非构造性证明往往是分析性质，或是使用数学归纳法，而不会给出求解的算法，如霍尔婚配定理的证明。</p><p>对于“存在可被两种方式写为两立方数和的正整数”，我们可以算出$1729 = 10^3 + 9^3 = 12^3 + 1^3$。顺带一提，1729被称为“拉马努金数”，是一个“有意思的数”。（读者不妨对“有意思的数”展开一些思考，比如想想是否存在最小的正的“没意思的数”）</p><p>非构造性证明的一个漂亮例子是“证明存在无理数x, y使得$x^y$是有理数”。</p><p>对于非构造性证明，书中还给出了博弈论中的Chomp game，也是经典的例子。</p><h4 id="穷举法"><a href="#穷举法" class="headerlink" title="穷举法"></a>穷举法</h4><p>穷举往往是针对有限元的，而且数目不能太多，否则人类做着会烦。但是面对无限元也可以穷举不怂，因为把握精度或许能够将我们所面对无限集转化为“要穷举的”有限集。</p><p>//例子</p><h4 id="唯一性"><a href="#唯一性" class="headerlink" title="唯一性"></a>唯一性</h4><p>平面几何中有很多关于唯一性的证明，要用到同一律，例子有Ceva定理等。</p><p>对于一些新引入的概念我们也常要证明唯一性，如矩阵的逆（若存在）是唯一的，乘法逆元（若存在）在模p的意义下是唯一的。</p><h4 id="等价定理"><a href="#等价定理" class="headerlink" title="等价定理"></a>等价定理</h4><p>涉及一组等价定理的证明，我们可以采取$p_1 \Rightarrow p_2, p_2 \Rightarrow p_3, … , p_n \Rightarrow p_1$这样的策略，减少多余的证明。例子么，以下。</p><p>1.$f(x_1, x_2, … , x_n) = X^T A X$为正定二次型。</p><p>2.$f(x_1, x_2, … , x_n) = X^T A X$正惯性指数为n。</p><p>3.存在可逆矩阵B使得$A = B^T B$。</p><p>4.A的顺序主子式均大于0。</p><h4 id="完备性"><a href="#完备性" class="headerlink" title="完备性"></a>完备性</h4><p>希尔伯特等的乐观主义使他们希望在公理之上构建出至臻至善的数学大厦。他在20年代提出了建立一组公理体系来保证数学“完备性”“独立性”“相容性”的期望。所谓完备性，指的是一切数学命题在原则上可判定真伪。然而哥德尔不完备性定理击碎了这一期望。比如古德斯坦定理，其在皮亚诺公理系统中是不可证的，但用超出这一公理系统的方法则可证明。</p><p>//这一段如出现知识性错误，请指出。</p><h4 id="开放问题"><a href="#开放问题" class="headerlink" title="开放问题"></a>开放问题</h4><p>费马大定理（已解决），3x+1猜想。</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>证明是一个大有文章可做的话题，即便是前面讲到的看上去没啥好说的直接法，里头也包含了方方面面的子方法，它们考察的对象各不相同。如在组合中，染色法有很大的作用。在证明和式相等的时候，图形证明则将数学之美展现得淋漓尽致。（如果觉得三角形数正方形数太小儿科，不妨用图形证一证Abel恒等式）</p><p>另外，证明的时候骚话不能多说，像什么“显然”；有的话该说得说，如“不失一般性”。</p><p>上面提到用反证法证明“素数有无穷多个”。不过事实上，这一相对简单的定理能以很多种方法证明，卢昌海于<a href="https://www.changhai.org/articles/science/mathematics/IP.php" target="_blank" rel="noopener">这篇blog</a>中汇总了九种方法（虽说有的有些重复），私以为这一篇的水准相当不错（卢昌海关于数学的科普写得少，但个人感觉都非超好）。这里简单分享一下欣赏完后的感想：后面的大部分方法依据的都是算术基本定理，结合或组和或数论或其他的方法精妙地推出了矛盾。而利用数列的证明还有用欧拉函数的证明看起来与其他方法均不同，较为特殊。好的科普就应该是这样的：拓宽认识问题的角度，并给予读者意料之外的收获（如对$\pi (N)$的粗略估计，各个领域的联通，等等）。</p><h3 id="证明误区"><a href="#证明误区" class="headerlink" title="证明误区"></a>证明误区</h3><p>警惕错误的前提还有错误的推理！一般通过常识还有举例都能够判断结论是否为真，然后挑错就是了。网上时常有神仙一言不合就推倒数学大厦，大家不妨从中找找乐子，顺带锻炼锻炼自己的挑错能力，好使逻辑更严密。</p><p>错误的推理包括但不限于命题逻辑中的错误推理（请参阅《推理规则》第五条），“除以0”等等也应纳入考虑范围。</p><p>还有种证明误区便是循环论证——（隐蔽地）利用结论来推结论。这和前面的错误也相仿，只不过它用的是“未定”的前提而非错误的前提。</p><p>其实，我们所用的语言本身就是循环自指的——字典上为诠释一词的意思必须用其他的词语来描述，来类比。在这样的情况下，用语言来探究哲学的基本问题是否值得？我不知道。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 课程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【白冠之礼】如何在CTF中考察算法能力——从ACTF中的一道rev谈起</title>
      <link href="/2019/05/28/CTF-Algorithm/"/>
      <url>/2019/05/28/CTF-Algorithm/</url>
      
        <content type="html"><![CDATA[<p>CTF，能和ICPC碰撞出什么样的火花呢？</p><a id="more"></a><h1 id="rev中的算法题"><a href="#rev中的算法题" class="headerlink" title="rev中的算法题"></a>rev中的算法题</h1><p><del>戳我获得题目链接</del></p><p>这次ACTF中，做到这么一个rev：</p><p><img src="/2019/05/28/CTF-Algorithm/question.jpg" alt></p><p>其中a1，a3都是已知的整数数组，a2是要求的整数数组。因为是字节的运算，涉及到的常数初看乱糟糟的，可能会把人看晕掉。我们把这段话用C语言（塑料代码，没跑过，可能有错）重写一遍使之更清晰先：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> last;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> plain[], <span class="keyword">int</span> key[], <span class="keyword">int</span> cipher[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *ptr_plain = plain;</span><br><span class="line">    <span class="keyword">int</span> *ptr_cipher = cipher;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">37</span>;i++)<span class="comment">// 5476 / 148 = 37</span></span><br><span class="line">    &#123;</span><br><span class="line">        last = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; <span class="number">37</span>;j++) <span class="comment">// 148 / 4 = 37</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = *(ptr_plain + j) * *(key + j);</span><br><span class="line">            <span class="keyword">int</span> ans = last + temp % <span class="number">79</span>;</span><br><span class="line">            ans %= <span class="number">79</span>;</span><br><span class="line">            last = ans;</span><br><span class="line">        &#125;</span><br><span class="line">        *ptr_cipher = ans;</span><br><span class="line">        ++ptr_cipher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这看着并不好搞，直接暴力搜索的复杂度显然不合理，逆推也不好推。想了好久，才想到要是把最后得到的ans的计算方式写出来，能得到一个线性同余方程。37个方程，37个未知数，这不便可以用高斯消元法解决么！于是，我想起了自己从没有写过高斯消元法的板子……</p><p>这道题本身并不难，但我们是否能从其身上得到进一步的启示呢？比如，如何从众多CTFer中筛选出ICPCer？</p><p>这好像是个<del>鬼畜</del>有趣的值得探讨的话题……</p><h1 id="模式异同"><a href="#模式异同" class="headerlink" title="模式异同"></a>模式异同</h1><p>在把这两个竞赛联系起来之前，我们有必要看一看它们间的模式。</p><p>ICPC：根据题目描述，设计出<strong>高效</strong>的算法，通过input计算得output。</p><p>CTF：根据题目的描述，通过<strong>可行</strong>的方法，获得flag。</p><p>在效率上，ICPC较为严苛，留给程序的时间多以秒或毫秒为单位。考虑到数据的量级，一般而言运算量要在1e8以下。而CTF对于效率要求相对较低，更关注正确性。所以一般多项式级别的算法都可以。虽然CTF对效率没有过高的要求，但它也不会纵容无脑的暴力搜索，在密码学中，这是“好的加密”的首要特点。</p><p>无脑的暴力搜索的一种方案便是枚举待枚举项，看它是否是flag或者能够算出flag。在实际的情况中，flag中的各位间应当缺乏联系（迭代的关系也可以，还有什么关系呢？）。这样暴力枚举的复杂度便是组和量级的。故而参赛者只得找出算法中的vulnerability，以快速而优雅地解出flag。</p><p>多数CTF题是没有input的，除了crypto（好吧，misc里给的图片算是input吗？）。为了向ICPC看起（虽然也有少量ICPC题目中无输入，这里头很多毒瘤题），我们一般可以在crypto题中加入算法的要素。也不只是crypto，rev、ppc都可以。从这个角度看，这三类题还是共性大于个性的。</p><p>于是，通过设置解密的模式，给参赛者cipher，（文章开头提到的那道rev的模式也是类似的：please enter the flag，然后检测输入的flag是否能通过检测），我们可以检验与赛者的代码阅读理解能力，对算法的理解能力，还有各方面杂七杂八的能力。</p><p>不过，也有另一种思路。</p><h1 id="关注复杂度"><a href="#关注复杂度" class="headerlink" title="关注复杂度"></a>关注复杂度</h1><p>说到复杂度，这次ACTF里还有另外一道rev，说是只要耐心等程序跑完就能拿到flag。用IDA一看，是个递归函数，没有记忆化，复杂度妥妥的O($k^n$)，等它跑完宇宙都凉了（好吧，是热寂，热得凉了）。怎么破呢？很简单，加个记忆化自己跑一遍就完了。</p><p>这个题目能够给我们一些复杂度上的启示：提示与赛者优化算法的复杂度。但是这个方向，私以为比较狭窄。把O($k^n$)和O($n!$)一类优化到多项式级别固然是一种思路，但是复杂度这样大得可怕的算法也不多，尤其是较为有名的。如要控制O($nlogn$)能通过而O($n^2$)不能通过，这也不好操作（除非是和服务器交互然后超时了它不给你flag，不过这样不就<strong>变成</strong>ICPC模式了吗……）。比如，我想这么出题：给定平面上n个点，求两个点间的最大距离。这个数取整再转为16进制再转为字符，就得到了flag。然后，控制n的规模，使得了解凸包的选手能在稍短的时间内跑完得到flag，而只会暴力的选手则在比赛时间内都跑不完。</p><p>理论上这个思路确实可行，但实操起来……假设一场比赛赛程十天，那么十天都跑不完的O($n^2$)中的n要多大？还能不能跑起来？如果能跑起来，还有没有其他的思路？比如分一下块跑并行等等……总之这个方向看上去不是很漂亮，也不能很好地检验算法能力。而要真正检验算法能力，还是O($n^4$)，O($n^5$)以及更高次数才适合，可问题在于我们也少有接触过这个复杂度量级的算法……（或者可以在计算中引入冗余操作让player除去它们？）</p><p>（以上是关于时间复杂度的，关于空间复杂度还莫得思考）</p><h1 id="解密模式"><a href="#解密模式" class="headerlink" title="解密模式"></a>解密模式</h1><p>上面讲到了解密的模式，我们再来更深入地看一看。</p><p>首先是阅读理解代码，阅读crypto中给出的代码，或是IDA反编译出的伪代码。这些代码的码风和我们自己写的不尽一致，故而阅读理解并不总是很轻松。阅读时，当在草稿上画出函数间的流程图，标记出重要的，还未完全理解的语句。将代码转化为等价的更容易为自己接受的形式。再来是保持清晰的头脑。这样就差不多了，能够对这段代码做了什么，效率如何，产生初步的理解。</p><p>然后是关注关键点了，比如以上的例子中，ida里头那一段代码。它反映了什么知识点？这是很难从代码反推出来的，除非我们已对这一知识点有了一定的认识。我们能做的，只是将代码转化为尽可能多的，等价的形式，从各个角度看能否解出更多的信息。这对于player而言，无疑是充满挑战的。</p><p>而站在命题人的角度，我们能怎么调戏参赛者呢？</p><p>自行设计加密/检验算法想想也很伤脑筋，还是结合已有的算法更能体现CTF的精神。结合已有的算法的时候，不能像ICPC那样关注剪枝啊，数据结构之类，往模板题或是毒瘤题的方向靠拢或许更好。</p><p>比如，这次ACTF就考察了以下方向（这里只列了我会做的555）。<del>戳我获得题目链接。</del></p><p>1.异或的性质，利用它来构造密钥</p><p>2.LFRS（线性迭代加密）的vulnerability</p><p>3.块加密中，每块的加密方式为映射的迭代</p><p>4.其逆映射不是函数（每个象均只有一个原象）的映射</p><p>5.线性同余方程组</p><p>（如果看不了题，可以想想从这些方向出发，能怎么调戏参赛者）</p><p>除了这些方向，我们还可以在CTF中考察什么样的算法呢？</p><p>线性基（类似上面线性同余方程组的检验方法）？尼姆博弈（逐位检验）？乘性函数？……</p><p>以上的方向还没有归类，也不一定都能编出漂亮的题目，或许需要进一步的探讨。</p><hr><p>开始于2019-05-28</p><p>完稿于2019-05-30</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 信息安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【浮生掠影】ACTF十日谈 BY NESS</title>
      <link href="/2019/05/21/Competition-ACTF_2019/"/>
      <url>/2019/05/21/Competition-ACTF_2019/</url>
      
        <content type="html"><![CDATA[<p>不开心。</p><a id="more"></a><h1 id="随想"><a href="#随想" class="headerlink" title="随想"></a>随想</h1><p>今年打的第二场比赛，远没有之前校赛中玩得开心，心态崩地可怕，心情很是不稳定，尤其在退赛（伪）后。也算是教训了，又一次地，无比清晰地感受到了自己的菜，无比清晰地感受到了他人的强，无比清晰地感受到了生活的满满恶意，各式各样各个方面的满满恶意。唉，并不可爱的，世界的另一面呀。</p><p>这次CTF打得很是孤独，作为hacker（伪），我要辗转地搜寻零散的信息，不能和人交流，不能说话。但我觉得，交流是非常必要的，能够使模糊的认识转化为清晰的表达，而且在找那种细密而恼人的bug上有奇效。比赛中我也会和没打的同学分享自己的感受，但并未感到孤独感有所散去，而是始终存在。这或许是CTF的专属特点吧。可能团队赛情况会好一些。</p><p>孤独还体现在无人理解上面。当时看群里就没几个熟悉的人，我跟很多人的关系都是单向边——我认识人家，但不了解人家，人家不一定认识我。包括但不限于MSC的那帮人，还有学长如Heltion、小栗酱、sub（结果他们全是来打酱油的……）。身边人的话，zc对具体的问题就没有表现出解答的兴趣，zwk也是。学长肯定是不能问的，只能“宏观地”讲讲自己的情况和心理状态（这些天跟学长的交流真是失败）。唯一的战友便是ljq了（哦，还有xndl，不过我们的交流实在是少……之后发现yyt也进群了，随便聊了一下，但也没怎么聊），这几天跟她聊得也多，比较开心，当然，也不总是开心……</p><h1 id="抱佛脚"><a href="#抱佛脚" class="headerlink" title="抱佛脚"></a>抱佛脚</h1><p>我开始了解到ACTF，是5月6号，而比赛是13号到23号，还有一周可以准备。本来想继续刷BugKu的，但进了群发现大家都在做School-Bus，也便入坑了。</p><p>School-Bus……对我来说好难的。印象里两三天都没能搞出一道题，很让人沮丧。搞出来方式也不够elegant。这些，都暗示了我在安全领域的瞎搞和无知的本质。</p><p>School-Bus上Web题占多，而我对Web相性不佳，也没从中得到什么提升。工具用得不顺，自学缺乏方向，对知识没有系统性的认识，这便是我了。</p><p>不光Web搞不来，ppc、rev，misc也都做得非常艰难。crypto基本没做。对较复杂的东西，如DES没什么认识，对简单的一些点也没有完全了解。</p><p>虽然School-Bus做得比较挫败，但还是从中得到了一些小经验包的，calculator啊，php include啊，在ACTF中也有用到。不过Web还有好多水题没搞出来，这就比较烦了……Web，得盘。</p><h1 id="中程赛事"><a href="#中程赛事" class="headerlink" title="中程赛事"></a>中程赛事</h1><p>ACTF持续的时间为10天，说长不长，说短不短，较之ICPC这样的五小时集中解题更能考验选手在处理好比赛与生活、心态等方面的素养，较之动辄数月的长期赛事则更加紧张刺激。我可能还不太适应这样的模式吧，被摆了一道呢：没有处理好比赛和生活的关系，心态在两个极点中极速变换，太过看重rank但又不具备与这个排名相匹配的能力，我还有得学啊。</p><p>本来的预想是先拼命做个两天，之后应该就没题做了，连着划水若干日，最后再苟苟，中间始终要维持好心态。很完美的预想，只是和现实完全不符。我拼命做了五六天，做得心神憔悴，神魂颠倒，身心俱疲。主办方也隔两天放一波新题，让人喘不过气来。最后实在做不动了，才作罢，可心中仍有千丝万缕的挂念，这就很揪心了。不甘落后于人，但又没有改变现状的能力，只能假装心无挂念地逃避着这一切，<strong>逃避着这沉重的绝望感，无力感，压迫感和由自身不断外溢的不满与控诉</strong>。</p><p>比赛期间心理状态真心是崩地可怕，晚上觉也睡不好，想七想八的。跟学长交流了一下，觉得把思绪整理一下为好。于是想了一下为什么睡不好，发现天太热了（不是），所以心不静，那么心还为什么不静呢？又可以整理出三个方向，列在下面了。</p><p>首先是处理好CTF和生活的关系，这个比较现实，就不贴上来了。因为要打比赛，作业也没写，课也没听，然后乱七八糟的琐事还很多，就感觉很烦——时不时想起来啊这个东西还没搞。所以就整理了一下，这下倒清晰多了，琐事也不是很多嘛。评估一下，感觉还是协调得来二者的。</p><p><img src="/2019/05/21/Competition-ACTF_2019/Competition-ACTF/mindmap1.jpg" alt></p><p><img src="/2019/05/21/Competition-ACTF_2019/Competition-ACTF/mindmap2.jpg" alt></p><h1 id="时光回放"><a href="#时光回放" class="headerlink" title="时光回放"></a>时光回放</h1><h2 id="启程"><a href="#启程" class="headerlink" title="启程"></a>启程</h2><p>紧张刺激的第一日，本以为是传奇的开始，谁料是噩梦的开端呢……</p><p><img src="/2019/05/21/Competition-ACTF_2019/Competition-ACTF/fake_success.jpg" alt="这都是虚的……"></p><p>（这个排名，虚的……保不了半天）</p><p>微积分做到一半开始打比赛……以为动态计分制是说越早做出来分越高（后来发现根本不是这回事……），于是从课程中间一直打到了十一点多……做了不少水题，意外地高兴了一阵子（$\leq 3h$）呢。</p><p>中午crypto的warmup1有了一丢丢思路，但还不是很清晰……先去跟学长约饭吧！这次交流不是很有效，我没能提出自己面临的具体的问题，而对于学长在大方向上的提问我也有些心不在焉。</p><p>下午一开始感觉自己还是可以的，大概是到视听说口语考试的时候吧，心态还比较正常。（马上就要消失的迷之自信）</p><p>但是下午微积分习题课的时候，就发现排名已经噌噌噌地掉下去了，痛心疾首之际，发现这已经无法挽回了……（这时候也才了解到动态计分制的真实含义……）习题课上后面的人唧唧歪歪的，“什么阿猫阿狗都在打CTF”。</p><p>晚上突然看到ljq的尬膜表情包，于是了解到人家也打CTF。有些惊喜，也有些紧张。</p><blockquote><p>“dl加油鸭”</p><p>“拿了prize记得bg”</p></blockquote><p>开心！（可，这也是个<strong>flag</strong>啊……）</p><h2 id="中程"><a href="#中程" class="headerlink" title="中程"></a>中程</h2><p>完全没印象后面的若干天是如何度过的。大致是这样吧？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(faith):</span><br><span class="line">    ideas = read(problem_index)</span><br><span class="line">    <span class="keyword">for</span> keywords <span class="keyword">in</span> ideas:</span><br><span class="line">        search(keywords)</span><br><span class="line">        <span class="keyword">if</span>(feeling_disgusting()):</span><br><span class="line">            sleep(some_time)</span><br><span class="line">        learn(keywords)</span><br><span class="line">        ask_myself(<span class="string">'where is the flag'</span>)</span><br></pre></td></tr></table></figure><p>看看提交记录（firefox的历史记录就懒得翻了……人类在搜索时的心理状态好奇妙），发现自己在第二天（14号）搞出来了warmup 3（啊，0：30的寝室之光），搞出来了baby_rev（这下能开搞一类题了，rev！）。另外在晚上搜出来了another php（序列化教我做人……）。</p><p>第三天（15号），开新题了，累啊！这天搞出来了file inclusion 2，what’s this 1，real child（哭！不是单射，错当单射），what’s this 2-3（又是11点半，还好刚好在睡觉的点搞出来了）。</p><p>第四天（16号），open your eyes，asm tour（累毙了），warmup 4（思路其实还是简单的，主要是被恐惧感支配了），查出来了file inclusion 1和baby php，搞出了Endless ELF（此题分虚高了，不过还是希望其他题分能虚高一点……）。</p><p>第五天（17号，今天是ljq的生日！），easy reverse，babyrev（高斯消元法码不对于是开始怀疑一切的痛苦，有谁，能领会呢）。</p><p>第六天（18号），shell master（累毙了！可我还是不知道linux的学习路线是怎样的，哭），md5 Hacker（看错变量名的尴尬，自行命题的愚昧）。</p><p>自从第一天掉到14+后，之后就没再爬上去过。时不时还被挤到20+名去，慌啊。艰难地，在rank 20的边缘徘徊，那些人都好可怕。打了六天，实在打不动了，faith=0了，心累了，尽量不挂念着这个吧……慢慢爬回原先的轨道上，从补作业开始……但是看到群里dl复出的消息时心中还是不免一震，感到，一阵，持续的失落。</p><p>（可能是生活对于我自视甚高的惩罚吧。退赛之后，原先清晰的目标模糊了。不知道自己想做什么，脑袋空空如也。这几天不是很想吃饭。）</p><p>信念确实是在做完了crypto和rev的水题后消失的。本来还想做做pwn，但在authtoken验证失败后突然，感到一阵无与伦比的疲惫。不想做了。什么aes，也不想看了。好累。虽然坚持做完了crypto和rev的水题，但我的信念还是不够啊。总是被trivial的事情困扰，我的问题真不小。</p><p>第八天自己出了题给妹子做，结果搞错了两个点，系数忘乘了，图像是反的。让人家算了一晚上都没得到正确结果。没睡好，第二天三点起来，意识到了自己哪里算错了。是算错了啊，是算错了啊。</p><h2 id="沉没"><a href="#沉没" class="headerlink" title="沉没"></a>沉没</h2><p>没怎么管，就……结束了？最后还要交wp，看见群里讨论地火热，可他们提到的那些词自己都不认识，突然感到一种距离感，以及疏离感。</p><p>wp零零碎碎地写了一天，写得真心累。尤其是crypto，做得吃力，得分又低。我都不知道自己怎么怎么想出那么混乱却正确的思路的，怎么用那些丑陋得可怕的代码把题目做出来的。看着并不漂亮的wp，又一次发现自己和强者存在的差距，在心理状态上的差距，在思维方式上的差距。</p><p>不过差距毕竟是客观存在的，老是盯着自己比不上别人的地方看也没意思。我就随便补补题，拓宽一下知识面好了。还是要过得开心呀~</p><p>看上去并无所学？并非如此，起码我暴露了很多问题。这些！都是要搞掉的！</p><p>①对metadata的敏感性；</p><p>②对图像的敏感性（可以自己再思维发散下，想想自己要怎样把数据藏到图像里）；</p><p>③联想，脑洞（加强交流，提取关键点，在概念间做连接，复杂度不就是$C_m^n$嘛）；</p><p>④阅读理解代码的能力（尤其是IDA里那些）；</p><p>⑤密！码！学！security book（还没拿到hhh）有空整理（啊，又是“有空再做”）。</p><p>web还是放放好了，打算是先和同学交流，了解一下要怎么入坑吧。</p><h1 id="补题时间"><a href="#补题时间" class="headerlink" title="补题时间"></a>补题时间</h1><p>这次比赛好像有80+道题呢……还没有官方的wp，显然不能像校赛那样把补题过程写到随笔里了。</p><p>所以就记一下大概要努力的方向吧~毕竟这是<del>快乐</del>鬼畜的CTF啊~</p><p>（以下，按优先级排序）</p><p>1.初探Linux（读一读关于操作系统的课本，对它有个概念先？）</p><p>2.asm的第一个程序，如何编译运行查看断点？</p><p>3.补misc的题，抄wp，戳脑洞</p><p>4.回顾rev的题，补其他题</p><p>5.想想warmup系列有无elegant的做法，如能，再将CTR熟悉一下</p><p>6.在其他地方（pwnable.kr）补点pwn，熟悉一下套路</p><p>7.了解一下Blockchain，及其他p2p方案</p><p>8.怎么用一台client和一台server模拟upload的效果呢？（嗯，首先我得有一台server……）</p><p>wp的话……我想可以参见<a href="https://www.xtxtmtxtx.xyz/articles/ACTF%202019/" target="_blank" rel="noopener">这里</a>，（呜呜呜我不知道自己都大一多少名了我好菜呜呜呜）</p><hr><p>开始于2019-05-21</p><p>完稿于2019-05-25</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 信息安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【白冠之礼】来玩CTF吧！</title>
      <link href="/2019/05/19/Toughts-Lets_CTF/"/>
      <url>/2019/05/19/Toughts-Lets_CTF/</url>
      
        <content type="html"><![CDATA[<p>Interested in information security yet not sure where to start?</p><a id="more"></a><h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>第一次听到“CTF”这个词是在大一上，忘了是在哪个群里。那场是科大办的，我不知哪根筋抽了想去玩玩看。可惜当时对此还完全不了解，不了解它的具体内容，不知道从何开始练习，于是便鸽掉了。但当时还是埋下了对CTF的一些<del>臆想</del>希冀的。</p><p>寒假里闲得没事，不知哪根筋又抽了又想到了CTF（想起来了，听英语听力听到writeup一词去搜然后……）。这回找到的网站比较友善，能让我成功拿下一血，wp在网上也很容易找。于是就每天一道或是两道地在上面<del>抄答案</del>做题目。由于我对Web的认识实在肤浅，寒假里真正让我入迷的是社工和加密。当时感觉像见到了老朋友一样，分外亲切。一个题目，一个知识点看似零散，但它们无不联系着更为宏大的，我所未曾了解过的知识块，犹如一箱箱秘宝，予我以莫大的喜悦之感。更重要的是，它们作为一个整体，折射出了一种hacker spirit，一种独到的、创造性的、艺术的看待世界的方式。这一切无不充满我以激情。</p><p>当时的日记中也写了一些自己对其的想法，有些话现在读来仍分外亲切，摘要并记录如下：</p><blockquote><p>这些东西怎么会这么有意思呢？完全让我陷进去了，简直是恋爱般的喜悦呐φ(゜▽゜*)♪（虽则我不懂何谓“恋爱般的喜悦”╯︿╰）（2019-03-17）</p><p>总之<strong>社工</strong>这个概念给了我很大的冲击，这是个和生活很贴近的话题，简直可以把日常生活过成推理小说啊！实在浪漫，实在有趣，不过我对此还应有进一步的认识，而且我还是一个社工库也没找到……哈尔滨的杜甫，死活搜不到唉……结果社工题被做成了密码题啊✿◡‿◡（2019-03-15）</p><p><strong>密码</strong>的话，除去zip伪加密（压缩我还不懂，winhex那界面我目前还适应不了，于是我也只会09改00这样了……）其实也就做了Ook还有Brainfuck两个题，这个时候我有些撑不住了……本来只是去搜一下Brainfuck是个什么算法的，不想这竟然是个编程语言？？？还™符合图灵完全思想？哈，哈，哈，有意思！不过看到处理个加法都这么麻烦还是有些心累啊。可，啥啥啥？M67还写过这东西的博客？？？还有更好玩的叫WhiteSpace的语言？Shakespeare？Chef？哈，哈，哈，今天都遇见了什么神仙玩意儿啊！晚上吃饭的时候还看了看乘法什么的实现，嗯……我也要写编译器！（2019-03-15）</p><p><strong>密码题</strong>……今天真心没状态，网上搜搜竟然连在线凯撒加密都没有，真伤脑筋，只能自己动手了…….水是水过去了，反正对这个不大有兴趣也找不到参考资料。base64那题是真的有意思：从base64，到八进制，到十六进制，到unicode，到十进制，再是unicode……因为不了解unicode的机制捣鼓了半天，这个可以深究一下。杰斐逊在百度上死活搜不到，狗日的百家号。后来只能对着writeup，傻子一样手工算，O(n)，再找规律。写了个辅助程序，tmd出了不知道什么鬼问题。想换用python，但苦于还不会用python处理字符串，鸽了吧鸽了吧。之后想了解一下那个富强民主是什么原理的，发现一帮人用这东西开车，想想也是挺好玩的✿◡‿◡说到底今天根本无所学啊(,,Ծ‸Ծ,,)（2019-03-19）</p></blockquote><p>不过，也有沮丧的时刻：</p><blockquote><p>今天搞网络的部分吧？post与get，php中的==与变名变量，还有又是看源码又是console，以及hosts……感觉自己学得完全不系统，这样下来自己能学到什么呢？略感失落便不再做了……（2019-03-22）</p></blockquote><p>这过程中有兴奋也有失落，但不论如何，从中都可以看出CTF是个有其价值的东西，是好玩的东西，是能把人深深揪住的让人先是沮丧而后豁然开朗并大感喜悦的该死的又真他妈有意思的东西。</p><p>但是在百度上搜“CTF”（Google的话就好多了，再次抱怨百度真是，太垃圾了），查到的多是让人摸不清头脑的题目，予人困惑的各式各样的工具，还有稀奇古怪的软件。这很容易劝退萌新，让他们对此感到恐惧，觉得自己啥也不会。我觉得这样不好，毕竟每个人都是从啥也不会走过来的。我认为，只要有一些基本的对于计算机（各个方面）的认识，一定信息处理能力，还有坚韧的意志，以及强大的学习与反思能力，等等，都能从CTF中找到乐趣。（只要你<strong>相信</strong>自己能获得这些能力，很大概率你都能获得它们，虽然不一定深入）</p><p>这里，我想记录的是自己的心路历程，给予喜欢信息安全但苦恼不知如何入门的同学一些启迪，如果真能有所启迪那便太好啦！</p><p>（后文，dl请忽视）</p><p>OK. Let’s jam.</p><h1 id="基本架构"><a href="#基本架构" class="headerlink" title="基本架构"></a>基本架构</h1><p>假设，你面前有一个TextBox，上面有一串字符，比方说，flag{Y0U_3nj0y_cTf}；右边有一个“submit” button。把flag粘贴进去，click on the button，然后它弹出个MessageBox：”correct! And you scored 30 pts”。OK. It’s easy, and it’s for babies.</p><p>这大致就是CTF的基本模式了，很简单，是不是？问题在于flag没这么好找。正因如此，这个比赛才叫“Capture The Flag”。作为与赛者，我们要找到隐藏着的flag，submit it。而作为组织者，其任务便是藏好这个flag，千方百计地藏好它，同时要给选手一线，也仅有一线的希望，以制造竞技性与趣味性。</p><p>如果你要藏flag，思维发散一下，你会怎么藏呢？既要把它藏得绝对巧妙，也要留出希望，有哪些方案呢？</p><p>你可以把它藏到写好的可执行文件里，让选手下载，反编译这个文件并通过阅读理解其中的代码而得到flag，这一类型的便是<strong>rev</strong>，逆向。</p><p>（rev给出的一般是exe文件、elf文件，如果是apk包，那这就是<strong>android</strong>题了——虽然两类题中心思想都一致）</p><p>你可以把它藏到网页中，藏到源码里，藏到备份文件里，藏到HTTP的header标头里——怎么藏都可以。或者你可以不藏，只要用户“无法”访问这个网页就可以了，比如，给人家个403错误，302重定向一下……都可以。这一类关于网络安全的统称<strong>web</strong>题，它有很多小的分支，此处便不细讲了。需要说明的是web的很多套路都是依据历史上的漏洞改编出来的。能够走先代hacker走过的路，这怎能不叫人眼前一亮呢？</p><p>如果你觉得藏东西太没意思，不妨干脆些，直接给出flag——的变体。比如要交的flag是flag{Y0U_3nj0y_cTf}，你可以给我ZmxhZyU3QlkwVV8zbmoweV9jVGYlN0Q=。当然，it’s still for babies。也可以给我个9f19c7ac384e737be7d5015461fd988f，但这样就太没意思了，只能反映出你水平不太够，还比较恶意。这类关于加密的便是<strong>crypto</strong>题，可分为古典与现代两种。（有的赛事会把古典密码学给放到misc里面）</p><p>我还可以脑洞大开，放flag到破损的二维码中，“残缺”的图片中，“奇怪”的压缩包里。等等，这些就很杂了，所以称<strong>misc</strong>，杂项。</p><p>以上是一些基本的题型，还有一些其他的分类方法，比如从web里拎出<strong>代码审计</strong>作为一类，还有<strong>pwn</strong>，等等。如果是萌新（比如我）的话还是先了解简单的情形，形成个大概的印象为妙。而不要过度纠结对于题型的划分及一些稍难入门的题型。</p><h1 id="一次友好的对话"><a href="#一次友好的对话" class="headerlink" title="一次友好的对话"></a>一次友好的对话</h1><p>我们拿道水题来进入CTF的奇妙世界吧！网上针对水题的博客一般短得可怕，只有解答，没有思索，私以为这样意义不大。我觉得人的思路是值得记录的，无论是深入的沉思，还是无谓的纠结。</p><p>比方说，上面的ZmxhZyU3QlkwVV8zbmoweV9jVGYlN0Q=，我说it’s for babies，这话相信绝大多数CTFer都会赞同，但是如果你没碰过CTF也不了解□□□□□□，你可能会一脸懵逼“woc这啥啊我怎么啥也看不懂好难啊”。别着急，下面是面向萌新的友好讲解~</p><p>分析上面的“密文”，它有什么结构呢？大小写都有，还有数字，最后是一个等号。如果你对编码这个词有概念的话，你便可以search for “等号 编码”（注意不要搜”= 编码”），然后你会发现“base64” “utf-8”之类的字样。这些都是啥？搜就是了。搜base64，你看到了“在线解密”的网站，抱着试一试的心态，你成功拿到了flag……</p><p>要是你没有关注到这个等号的话，也没事。search for “大写 编码””大小写 编码”，一个个试过去，这个过程可能让你很烦躁，因为你可能没找到有效的信息。没事，search for “CTF 编码”。都可以呀。</p><p>如果你对“编码”一词没概念，那也没事。search for “CTF”呗，看看它有哪些题型，看看人家的wp都有啥套路，没准你还会找到CTF wiki这样的网站……总之应该会对“编码”有概念的，应该。</p><p>再不成，直接把这串东西拿去搜也行，即便出不来结果，这也是一种尝试。</p><p>从上面的例子不难看出，CTF解题的途径是多样化的。就说搜索，也有很多的搜索方案，为什么搜这个可以而搜那个不行，这些，私以为都是需要记录的。而在工具上的选择就更多了，手写脚本、现有工具……达到目标的途径虽然大体思想上一致，但在细节上是有所差异的。player不应只停留在“解题”的层面，而当想想什么样的做法是elegant的（尤其在脚本的编写上），这样或许更能有所提升。</p><p>至此你搞出了这道题，但是你可能对于base64还是一脸懵逼：这鬼东西是怎么运作的？于是你search for “base64”，然而搜到了很多重复的内容。要想深入了解这东西，得到“专业”一点的地方，所以要search for “博客园 base64”“简书 base64”<del>“CSDN base64”</del>。（虽然重复的东西还是很多，人云亦云和抄袭的现象仍然很严重，唉国内的互联网环境啊！）走马观花一阵子后，你大致了解了一下这个东西的原理，提出的背景，复杂度，等等。你可以从这个概念扩展出去，了解base64，base32，base16的异同；了解其他简单的编码方案；了解python中encode()的用法，以便今后的解码……有很多方向可供延伸。</p><p>以上，都是从一题延伸出很多方向的例子，也是“以赛促学”的例子。CTF能够让你了解一些有趣的好玩的此前可能未曾了解的东西，为你打开新世界的大门，让你有事可做，有东西可学。</p><p>打CTF的流程大致便是这样的：看题-&gt;不懂-&gt;自学-&gt;大概懂-&gt;下一题。然后是赛后总结。安全的水很深，涉及的概念多的去了，于是选手也得拼命学，既耗脑力，也费体力。CTFer在赛后脑袋里可能会新增加一箩筐奇奇怪怪的知识，有点像，博物学家？这个词是从卢昌海的博客上看到的，私以为这个比喻实属绝妙。虽然他讲的是软件领域，但是在CTF上这段话也是很适用的，尤其是在接触到了CTF的七七八八的工具之后……</p><blockquote><p>越来越觉得， 某些领域的软件工程师越来越像博物学家。 二十多年前， Java 刚问世， 是学校计算机课的宠儿， 那时的 Java 编程， 每个 class， 每个 method 等等都要设计， 确实有工程师的感觉 (当然， 在 C 程序员看来， 那可能已经是博物学家了)。 然而很多年后再看 Java 编程， 重心变成了从数以百计的 framework 里挑选有用的， 明了其用法， 搞定各种 package 的依赖关系 (当然， 有 Ant、 Maven 等等帮你做这事， 你也得知道那些)， 知道各种 annotation 的用法， 等等。 class 和 method 则大都限定到了跟做填充题差不多的程度。 简直可以这么说， 某些领域的软件工程师依赖记忆越来越多过技术， 若不是对现成软件有博物学家般的知识， 几乎寸步难行。</p></blockquote><h1 id="搜索的重要性"><a href="#搜索的重要性" class="headerlink" title="搜索的重要性"></a>搜索的重要性</h1><p>信息搜集在CTF中占据相当重要的地位。找到flag便是一种信息搜集，不过这是最终目标。要找到flag，先得了解相关的知识点，而这又要通过信息的搜集。注意在这里，搜集不等于收集。</p><p>前面稍稍提了一点搜索在CTF中的应用，可事实上，“搜索”这件事本身还很值得深挖。比如，信息的来源如何？在一个网页中，我又如何筛选出自己需要的信息？针对前一个问题，我们便不能再是总是简单地在百度，综合性的搜索引擎上搜索这一问题，而是倾向于在有着有效信息的网站中搜索，如wikipedia，stack overflow……</p><p>百度也不是完全不能用的，虽然它越来越恶心了，百家号也是真的蠢，百度百科也越来越不行。简单地search for “百家号 屏蔽”诸如此类的东西，都可以找出净化百度的方法，然后你还可以了解一下，使用搜索引擎有什么其他技巧。</p><p>搜索什么东西也是要考虑的，这应当依据我们现有的疑问来。我困惑于不知这种编码叫什么，所以依据结果的特点去搜索：“等号 编码”；我只想先苟出题目，所以依据需求去搜索：“CTF 编码”，等等。还有，有时候一段很长的文本掺了一些干扰搜索结果的废话，那么这段“废话”得删去。如此的技巧和思路还有很多，这是一个非常零散而大有可谈之处的话题，有空再聊。</p><p>搜索也不仅限于搜索引擎中的“search”，在文本中找到有效的信息也是重要的本领。首先，是要了解什么信息是自己需要的，比如文件的文件头，比如ida中这个地址上的变量，比如暴露在文件中的光秃秃的flag。然后便是search for it了，F3。</p><h1 id="赛事特点"><a href="#赛事特点" class="headerlink" title="赛事特点"></a>赛事特点</h1><p>首先CTF是有些解谜的意味的……尤其是misc。关于解谜我在其他地方谈过一点。这里简单谈谈好了，主要是<strong>缺乏反馈</strong>——你完全不得而知这样做是否正确，是不是达到flag的其中一步，抑或是一条弯路。具体该走什么样的路，当前走的路是否正途，不会有hint告诉你。（但可以推断出来）在很多情况下，所需要的是脑洞，奇想，灵感。这正是解谜的一大<del>原罪</del>乐趣。灵感并非死盯着题目能“格物致知”出来的，所以还是要快乐CTF呀。</p><p>还有是要了解各式各样的知识，对某个事物是如何运作的形成基本的概念模型——不需要很精确，把握好要点就行了。某个领域可能有前人深挖过了，写成文章，得看；某个领域可能有前人深挖过了，做出轮子，得会用。等等等等。无需过度了解背后的原理，大概的了解就够了，但这也并不轻松，需要“特定”的自学能力。（博物学家没这么好当，何况是信息时代的博物学家呢）</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>看完这些，你就可以去做<del>水</del>题啦！</p><p>上面的篇章对于解具体的题型可能并无帮助，但它们对CTF的基本模式还有一些全局性的要点给予了直观而较为亲切的介绍。面向的对象是想入坑但心中仍有一丝畏缩的同学，比如之前的我自己。</p><p>Stay positive, just enjoy it.</p><hr><p>开始于2019-05-19</p><p>完稿于2019-05-24</p>]]></content>
      
      
      
        <tags>
            
            <tag> 信息安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学之美】微积分下-苏德矿版：第十一章 级数</title>
      <link href="/2019/04/27/Notes-Calculus_Vol2-CH11/"/>
      <url>/2019/04/27/Notes-Calculus_Vol2-CH11/</url>
      
        <content type="html"><![CDATA[<p>级数，是用于<strong>表达函数</strong>的<strong>数值计算</strong>的工具。（<del>我口胡的</del>）</p><p>我们要学的级数与数列息息相关，可以说是后者的加强版本。两者从敛散性开始便有了亲密的联系。</p><a id="more"></a><h1 id="级数的概念"><a href="#级数的概念" class="headerlink" title="级数的概念"></a>级数的概念</h1><p>级数，是用于<strong>表达函数</strong>的<strong>数值计算</strong>的工具。（<del>我口胡的</del>）</p><p>我们要学的级数与数列息息相关，可以说是后者的加强版本。两者从敛散性开始便有了亲密的联系。</p><h2 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h2><p>1.n阶Koch雪花的边长与面积。</p><p>这个例子中重要的是分析n阶与n-1阶的递推关系。而分析时则应牢牢抓住一条单独的边。</p><p>结论如下：$C_n=\dfrac{4}{3}C_{n-1}$（每条长为3的边均分裂成了4条长为1的边）</p><p>$S_n=S_{n-1}+\dfrac{3 \cdot 4^{n-2}}{9^{n-1}}S_1$（S1的系数中3表示分裂出三个子图形，4表示边的数目，9表示面积的缩减程度）</p><h2 id="敛散性"><a href="#敛散性" class="headerlink" title="敛散性"></a>敛散性</h2><p>回忆数列的敛散性，我们掌握了夹逼定理、单调有界、取子列、柯西准则等方法。而在这一章中我们会学习更多的方法。</p><p>1.几何级数的敛散性（分四类讨论即可）</p><p>2.调和级数的敛散性</p><p>方法有积分判别法、柯西准则或其变形，还有放缩。</p><p>3.p级数的敛散性</p><p>可用积分判别法或放缩判断。</p><h2 id="计算性质"><a href="#计算性质" class="headerlink" title="计算性质"></a>计算性质</h2><p>1.线性运算法则</p><p>2.级数可改变（增/减/变）其有限项而保持敛散性不变</p><p>3.结合性</p><p>//对于结合性，我还没有理解一些细节</p><p>4.$\sum\limits_{n=1}^{\infty}u_n$收敛，则$\lim\limits_{n \to \infty}u_n=0$。</p><p>4的推论即其逆否定理：$\lim\limits_{n \to \infty}u_n\not=0$或者不存在，则$\sum\limits_{n=1}^{\infty}u_n$必发散。（逆命题的反例：调和数列）</p><p>5.级数收敛的柯西准则//什么时候用呢？</p><h1 id="正项级数敛散性的判定"><a href="#正项级数敛散性的判定" class="headerlink" title="正项级数敛散性的判定"></a>正项级数敛散性的判定</h1><p>负项级数可向正项级数转化，正如负定二次型可向正定二次型转化一样。故此处我们只研究正项级数。</p><h2 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h2><p>找上界是一种方法。（化归到单调有界定理）</p><p>还可以通过计算$\lim\limits_{n \to \infty}u_n$来判断。</p><p>柯西准则。</p><h2 id="方法2：比较判别法"><a href="#方法2：比较判别法" class="headerlink" title="方法2：比较判别法"></a>方法2：比较判别法</h2><p>比较判别法常用于有三角函数的情况，如sin x, cos x可以替换为x。</p><p>比较判别法有两处可减弱的条件（忽略前有限项，常数），它们强调了问题的主要部分，使原本可能需要的特判不再需要，因而小幅降低了问题的复杂程度。</p><p>例题1：求证$\sum(1-cos\dfrac{a}{n})$收敛。</p><p>例题2：已知$\sum a^2$收敛，求证$\sum \dfrac{|a_n|}{\sqrt{n^2+\lambda}}$收敛。</p><p>例题3：$a_n &lt; b_n &lt; c_n, \sum a_n,\sum c_n$均收敛，求证$\sum b_n$收敛。</p><p>例题4：设$a_n = \int_{0}^{\pi/4}tan^nxdx$，求证$\sum \dfrac{a_n}{n}$收敛。</p><p>较比较判别法更容易使用的是它的极限形式。</p><p>例题5：求证$\sum(\sqrt{n+1}-\sqrt{n})^p ln\dfrac{n+1}{n-1}$收敛。</p><p>例题6：求$\sum [e - (1+ \dfrac{1}{n})^n]^p$的敛散性。</p><h2 id="方法3：达朗贝尔判别法"><a href="#方法3：达朗贝尔判别法" class="headerlink" title="方法3：达朗贝尔判别法"></a>方法3：达朗贝尔判别法</h2><p>达朗贝尔判别法与柯西判别法的作用实际在于将原级数放为几何级数，但在lim = 1时会不起作用，因为存在“波动”的可能性。</p><p>这两项判别式的条件充分而不必要，因极限不存在的级数也可能收敛，如$\sum \dfrac{2+(-1)^n}{2^n}$。</p><p>例题1：求证$\sum \dfrac{ncos^2 n\pi}{2^n}$收敛。</p><p>例题2：判断$\sum \dfrac{n! a^n}{n^n}$的敛散性。</p><p>在例题2中，对于a=e的情况，最后还要结合基本方法，这是道较为灵活的题目。</p><p>例题3：判断$\sum \sqrt[n]{a} - \sqrt{1+\dfrac{1}{n}} $的敛散性。</p><p>答案：$lna = 1/2$时收敛，否则发散。</p><h2 id="方法4：柯西判别法"><a href="#方法4：柯西判别法" class="headerlink" title="方法4：柯西判别法"></a>方法4：柯西判别法</h2><h2 id="方法5：积分判别法"><a href="#方法5：积分判别法" class="headerlink" title="方法5：积分判别法"></a>方法5：积分判别法</h2><p>例题1：判断p级数的敛散性。</p><p>例题2：判断$\sum \dfrac{1}{n(lnn)^p}$的敛散性。</p><p>答案：p&gt;1时收敛，否则发散。</p><p>例题2的变式还有$\sum \dfrac{1}{ln(n!)}, \sum \dfrac{lnn}{n}, \sum \dfrac{sin\dfrac{1}{n}}{lnn}$等，它们都可以转换到上式。</p><p>例题3：求证$\sum \int_n^{n+1}e^{-\sqrt{x}}dx$收敛。</p><p>例题4：求证$\sum \int_0^{1/n} \dfrac{\sqrt x}{1 + x^2} dx$收敛。</p><h1 id="幂级数"><a href="#幂级数" class="headerlink" title="幂级数"></a>幂级数</h1><h2 id="收敛半径"><a href="#收敛半径" class="headerlink" title="收敛半径"></a>收敛半径</h2><p>Abel定理：若$\sum a_n x^n$在$x=x_0$处收敛，则它在满足不等式$x &lt; x_0$的一切x处绝对收敛；若$\sum a_n x^n$在$x=x_0处发散$，则他在满足不等式$x &gt; x_0$的一切x处发散。</p><p>至于证明，将$a_n x^n$转化成为$a_n {x_0} ^n \dfrac{x^n}{ {x_0} ^n}$即可。</p><p>由Abel定理我们可知幂级数的收敛域是关于原点左右对称的，故可引入收敛半径和收敛区间的概念。它们相对收敛域是较弱的概念。</p><p>Cauchy-Hadamard公式与其根式形态。</p><p>注意：若幂级数为缺项级数，不可直接由Cauchy-Hadamard公式求，需应用定义法求。</p><p>//Cauchy-Hadamard公式无极限时候的意义？</p><h2 id="和函数"><a href="#和函数" class="headerlink" title="和函数"></a>和函数</h2><p>简单的变式：对涉及$\dfrac{1}{x^n}$或$x^{2n-1}$这些项的“伪“幂级数，换元即可。</p><p>幂级数的和函数满足连续、可微、可积这样的分析性质，并且微分/积分后收敛半径不变。</p><p>值得注意的是，虽然收敛半径不变，但收敛域是可能发生改变的。$f(x) = \sum \dfrac{x^n}{n^2}$和他的导数及二阶导数在收敛域上的差异就是一个很好的例子。</p><p>唯一性定理：S(x)为幂级数在x=0某邻域的和函数，则其各项系数满足$a_n = \dfrac{S^{(n)}(0)}{n!}$这一关系，这使得幂级数由其和函数的导数唯一地确定下来。</p><p>对幂级数除法的直观感受：$\sum a_n x^n = 1, \sum b_n x^n = 1 - x$，其商收敛半径远小于原式收敛半径。（$R &lt; min(R_a, R_b)$？）</p><p>通过求幂级数的和函数，我们得以从一般到特殊，求出一些幂级数的取值，如$\sum \dfrac{(-1)^n}{n} = ln 2$。</p><p>例题：求$\sum \dfrac{x^n}{2n + 1}$的和函数。</p><p>//幂级数的加减乘除结果的收敛半径满足什么条件？</p><p>//和函数在收敛半径之外为何仍有取值？</p><p>//在算和函数时可能会算错，有什么好用的检错算法呢？（代入边界值貌似行不通？）</p><h1 id="函数展幂级数"><a href="#函数展幂级数" class="headerlink" title="函数展幂级数"></a>函数展幂级数</h1><h2 id="展开"><a href="#展开" class="headerlink" title="展开"></a>展开</h2><p>相较于微积分I中直接的求导，在这里泰勒级数的面貌显然要复杂得多了——要确认收敛半径，还有有$lim R_n (x) = 0$的先决条件（不然，有反例$f(x) = x ? e^{- \frac{1}{x^2}} : 0$）</p><p>习题：求$2x - \dfrac{4}{3!}x^3 + \dfrac{6}{5!}x^5 + …$的收敛域与和函数。</p><p>求基本的五种级数的麦克劳林展开：$e^x, sin x, cos x, ln(1 + x), (1 + x)^a$。</p><p>其中$cos x$可以化归到$sin x$，而$ln(1 + x)$用积分的方法会更加好算。这些是基本的方法，也是在后面的求解中会渗透进去的。至于$(1 + x)^a$，猜出结果再反推回去也未尝不是一种方法。</p><p>$(1 + x)^a$本身在端点处的收敛性与a的取值有关：$a \leq -1$两边开，$a &gt; 0$两边闭，否则左开右闭。另外，这个展开本名是“牛顿二项式展开”。</p><p>有了基本的五种函数的展开还是远远不够的，不过有了它们我们就能推出更多的级数展开了。请先展开$\dfrac{1}{1 + x^2}, arctan x$。</p><p>接着，再展开$\dfrac{1}{\sqrt{1 + x}}, \dfrac{1}{\sqrt{1 - x^2}}, arcsin x$。</p><p>一些多项式的函数也可以展开了：如$\dfrac{x}{1 + x - 2x^2}$。//$\dfrac{1}{x^2 + x + 1}$则如何呢？</p><p>一些复杂的函数，因为可以写成简单函数的组和，也是可展开的。如$\dfrac{1}{4} ln \dfrac{1 + x}{1 - x} + \dfrac{1}{2}arctan x - x$。不过，先求导再求积可能更为方便。</p><p>变式：非标准情况下的幂级数展开，如展成关于$(x - 3), ln \dfrac{x - 1}{x + 1}$的幂级数之类。</p><p>//级数展开的端点值问题？</p><p>//$sin^3 x$如何展开幂级数？这个问题本身是否值得研究？</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>1.计算积分的近似，如$\int \dfrac{sin x}{x}$//$\int \dfrac{x}{sin x}$则如何呢？</p><p>2.计算高阶导数，如$f(x) = e^{x^2}$，求$f^{(n)}(0)$。</p><p>3.导出欧拉公式，联通实数域与复数域。</p><p>4.数值计算，如计算$sin1°$。</p><h1 id="傅里叶级数"><a href="#傅里叶级数" class="headerlink" title="傅里叶级数"></a>傅里叶级数</h1><p>三角解函数的正交性为傅里叶级数的求解各项系数提供了依据，也提供了具体的算法，但是它虽容易接受，却并不容易计算。$a_0$与$a_n$还需要分开讨论，因为$cos 0x$不能积分成$sin 0x$。</p><p>周期函数是否能够展开需要用到迪利克雷定理，条件十分的特殊，相较级数展开也比较弱，但书中并未给出证明。</p><p>计算傅里叶级数的时候要关注函数的奇偶性，因为这样也许可以大大简化计算步骤。</p><p>例题：计算巴塞尔级数的值。</p><p>（假设我们还不会算）首先我们来分析一下，这一节在讲傅里叶级数，所以应该把一个函数展开成傅里叶级数然后再算。为方便起见，算f(0)好了，这样$f(0) = a_0 / 2 + \sum a_n$。我们希望$\sum a_n = \sum \dfrac{1}{n^2}$或是与之结构相似。</p><p>展什么函数好呢？先从简单的情况开始分析吧。试试$f(x) = x(-\pi &lt; x &lt; \pi)$，展开得$f(x) = 2 \sum \frac{(-1)^{n+1}}{n} sin nx$，嗯，根据$b_n^2$的形式可以用一用帕塞瓦尔等式，至此题目就做完啦。</p><p>（不会帕塞瓦尔等式也不要紧）展开$f(x) = x$的过程中我们看到$\int x sinnx dx$在分部积分时会生成系数的$\dfrac{1}{n}$，$\int x^2 cosnx dx$或许就能给出我们梦寐以求的$a_n = \dfrac{1}{n^2}$。那么试试$f(x) = x^2 (-\pi &lt; x &lt; \pi)$，（虽然复杂度已经有些高了hhh）能不能得到$\sum a_n = \sum \dfrac{1}{n^2}$呢？嗯，$a_n = (-1)^n \dfrac{4}{n^2}$，形式相仿！然后瞎搞一通也就做好了……（这样的分析有点马后炮2333）</p><p>如果原函数是在[a, b]而非[-l, l]上呈周期性，比方说，$x - [x]$，并不用有什么特殊的考虑！因为它在[-l, l]也是呈周期性的，$\int_a^b f(x) = \int_{-l}^l f(x)$。所以只要将积分区间换一换即可，答案不会有任何影响。</p><p>如果原函数不是周期函数，我们也可以截取我们想要的部分把它周期化。</p><p>//傅里叶展开的价值</p><p>//已知傅里叶级数求原函数？（或验证结果？）</p><h2 id="帕塞瓦尔等式"><a href="#帕塞瓦尔等式" class="headerlink" title="帕塞瓦尔等式"></a>帕塞瓦尔等式</h2><p>我们可以用它来巩固我们对于级数乘法还有（三角正交）的概念。证明的话也有两种思路，一种是直接拆开，一种是只拆一个f(x)。虽然后者在思想上与前者等价，但它在形式上要简洁得多。</p><p>例题：f(x)可被傅里叶展开，求卷积函数$F(x) = \int_{- \pi}^\pi f(t) \cdot f(t+x) dx$的傅里叶级数。（key：$A_0 = a_0^2 / 2, A_n = a_n^2 + b_n^2, B_n = 0$）</p><h1 id="综合题"><a href="#综合题" class="headerlink" title="综合题"></a>综合题</h1><p>例题1：求级数$\sum \dfrac{(n+1)^2}{n!}$的和。（$key: 5e$）</p><p>例题3：设$0 &lt; P_1 &lt; P_2 &lt; … $，试证$\sum \dfrac{1}{P_n}$收敛$\Rightarrow$$\sum \dfrac{n}{P_1 + P_2 + … + P_n}$收敛。</p><p>例题4：设正项级数$\{ a_n \}$单调增加有上界，证明级数$\sum (1- \dfrac{a_n}{a_{n+1}})$收敛。</p><p>书上未整理的题：2、5、7、13、14</p><p><strong>借级数包装微分中值定理的题</strong></p><p>例题4：设f(x)在x=0的某一邻域内具有二阶连续导数，且$\lim\limits_{x \to 0} \dfrac{f(x)}{x}=0$，证明级数$\sum f(\dfrac{1}{n})$收敛。</p><p>例题5：设偶函数f(x)在x=0处存在二阶导数，且$f(0)=1$，证明级数$\sum [f(\dfrac{1}{n})-1]$收敛。</p><p>//过程待补充</p>]]></content>
      
      
      
        <tags>
            
            <tag> 课程笔记 </tag>
            
            <tag> 数学_分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学之美】微积分下-苏德矿版：第一章 矢量代数与空间解析几何</title>
      <link href="/2019/04/27/Notes-Calculus_Vol2-CH01/"/>
      <url>/2019/04/27/Notes-Calculus_Vol2-CH01/</url>
      
        <content type="html"><![CDATA[<p>用代数的方法研究几何问题，在三维的坐标系中。</p><a id="more"></a><h1 id="概要及注意"><a href="#概要及注意" class="headerlink" title="概要及注意"></a>概要及注意</h1><p>注意：在讨论解析几何的时候很多情况下要做特判，特判重合、等于零，等等。但出于懒惰与大意还有其他原因，并非每一处需要特判的地方我都有指出，请读者自行注意特殊情况。</p><h1 id="矢量"><a href="#矢量" class="headerlink" title="矢量"></a>矢量</h1><p>要素：大小与方向。矢量起点不固定，故称自由矢量。这为证明提供了一些方便。</p><p>模与零矢量，零矢量的方向，平行的非传递性。</p><p>矢量加法的平行四边形法则，加法交换律与结合律，减法。</p><p>线性组合与分解，线性相关与共面的一致性，尤其是二维与三维情况下。</p><p>用矢量证明三角形三垂线交于一点</p><h2 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h2><p>右手系，卦限。</p><p>单位矢量用以表示方向，基</p><p>投影，方向角与方向余弦。</p><p><strong>Caution：求单位向量时不可忘记$\pm$！！</strong></p><p>距离（推导办法：化归+勾股定理）</p><p>方向余弦满足：$\sum cos^2 = 1, \vec{e} = cos \alpha \vec{i} + cos \beta \vec{j} + cos \gamma \vec{k}$。</p><p>$\dfrac{m}{n}$定比分点公式（比$\lambda$定比分点公式要更容易记，可用于求质心坐标）</p><h1 id="矢量运算"><a href="#矢量运算" class="headerlink" title="矢量运算"></a>矢量运算</h1><h2 id="数乘"><a href="#数乘" class="headerlink" title="数乘"></a>数乘</h2><p>独立于矢量，可将数分离。</p><p>结合律、分配律</p><h2 id="点乘"><a href="#点乘" class="headerlink" title="点乘"></a>点乘</h2><p>投影，和投影与投影和</p><p>渊源，基本运算定律，垂直</p><p>从矢量到模的转化</p><p>点乘坐标表达式</p><p>证明余弦定理</p><h2 id="叉乘"><a href="#叉乘" class="headerlink" title="叉乘"></a>叉乘</h2><p>规则，不满足交换律。</p><p>平行（在坐标表达式中也有所体现）</p><p>坐标表达式</p><p>求面积（二维情形与三维情形），求垂直的矢量</p><p>关于面积，代数上的推导自然方便，但感觉上缺少了几何的古典之美，以下是m67的几何推导（二维情形）：</p><p><a href="http://www.matrix67.com/blog/archives/6217" target="_blank" rel="noopener">http://www.matrix67.com/blog/archives/6217</a></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>混合积</p><p><strong>形式</strong>：$a \cdot (b \times c)$，其展开就是把$b \times c$最上面一行换成$a_1, a_2, a_3$。</p><p><strong>性质</strong>：三向量共面 $\Leftrightarrow$ 混合积 = 0</p><p><strong>几何意义</strong>：以a、b、c为棱的平行六面体体积。（也可以算四面体等）</p><p>二重矢积：$a \times (b \times c) = (a \cdot c)b - (a \cdot b)c$</p><h1 id="平面与直线方程"><a href="#平面与直线方程" class="headerlink" title="平面与直线方程"></a>平面与直线方程</h1><h2 id="平面方程"><a href="#平面方程" class="headerlink" title="平面方程"></a>平面方程</h2><p>先来回忆一下如何确定一个平面。这又很多种方法，其中一种是通过已知一点还有平面的法向量。通过简单的推导，我们能够得到平面的点法式方程：$A(x - x_0) + B(y - y_0) + C(z - z_0) = 0$。（注意推导顺序：已知方程并不好推出为何它表示了点法式）</p><p>将点法式方程进行简单的变式，就得到了平面的一般方程：$Ax + By + Cz + D = 0$。</p><p>平面的一般方程与点法式方程实则相差无几，都是通过法向量来刻画平面的”方向”的，再以常数调整平面的位置。这是非常巧妙的做法，将较难描述的平面通过我们已学过的向量来描述。</p><p>一般方程是一次的，通过一一对应，我们又能够推出平面方程即一次方程，前者是几何概念，后者是代数概念。</p><p>以下是特殊情况：①D = 0；②A = 0；③A = B = 0……</p><p>有了点法式方程我们能处理什么样的问题了呢？一种变式是过三点的平面（三点可得两向量，叉乘得法线）。</p><p>还有“垂直于两平面”这种条件，也可转化为法向量。</p><p>平面的截距式方程，画图比较方便，还有啥用途我就不知道了。</p><p>谈到平面方程，我们还需要考虑平面间的关系：两平面夹角、点到平面距离……点到平面的距离的公式较为美观，但笔者尚不不明白其特殊意义。</p><h2 id="直线方程"><a href="#直线方程" class="headerlink" title="直线方程"></a>直线方程</h2><h3 id="直线的两种方程"><a href="#直线的两种方程" class="headerlink" title="直线的两种方程"></a>直线的两种方程</h3><p>在二维的情况中直线很容易表示，毕竟二维情况下x，y构成了一组映射。但在三维情况下呢？映射不能用了，我们可以选择参数式方程，或“推广”参数方程的思想，构造出点向式方程：$\dfrac{x - x_0}{a} = \dfrac{y - y_0}{b} = \dfrac{z - z_0}{c}$。</p><p>或者，我们可以“两点确定一条直线”，得到两点式方程。</p><p>再或者，我们也可以把直线看作是两个平面的交，这就得到了一般方程。</p><p>注意点向式方程的特殊情形：$a = 0, a = b = 0$的情形。</p><p>点向式虽然看上去只是“一个”方程，但它其实是两个映射的拼接：从x到y的映射与从x到z的映射。把这两个映射分别写出来，再稍加变形，我们可以实现从点向式方程到一般方程的转换。</p><p>一般方程看上去和点向式方程差异挺大，能否将一般方程转化为点向式方程呢？答案是肯定的：将两个平面的法向量作叉乘，即得到直线的方向向量。再任取两个平面的一公共点，如此便好啦。</p><p>其实两点式、参数式、点向式的中心思想都是一样的，不过它们的出发点不同，故使用起来有方便与不方便之分。笔者更为喜欢参数式方程，因为它在表示“直线上的点”上更为方便。看到直线与XXX的“交点”等表述，不妨考虑参数式方程。以下是例题：</p><p>1.证明直线$\dfrac{x+1}{2} = \dfrac{y+1}{-1} = \dfrac{z+3}{3}$落在平面$2x + y - z = 0$上。</p><p>2.求过点$P(-1, 2 ,-3)$且垂直于矢量$a = (6, -2, -3)$还与直线$\dfrac{x-1}{3} = \dfrac{y+1}{4} = \dfrac{z-3}{-5}$相交的直线方程。</p><p>例二可以通过构造过点$P$且以$a$为法向量的平面$\pi$，再来求交点的坐标。不过笔者认为使用参数式方程要容易一些，不光在思维难度上，也在运算上。</p><h3 id="点线面间的关系"><a href="#点线面间的关系" class="headerlink" title="点线面间的关系"></a>点线面间的关系</h3><p><strong>1.求点到直线的距离</strong></p><p>可以通过找到点在直线上的投影（即解$P’$使$P’P \perp M_0P’$，其中$M_0$为直线上任意一点，$M_0P’$即直线方向向量）。</p><p>也可以通过几何分析，确定$h = \dfrac{|PM_0 \times \vec{v}|}{|\vec{v}|}$，其中$M_0$为直线上任意一点，$v$即直线方向向量。</p><p><strong>2.求直线在平面上的投影直线方程</strong></p><p>容易想到的做法是在投影直线上求出两点，但这样要用两次高斯消元，复杂度略高，有无更好的解法呢？</p><p>考虑直线的一般方程。所谓投影直线，必然在给定平面上。而且，它也必然在本身与给定直线形成的平面上。如何确定这个平面呢？考虑其法向量$n$，$n$与原直线垂直，也与给定平面的法向量垂直，故一个叉乘即可得$n$。至此问题的思路便清晰了。</p><p><strong>3.求异面直线间的距离</strong></p><p>求线和线的距离不容易，但是求线到与之平行的面的距离则并不困难，能够将前者转化为后者呢？</p><p>在这样的思路下，我们过直线$L_1$作与$L_2$平行的平面，问题便迎刃而解了。因将得到的线与面的距离平移，就得到两直线间的距离。经整理，得$h = \dfrac{|M_1M_2 \cdot (v_1 \times v_2)|}{|(v_1 \times v_2)|}$。其中$M_1, M_2$一者为直线上的点，一者为构造出的平面上的点（为方便起见，$M_1, M_2$分别可取两直线上的点），$v$是直线方向向量。</p><p>还有线面角、线线角等，就不加赘述了。</p><h3 id="平面束方程"><a href="#平面束方程" class="headerlink" title="平面束方程"></a>平面束方程</h3><p>直线的方程并非唯一的。点向式固然不唯一：点可以任选，方向向量的大小也是任意的，但这些都是小问题。一般方程的不唯一就有意思了：因为任意两个过该直线的互异平面均可得到同一直线，直线可由无穷多对平面定义。那么，能否通过直线找到所有经过它的平面呢？</p><p>先给出结论吧：若记直线的一般方程为$A_1x + B_1y + C_1z + D_1 = 0$ &amp;&amp; $A_2x + B_2y + C_2z + D_2 = 0$，则其经过该直线的平面必可表示为$\lambda(A_1x + B_1y + C_1z + D_1) + \mu(A_2x + B_2y + C_2z + D_2) = A_3x + B_3y + C_3z + D_3$。</p><p>至于为什么这个式子成立，我们可从法向量的角度来看。$\lambda(A_1x + B_1y + C_1z) + \mu(A_2x + B_2y + C_2z)$表示了垂直于直线的平面上的一切向量。又$A_3x + B_3y + C_3z + D_3 = 0$过直线，故其取遍了一切过直线的平面。</p><p>以上的平面束方程中有两个变元，但实际运算时往往取$\lambda = 1$还有$\lambda = 0$以减少未知量个数。</p><p>平面束方程在求解“过直线且满足一定性质”的平面上较为有效。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>问题：我们学到这里能解决哪些问题了呢？</p><p>1.求过一点且垂直于已知直线的直线</p><p>2.……（待补充）</p><h1 id="曲面方程"><a href="#曲面方程" class="headerlink" title="曲面方程"></a>曲面方程</h1><p>面：满足$F(x, y, z) = 0$的点的集合。</p><p>先从球面方程$x^2 + y^2 + z^2 = 1$直观地感受一下曲面方程吧，它类似于二位情况下的曲线方程。</p><h2 id="柱面方程"><a href="#柱面方程" class="headerlink" title="柱面方程"></a>柱面方程</h2><p>啥是柱面呢？可以联想一下“圆柱”：一个圆，沿着一条直线划出的轨迹。这样便引出柱面的定义了：一条直线$L$绕着曲线$\Gamma$运动所形成的轨迹。$L$叫母线，$\Gamma$叫准线。</p><p>在空间中，$F(x, y) = 0$便表示以z轴为母线的柱面方程。这样我们就可以写出“正常的”圆柱的方程啦！</p><p>如果母线不是z轴，而是复杂的情况，如$\vec{v} = a\vec{i} + b\vec{j} + c\vec{k}$，该怎么办咧？先考虑简单的情况：准线在$xOy$上。那么，所得柱面便是将准线沿“斜着的”方向平移即可，对于不在$xOy$平面上的点，可以通过母线将其转换到$xOy$平面上。通过推导，我们得到这样的曲面方程即$F(x - \dfrac{a}{c}z, y - \dfrac{b}{c}z) = 0$。</p><p>平面上的曲线方程放到空间中，都能“进化”成柱面方程，如双曲柱面、抛物柱面、椭圆柱面等等。</p><p>//讲得还不清楚，待补充</p><h2 id="锥面方程"><a href="#锥面方程" class="headerlink" title="锥面方程"></a>锥面方程</h2><p>柱面方程是直线平动产生的，那么直线转动会产生什么呢？类似于柱面的定义，一条直线$L$固定一点绕着曲线$\Gamma$转动所形成的轨迹，这便是锥面。</p><p>如果$\Gamma$在平面$z = h$上，那么锥面方程便是$F(\dfrac{h}{z} x, \dfrac{h}{z} y) = 0$。</p><p>锥面方程的一个例子是椭圆锥面：以$z = c$平面上的椭圆$\dfrac{x^2}{a^2} + \dfrac{y^2}{b^2} = 1$为准线而以原点为顶点的锥面方程，写出来就是$\dfrac{x^2}{a^2} + \dfrac{y^2}{b^2} - \dfrac{z^2}{c^2} = 0$。</p><h2 id="旋转曲面方程"><a href="#旋转曲面方程" class="headerlink" title="旋转曲面方程"></a>旋转曲面方程</h2><p>上一种情况中是直线绕固定点转动，若是直线绕固定轴转动，得到的就是旋转曲面了，这可以很形象地画出来。</p><p>考虑$yOz$平面上的曲线$\Gamma$，其方程为$F(y, z) = 0$。$\Gamma$绕z轴转动得到的旋转曲面方程如何求解呢？考虑$z = c$平面上的$\Gamma$上的一点与旋转后的曲面上的一点，我们要做的便是将后者化归到前者。由观察知，这两点到z轴的距离都相等。于是乎，可得旋转曲面方程$F(\pm \sqrt{x^2 + y^2}, z) = 0$。</p><p>以上是绕一个坐标轴旋转的情况，换为其他坐标轴，解法也大同小异。</p><p>通过旋转曲面我们又能得到一些经典的曲面：单叶双曲面、双叶双曲面。前者可由$x^2 - y^2 = 1$绕y轴得到，后者可由其绕x轴得到。</p><p>旋转曲面方程求解的中心思想便是$\pm \sqrt{x^2 + y^2}$转化为$y$。记住这点，我们可以求一些稍微偏僻一点的题目：如直线$\dfrac{x - 1}{1} = \dfrac{y}{1} = \dfrac{z}{2}$绕z轴旋转所形成的曲面的方程。</p><h1 id="曲线方程"><a href="#曲线方程" class="headerlink" title="曲线方程"></a>曲线方程</h1><p>同理于直线方程的定义，曲线可以通过两个面的交得到，无论是平面还是曲面。特殊地，柱面和准线所在平面的交就能得到准线。（有趣的是，之前我们是用更易描述的曲线得到较难描述的柱面的，现在我们又用约束较少的柱面来解约束更多的曲线了）</p><p>曲线可以用参数方程表示，一个经典的例子便是螺旋线。</p><p>曲线在平面上的投影也是一个重要的课题，其算法是容易接受的，但理解起来并不那么容易。我们先看个简单的例子：</p><p>曲线为$x^2 + y^2 + z^2 = 2, z = 1$，求其于$xOy$平面上的投影。</p><p>算法的第一步是消去z，但这意味着什么呢？其实便是将z=1平面中的形状给拓展成柱面。然后取z=0，就是取柱面的一个截面。总之，就是将z=1平面上的形状投影到z=0上面了。</p><p>理解了上面的例子，再来看一般的情况吧：$F_1(x, y, z) = 0, F_2(x, y, z) = 0$，解得$z = G(x, y)$。对具体的$z = z_0$，$F_1(x_0, y_0, z_0) = F_1(x_0, y_0, G(x_0, y_0)) = F’(x_0, y_0)$，也就是$z = z_0$平面上的曲线。所有这样的曲线形成的柱面的并也就是$F_1(x, y, G(x, y)) = F’(x, y)$。取$z = z_0$，即得其在xOy平面上的投影。</p><p>有面的投影，也可以有体的投影。体的可以通过面的“围成”得到。故在曲面的方程中将等号更为不等号，体的投影便可得到。</p><h1 id="二次曲面"><a href="#二次曲面" class="headerlink" title="二次曲面"></a>二次曲面</h1><p>接触到曲面以后，我们不免要问，基本的曲面有哪些呢？考虑到次数越高往往越麻烦，而一次方程只能够产生平面，我们探索的主要方向是二次曲面。三个变元三种指数（0，1，2）正负两种情况，能够出现多少种组合呢？这里有很多约束条件，要考虑对称，要考虑常数项，比较麻烦。</p><p>//还不会讨论</p><p>书中给出了六类情况：其中“纯二次”的有椭球面、二次锥面、单叶双曲线还有双叶双曲线；含一次项的有椭圆抛物面还有双曲抛物面（马鞍面）。</p><p>了解了这些情况，我们如何从给定的方程中确定形状呢？这是由曲线出发得到曲面的逆过程，并不符合正常的思维规律。故而我们可以逆向思维，考虑什么样的曲线能凑出这个方程，然后再通过“一一对应”确定唯一性。以$\dfrac{x^2}{a^2} + \dfrac{y^2}{b^2} - \dfrac{z^2}{c^2} = -1$为例。将坐标轴做伸缩变换，得到$\dfrac{x^2 + y^2}{b^2}  - \dfrac{z^2}{c^2} = -1$。而这个方程能通过$\dfrac{x^2}{b^2} - \dfrac{z^2}{c^2} = -1$绕z轴旋转得到。通过简单的图象，能够确定这是有两瓣的双曲线旋转成的图形。那么，它就是双叶双曲线了。</p><p>然而，也有不这么好确定的情况：$z = - \dfrac{x^2}{a^2} + \dfrac{y^2}{b^2}$。刚才的方法就不适用啦！这时候可以采取“平面截割法”，比如，用$z = 0, 1, 2, …$割给定的方程，看它在那个平面上的投影如何。再积部分为整体。分别用平行于三个坐标轴的平面割上述曲面，可以形象地感受到“马鞍面”这一名称的名副其实。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 课程笔记 </tag>
            
            <tag> 数学_分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学之美】微积分下-苏德矿版：第二章 多元函数微分学</title>
      <link href="/2019/04/27/Notes-Calculus_Vol2-CH02/"/>
      <url>/2019/04/27/Notes-Calculus_Vol2-CH02/</url>
      
        <content type="html"><![CDATA[<p>我们为什么要学习多元函数的微分学？</p><a id="more"></a><h1 id="极限与连续"><a href="#极限与连续" class="headerlink" title="极限与连续"></a>极限与连续</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>多元函数：一种特殊的映射。比如，$R^2 \rightarrow R$的映射，这里又用到了笛卡尔积！</p><p>关注定义域（二位情况下为一平面）</p><h2 id="平面点集"><a href="#平面点集" class="headerlink" title="平面点集"></a>平面点集</h2><p>邻域（依据距离描述，事实上一维情况中也是用距离描述的）</p><p>点的类别：内点外点与界点，通过邻域来描述</p><p>集的类别：开集与闭集（关注描述方式）</p><p>连通性（通过折线描述）与开区域</p><p>对于上述概念，我们能够发现，开集与闭集（集的类别）是通过内点外点（点的类别）刻画的，而连通性也是由点的相连刻画的。然而，点本身则是依据其他点（邻域）刻画的。在这里，点本身并不重要，重要的是点与点之间的联系。</p><h2 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h2><p>二重极限：由任意路径逼近都趋于极限值，方有二重极限。</p><p>累次极限：先x后y或先y后x的趋近极限值，两种算法可能不一，本质是一元极限。</p><p>二重极限中的“任意”难以直接确定，但否定只需找出反例即可。故若有函数满足在两条路径下趋向某点的极限值不一，函数在该点没有二重极限。</p><p>举个例子：$f(x, y) = \dfrac{2xy}{x^2 + y^2}$。取$y = kx$，可说明其在$(0, 0)$处无极限。</p><p>虽说二重极限似乎比累次极限更“苛刻”更“强”一些，但事实并非如此，$f(x, y) = xsin \dfrac{1}{y} + y sin \dfrac{1}{x}$便是一个非常好的例子。</p><p>有定理：若两累次极限与二重极限均存在，则三者相等。</p><p>该定理的推论为：若两累次极限存在但不相等，则二重极限不存在。</p><p>在用定义求二重极限时，通过不等式（如基本不等式）还有齐次化的方法有时能够在一定程度上简化问题。</p><h2 id="连续"><a href="#连续" class="headerlink" title="连续"></a>连续</h2><p>//二元函数的连续性较之一元更为难以判断，是否有判断连续的方法？</p><p>二元函数中的连续继承了一元函数中的一些方法：最值、介值、一致连续……</p><h1 id="偏导数与全微分"><a href="#偏导数与全微分" class="headerlink" title="偏导数与全微分"></a>偏导数与全微分</h1><p>介绍偏导数前，先介绍的是“增量”的概念。</p><p>所谓偏导数，理解起来相当容易，不论是在代数上还是几何上。</p><p>值得注意的是：$\dfrac{\partial f(x, y)}{\partial x \partial y} = \dfrac{\partial f(x, y)}{\partial y \partial x}$，当$f_{xy}^{‘’}(x, y)$与$f_{yx}^{‘’}(x, y)$在给定点均连续时。（至于证明，先考虑如何得到二阶导数？可以通过两次一元的中值定理，而这需要构造出一个四元的F，再“算两次”即可）</p><p>至于偏导数的计算，主要有两种策略：先代入另一变量再套公式，或者先套公式再代入，计算复杂度不一。</p><p>全微分，和一元的情况很像，写出来是$df(x, y) = A(x)dx + B(y)dy + o(\rho)$</p><p>关键在于全微分与偏导数的关系：$df(x, y) = \dfrac{\partial f(x, y)}{\partial x}dx + \dfrac{\partial f(x, y)}{\partial y}dy + o(\rho)$，此即全增量公式（这个式子是先假定全微分存在，再令$\Delta y = 0$，则可得到$A = \dfrac{\partial f(x, y)}{\partial x}$，非常奇妙的思路）</p><p>也正和一元的情况一样，可微强于连续：可微必然连续，连续不一定可微。另外，可微还能推出偏导存在。反过来不成立，反例：$f(x, y) = ((x, y) == (0, 0) ? \dfrac{2xy}{\sqrt{x^2 + y^2}} : 0)$。（这一反例与前面的例子略有差异）</p><p>但是偏导函数连续（作为二元函数的连续）能够推出可微（证明也是用的两次一元中值定理），这是判断函数可微的重要方法。</p><p>概念的话，关系比较错综复杂，大致有连续、可导、可微、偏导连续这几项。</p><h1 id="复合函数微分法"><a href="#复合函数微分法" class="headerlink" title="复合函数微分法"></a>复合函数微分法</h1><h2 id="求偏导"><a href="#求偏导" class="headerlink" title="求偏导"></a>求偏导</h2><p>证明（直接代入$\Delta z = (A + \epsilon_1) \Delta u + (B + \epsilon_2) \Delta v, \Delta u = …$）</p><p>算法（类似dfs的算法，变量间的关系是树状结构的，方向是从高层到低层，此之谓链式法则）</p><p>应试中需要关注当变元只有一个的时候，$\partial$得换成d。</p><p>//微分恒等式是如何构造出来的？</p><p>//变换方程的一般算法？</p><h2 id="全微分"><a href="#全微分" class="headerlink" title="全微分"></a>全微分</h2><p>一阶微分形式不变性//二阶情形？联系一元？普遍适用性？</p><h1 id="隐函数微分法"><a href="#隐函数微分法" class="headerlink" title="隐函数微分法"></a>隐函数微分法</h1><p>计算方法：用求导，抑或是用全微分//例子，及全微分在解题时的优越性？</p><p>//自由变量？自变量与因变量？</p><h2 id="隐函数组"><a href="#隐函数组" class="headerlink" title="隐函数组"></a>隐函数组</h2><p>一元情形下并没有这个东西，但多元就有了，为啥捏？因为变量间的关系更加错综复杂了。可以一个方程刻画一个隐函数，也可以两个方程刻画两个隐函数（f、g），故而有了隐函数组的概念。</p><p>求解隐函数组其实很简单，把所有方程都对同一变量求偏导，然后解方程就行了。归纳起来便是雅可比行列式。</p><p>//记号问题</p><h1 id="方向导数与梯度"><a href="#方向导数与梯度" class="headerlink" title="方向导数与梯度"></a>方向导数与梯度</h1><h2 id="方向导数"><a href="#方向导数" class="headerlink" title="方向导数"></a>方向导数</h2><p>方向导数的本质：将两个自由变量化为一个自由变量，即坐标系的一维化</p><p>可微则方向导数必存在，其公式也比较简单。但是这里因为有了新的概念引入，概念间的关系又更复杂了：①可微是方向导数存在的充分而非必要条件；②……</p><p>例子：蚂蚁旅行//这个例子的本质？</p><h2 id="梯度"><a href="#梯度" class="headerlink" title="梯度"></a>梯度</h2><p>梯度用于刻画$\dfrac{\partial u}{\partial l}$的最值</p><h1 id="多元函数近似运算"><a href="#多元函数近似运算" class="headerlink" title="多元函数近似运算"></a>多元函数近似运算</h1><h2 id="多元函数泰勒公式"><a href="#多元函数泰勒公式" class="headerlink" title="多元函数泰勒公式"></a>多元函数泰勒公式</h2><p>用“多项式”刻画多元函数。</p><p>n阶泰勒公式（证明：构造新的函数，将多元转化为一元，先配出公式，再考虑余项），关注记号。</p><p>注意：因为偏导连续，故而$\dfrac{\partial^2 f}{\partial x \partial y}= \dfrac{\partial^2 f}{\partial y \partial x} $。</p><p>二元函数拉格朗日中值公式及其推论（偏导为零，函数值不变）</p><h2 id="多元函数的极值"><a href="#多元函数的极值" class="headerlink" title="多元函数的极值"></a>多元函数的极值</h2><h3 id="多元函数极值概念"><a href="#多元函数极值概念" class="headerlink" title="多元函数极值概念"></a>多元函数极值概念</h3><p>极值点能够推出偏导不存在，或是存在而为零（证明前者：利用拉格朗日中值定理，$f(x_0 + h, y_0) - f(x_0, y_0) = hf’(x_0 + \theta h, y_0)$，再加个保号性）</p><p>如何判定驻点是极值点呢？记$A = f^{‘’}_{11}(x_0, y_0), B = f^{‘’}_{12}(x_0, y_0), C = f^{‘’}_{22}(x_0, y_0)$，则</p><p>—————$B^2 - AC &gt; 0$：驻点非极值点</p><p>—————$B^2 - AC &lt; 0$：驻点为(A &gt; 0 ? “极小值” : “极大值”)（A不会为0哒）</p><p>—————$B^2 - AC = 0$：得特判</p><p>证明的话依旧是拉格朗日中值定理：$f(P) - f(P_0) = \dfrac{1}{2!}[f^{‘’}_{11}(x_0 + \theta h, y_0 + \theta k) h^2 + …]$，而$f^{‘’}_{11}(x_0 + \theta h, y_0 + \theta k) = f^{‘’}_{11}(x_0, y_0) + \epsilon_1$，然后后者在$h \rightarrow 0, k \rightarrow 0$时为无穷小量，可以忽略。所以考虑二次函数$Ah^2 + 2Bhk + k^2$，判断一下$\Delta$就能得出$\Delta \not = 0$时候的结论啦（因为$\dfrac{h}{k}$可以任意取值，所以要看在全部区间上二次函数是否同号）。//书上为何在$\Delta &lt; 0$时用了其他方法？</p><p>但是这样还有一个疑问：$\Delta = 0$的时候为什么需要特判呢？这些是佐证需要特判的例子：$f_1(x, y) = x^2 + y^4, f_2(x, y) = -f_1(x, y), f_3(x, y) = x^2 + y^3$在(0, 0)点处。<del>下面我不会了</del></p><h3 id="多元函数的最值"><a href="#多元函数的最值" class="headerlink" title="多元函数的最值"></a>多元函数的最值</h3><p>比之极值，还要考虑边界点（不同于一元的情形，边界点有无穷个）</p><h3 id="条件极值"><a href="#条件极值" class="headerlink" title="条件极值"></a>条件极值</h3><p>还记得以前的线性规划么？这里约束条件也来了，不过不一定是线性的……</p><p>条件极值的简单情形如是：$G(x, y, z) = 0$，求$f(x, y, z)$的最大值。</p><p>传统的做法是消元法，但是当z为x、y的隐函数时消元可能做不了。这样还有什么算法呢？拉格朗日乘数法。</p><p>//拉格朗日乘数法的可靠性</p><p>//拉格朗日乘数法的优越性</p>]]></content>
      
      
      
        <tags>
            
            <tag> 课程笔记 </tag>
            
            <tag> 数学_分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【简牍提要】卡尔维诺：看不见的城市</title>
      <link href="/2019/04/27/Literature-Calvino-Invisible_City/"/>
      <url>/2019/04/27/Literature-Calvino-Invisible_City/</url>
      
        <content type="html"><![CDATA[<p>黄昏的御花园，暮年的蒙古大帝忽必烈凝神倾听来自威尼斯的青年旅者马可·波罗讲述他旅途中的城市，那些记忆的城市、欲望的城市、符号的城市、轻盈的城市、连绵的城市、所有疆土上亦真亦幻的城市、看不见的城市……</p><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="看不见的城市"><a href="#看不见的城市" class="headerlink" title="看不见的城市"></a>看不见的城市</h2><p>书中描写了虚幻而典型的城市，每个城市都是通过场景表述的，是一个横断面，相当凝炼。在这个意义上，所谓“中心思想”应当是不存在的，故每个城市都无法概括。每一篇兼有短篇小说与诗的特点，也都是另一个视角下的生活本身。</p><p>前面的部分看上去还是比较“写实”的：记忆的城市、欲望的城市……但到后面虚构就很明显了：轻盈的城市、连绵的城市……至于人物的对话，这从一开始都是虚的，一切物件：皇宫、地图，也都是虚的，没有马可波罗也没有忽必烈，叙述者就是我们。</p><p>当然，也可以把二人的对话的背景放在未来城市消亡之后，这样他们对于时间的相当“绕”的看法就比较合理了，因为随着变化逐渐消失，时间的概念也趋于消失。消亡的不仅是城市，更确切地说，是生活本身。</p><h2 id="为什么是城市"><a href="#为什么是城市" class="headerlink" title="为什么是城市"></a>为什么是城市</h2><p>因为城市是整体性的，事物，它是文化、生活的集合，是思想、货物交换的地点，是社会的基本单元，是欲望与记忆的归属，是美的一种独特形态。</p><p>它瑰丽而又深邃，吸引着一代一代人在其中，工作、研究、贸易……</p><p>究竟是人们选择了城市，还是城市吸引了人们？</p><h1 id="特色-待补充"><a href="#特色-待补充" class="headerlink" title="特色[待补充]"></a>特色[待补充]</h1><p>①空灵（语言特点）</p><p>②丰富（内容上；语言上）</p><p>③细节（内容特点）</p><p>……</p><h1 id="考究-待补充"><a href="#考究-待补充" class="headerlink" title="考究[待补充]"></a>考究[待补充]</h1><p>并不是严肃的考究，只是简单的联系，不尽严谨，有待交流。</p><p>多罗泰亚——平遥</p><h1 id="集锦"><a href="#集锦" class="headerlink" title="集锦"></a>集锦</h1><p>关于生活的虚无感：</p><blockquote><p>在帝王的生活中，总有某个时刻，在为征服的疆域宽广辽阔而得意自豪之后，帝王又会因为意识到自己将很快放弃对这些地域的认识和了解而感到忧伤和宽慰；会有一种空虚的感觉，在黄昏时分袭来，带着雨后大象的气味，以及火盆里渐冷的檀香木灰烬的味道；会有一阵眩晕，使眼前绘在地球平面图上的山脉与河流，在黄褐色的曲线上震颤不已；又将报告敌方残余势力节节溃败的战报卷起来，打开从未听人提过姓名的国王递来的求和书的蜡封，他们甘愿年年进贡金银、皮革和玳瑁，以换取帝国军队的保护：这个时候的他，会发现我们一直看得珍奇无比的帝国，只不过是一个既无止境又无形状的废墟，其腐败的坏疽已经扩散到远非权杖所能救治的程度。只有马可·波罗的报告能让忽必烈汗穿越注定坍塌的城墙和塔楼，依稀看到那幸免于白蚁蛀蚀的精雕细刻的窗格。</p></blockquote><p>记忆的城市，迪奥米拉：</p><blockquote><p>倘若九月的黄昏来到此地，白昼渐短，你将看到炸食店门口同时亮起多彩的灯光，听见某处凉台上传来女人的叫声。</p></blockquote><p>梦中的城市，伊西多拉：</p><blockquote><p>这里的建筑都有镶满海螺贝壳的螺旋形楼梯，这里的人能精工细作地制造望远镜和小提琴，这里的外来人每当在两个女性面前犹豫不决时总会邂逅第三个，这里的斗鸡会导致赌徒之间的流血争斗。</p></blockquote><p>繁荣的城市，多罗泰亚：</p><blockquote><p>“我很年轻时来到这里，那天早上，许多人匆匆赶往集市，女人都长着一口漂亮的牙齿，直率地望着我的眼睛，三个士兵在高台上吹着小号，到处是车轮滚滚，到处是彩旗飘飘。在那之前，我只知道荒漠和商队车路，而那个多罗泰亚的早上使我觉得今生今世没有比这更美好的感觉。”</p></blockquote><p>繁荣的城市，多罗泰亚：</p><blockquote><p>城墙上高耸着四座铝质塔楼，七个城门口装有弹簧控制的吊桥跨越护城河，河水流进四条绿色的运河，把城市纵横划分为九个区，每个区有三百所房屋和七百个烟囱。每个区的婚龄少女都要嫁给其他区的小伙子，双方父母要交换各自专有的商品——香柠檬、鲟鱼子、紫水晶——以此为基础，就能推导出整个城市的过去、现在和将来。</p></blockquote><p>符号中的城市，塔马拉：</p><blockquote><p>旅途终于把你带到了塔马拉。你沿着两边墙上挂满招牌的街巷走进城市，眼中所见的不是物品，而是意味着其他事物的物品的形象：牙钳表示牙科诊所，陶罐代表酒馆，戟代表卫队营地，天平代表蔬菜水果铺……</p><p>如若一座城市没有招牌或什么形象标志，那它的形式本身和在城里的位置就足以说明它的职能：王宫、监狱、铸币厂、学校、妓院。就连商贩在货摊上陈放的商品的价值也不在于其自身，而在于作为符号代表其他什么东西：绣花的护额带代表典雅，镀金的轿子代表权力，阿威罗伊的书卷代表学识，脚镯代表淫逸。</p><p>你放眼打量结项，就像翻阅写满字迹的纸页：城市告诉你所有应该思索的东西，让你重复她的话，而你虽以为在游览塔马拉，却不过是记录下她为自己和她的各部分所定下的名称。</p></blockquote><p>关于记忆：</p><blockquote><p>但只有一点不同。在梦中的城市里，他正值青春，而到达伊西多拉城时，他已年老。广场上有一堵墙，老人们倚坐在那里看着过往的年轻人；他和这些老人并坐在一起。当初的欲望已是记忆。</p><p>在后来的岁月里，我的目光又回头审视荒漠和商路车队；而我现在知道，这只是那个早上让我走进多罗泰亚的许多道路中的一条。</p></blockquote><p>关于欲望：</p><blockquote><p>阿纳斯塔西亚，诡谲的城市，拥有时而恶毒时而善良的力量：你若是每天八个小时切割玛瑙、石华和绿玉髓，你的辛苦就会为欲望塑造出形态，而你的欲望也会为你的劳动塑造出形态；你以为自己在享受整个阿纳斯塔西亚，其实你只不过是她的奴隶。</p></blockquote><h1 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h1><p>郝景芳《看不见的星球》</p><p>刘宇昆《宇宙智慧生命制作书籍掠影》</p><p>（未完待续）</p><hr><p>写于2019.04.27</p>]]></content>
      
      
      
        <tags>
            
            <tag> 文学_后现代 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【简牍提要】信息简史：地球的神经系统</title>
      <link href="/2019/04/26/Reading-The_Information-CH05/"/>
      <url>/2019/04/26/Reading-The_Information-CH05/</url>
      
        <content type="html"><![CDATA[<p>将一个难解之谜比作另一个难解之谜……</p><a id="more"></a><h1 id="电气时代与通信"><a href="#电气时代与通信" class="headerlink" title="电气时代与通信"></a>电气时代与通信</h1><p>电流在传播距离上未被发现存在限制，这为远距离通信带来了福音。</p><p>然而福音离降临还面临两类实际问题，一类是工程学领域上的：制造电线、封装电线、储存电流、测量电流……</p><p>还有一类则更像是个逻辑问题而非技术问题：如何将电流转换成字词？</p><p>通信领域的先驱们在面对这个问题时，可能会重新审视曾经的通信技术，它也叫telegraph。</p><h1 id="曾经的Telegraph"><a href="#曾经的Telegraph" class="headerlink" title="曾经的Telegraph"></a>曾经的Telegraph</h1><p>克洛德·沙普在法国大革命时期提出了这个词，意为“远距离书写”。</p><p>他的设计，如同之后提出的许多设计一样，非常精巧，有着机械的精密与美感。</p><p>借助的是视觉信号，所用的器物是沙普信号塔。</p><p>无法传递较长的信息，塔的成本也使得只能telegraph只能在政治、军事而非民事上使用，另中继信号塔的数量对讯息内容也存在影响（联系传话游戏）。</p><p>1793年有法国的议员在报告中呼吁关注信号塔，而1859年，美国的发明家在旅游时为信号塔的宏大、精妙与突如其来的衰亡震撼。</p><blockquote><p>这些信号塔如今陷入了沉默，再不见指示的动作。它们默默矗立在搞出，很快将屈服于时间的侵蚀之手。而电线，尽管外观没有那么雄伟，却遍布整个帝国，用燃烧的火焰将君主的意志传递给在四散在他广袤领土上的六千六百万民众。</p></blockquote><h1 id="电报出世"><a href="#电报出世" class="headerlink" title="电报出世"></a>电报出世</h1><h2 id="社会需求"><a href="#社会需求" class="headerlink" title="社会需求"></a>社会需求</h2><blockquote><p>“远距离传讯是权力和秩序的基本要素。”</p></blockquote><p>而在这个时代，资本家也希望通过远距离通讯获益。他们较政府更有推动力。</p><h2 id="最初的方案"><a href="#最初的方案" class="headerlink" title="最初的方案"></a>最初的方案</h2><p>如何将字词转换成电线中的律动？以字母表作为中间层。</p><p>发明家们的创意设计。（很有意思，高斯和韦伯也合作设计了一种方案）</p><p>在美国，起初发明家和科学家是分离的，前者自行摸索着科学的奥秘，但其对前言科学的发展的无知与无组织性也造成了电报的“重复发明”，合作关系混乱，专利纠纷激烈。有的也有操作过于麻烦等问题，效率不高。</p><h2 id="摩尔斯的方案"><a href="#摩尔斯的方案" class="headerlink" title="摩尔斯的方案"></a>摩尔斯的方案</h2><blockquote><p>“我们国家的邮政信函太慢了……闪电的效果会更好。”</p><p>“构造一种<strong>信号系统</strong>，通过它情报可以得到瞬间传递，这并不困难。”</p><p>虽然对木髓球、气泡或石蕊试纸一无所知，但他意识到信号可以用更简单、更基础、不那么有形的办法来产生，那就是最简单的电路的通和断。</p></blockquote><p>以上是摩尔斯的洞见，他的思想很漂亮，但他缺乏做出能精简地拟合这样思想的机械。韦尔帮助了他，设计了经典的模型：电报“键”，一根控制通断的杠杆。此之谓键式电报。</p><p>键式电报的一段是杠杆，另一端是电磁铁。之后发明家又将电磁铁和杠杆连接起来，这便是“中继器”（relay）。它不止能将衰弱的电流放大，还能够组和多路信号为复合信号。不过这是后话了。</p><h2 id="电报出世以后"><a href="#电报出世以后" class="headerlink" title="电报出世以后"></a>电报出世以后</h2><p>最初的电报讯息并非军事或政治讯息，而是普通的民事讯息。电报的普及也是“自下而上”的，从好玩的公民，到社会各个阶层。</p><p>人们初次收到电报的兴奋：</p><blockquote><p>随着静止的针突然抖动，刺耳的警报声响起，新闻的第一部分传了过来。我们一边兴奋地紧盯着我们朋友向来沉默寡言的面孔以及那神秘的字母盘，一边快速在我们的笔记本记下从大约一百四十多公里外传来的话语。</p></blockquote><p>也有人担心电报对传统报业的冲击，但事实上报业迫不及待地用此项技术来创造价值：因为“电报报道”为新闻贴上了紧急、兴奋等标签。而电报与报纸最终维持了共生的关系，二者互相为彼此提供正反馈。</p><p>电报的流行远远超出了人们的预期，仅过了几年它便跨越了英吉利海峡，当时的《纽约时报》对其高度评价：</p><blockquote><p>这个成果是如此实用，又是如此不可思议……预示着人类未来充满希望的前景……它是人类智力进化过程中一座壮丽的里程碑。而这项成就的实质是什么呢？是思想的传播，物质的生命冲力。</p></blockquote><p>电报给人们带来的振奋普及全球，但它的具体效用体现在当地。</p><p>讯息的传输速度迎来了数量级上的提升，它带来了完全超出人们意料的社会影响。</p><blockquote><p>这就如同一道先前完全不为人知的大坝突然决堤，洪流顿时滚滚而出一般。</p></blockquote><p>比如“天气预报”因电报而成为可能，“电”成了水银的侍女。</p><p>人们的时空观也发生了变化，讯息在传输过程中时间几乎可以忽略不计（但交易成本还是在的），时间从单一的地方时演变为标准时与地方时两套系统，这使得铁路的时间安排成为可行。</p><p>思维上，人们开始能够知道“此时”他地发生了何事。（在此之前，他地发生的事件仅有完成时）</p><p>历史及记录历史的方式也发生了变化，生活的细节得到了保留，这样大量信息的存储可谓史无前例。</p><p>新的生活方式使得新的词语出现，一些旧的词语也被赋予了新意。书中提到了两个笑话：</p><blockquote><p>有位德国妇女带着一盘泡菜走进了卡尔斯鲁厄的电报局，想要“发送”给她在拉施塔特的儿子。</p><p>有位男士带着一份“讯息”来到缅因州班戈区的电报局。操作员在电报键上操作完毕后，就把写有讯息的纸条摁到了钩子上。不了，这位客户投诉说，讯息根本没有被发送除去，因为他明明看到它还挂在钩子上。</p><p>讯息在过去一直被视为指一种有形之物，但这其实从来都是一种假象。</p></blockquote><p>电线在物理上也改变了都市乡间的景观，成为一种怪异的装饰。</p><blockquote><p>人们看到这些电线，不由想到它们所传递的重要的无形货物。使仁罗伯特·弗罗斯特写道：“他们在苍穹下架设线路，字词不论是敲出来还是说出来/在上面奔走时都将如思绪般静寂无声。”</p></blockquote><p>电线在建筑中找不到相似之物，在自然界中也难寻类比。苦心寻找比喻的作家们想到了蛛网以及迷宫。于是新的词语出现了：网络（net-work）。就如同人类的神经网络一样。</p><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><blockquote><p>在多种意义上，使用电报就意味着用编码(code)书写。</p></blockquote><h2 id="何谓编码"><a href="#何谓编码" class="headerlink" title="何谓编码"></a>何谓编码</h2><p>曾经的人们视莫尔斯电码为一种字母表，但后来人们意识到了它与字母表的不同。它并非是用符号（字母）表示声音，而是用符号（点与划）表示符号（字母）。</p><p>用一种抽象表示另一种抽象，这就是编码。而这，也是数学的本质所在，将意义从一种抽象转换为另一种抽象。</p><h2 id="电报时代的编码"><a href="#电报时代的编码" class="headerlink" title="电报时代的编码"></a>电报时代的编码</h2><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><blockquote><p>使用编码书写出于两种密切相关的动机：为了保密以及为了简明。</p></blockquote><p>前一种需求自古以来便存在，尤其在政治上，“凯撒密码”的渊源便是一个很好的例子。后一个例子则可能是经济社会的发展带来的。电报的成本同文本量成正相关这一特点，迫使人们想出应对的方案。当时，出现了被称为“电报体”的新文风。（网络时代也天天有新文风出现，不过原因则大大不同了）</p><blockquote><p>电报体让任何形式的礼貌说法都无容身之地。“May I ask you to do me the favour”这么一句话，传输五十英里的距离就要六便士。这个可怜的人要把类似温文尔雅的形容词无情地砍掉多少，才能将他的信函开支降到一个合理的水平呢？</p></blockquote><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><p>信息压缩与加密，正如它们今后将紧密联结在一起，在当时也是同时为人们所采用的。</p><blockquote><p>一套典型的编码系统是用词典中的字词指代整个短语，并将它们按语义和字母的顺序加以排列。比如，所有以B开头的词汇事关面粉市场：baal表示“今日交易量小于昨日”；babble代表“市场景气”；baby代表“西部市场稳定，国内和出口需求中等”；如此等等。当然，这就有必要让发送方和接收方使用同一个词典。</p></blockquote><p>这些方案既非常有趣，也能带来实实在在的经济效益。它们使得密码学，在一定程度上，成为人民群众所喜闻乐见的事物。（可不是嘛，今天也是这样）各式各样的码本层现叠出，显示出编码的生命活力。</p><blockquote><p>密码学一度是，一门隐秘的技术，其奥秘通过私人手稿的方式传播，就和炼金术一样。但如今，编码制作通过印刷术被放到了光天化日之下，激起大众无尽的想象。</p></blockquote><p>这些码本有哪些类型呢？上面提到的“词面变换”是一种，还有“凯撒密码加强版”，“首字母哈希”（将“my health is improving”简写为“mhii”，学生群体常常以这种编码来加密同学名字）。当然，随便的加密还不足以使得成本最小化，而要做到这点，则需要更专门的分析，从数学上，从语言学中，这吸引了许多痴迷数据的人们。</p><blockquote><p>对于编目员、分类员、文字高手、数字命理学者，以及各种各样的收集癖者来说，电报为他们提供了广阔的用武之地。</p></blockquote><p>比如，威廉·克劳森·图厄在其《通用商业电报编码基础》中对短语进行了分组，通过关键词。这不仅是词典编纂学上的奇特成果，也成为了解当时社会的别样史料，同时也能够成为写作的素材来源。</p><h3 id="缺漏"><a href="#缺漏" class="headerlink" title="缺漏"></a>缺漏</h3><p>然而，编码并不总是好的，它虽然简洁且高效，但对冗余的抹除也使得其几乎没有容错性。一个拼写的错误，就可能使整句话的意义截然不同。</p><h2 id="密码学与信息论"><a href="#密码学与信息论" class="headerlink" title="密码学与信息论"></a>密码学与信息论</h2><p>密码的历史相当久远，并不仅限于信息领域，它也可以通过化学方式制造。在信息领域，古典密码学的经典例子有凯撒加密、栅栏加密。</p><p>近代以来，约翰·威尔金斯在一本小册子中，从思辨与数学的角度对密码学，对编码展开了一些思考。他使用有限的符号集来表示整个字母表，通过组合的方式。在书中，他最后引入了一个二元编码：A对应于aaaaa，B对应于aaaab，C对应于aaaba……“两个符号，五个一组，会产生三十二种<strong>差异</strong>”。</p><blockquote><p>任何的差异都是一种二元选择，而任何的二元选择都可以拿来表达思想。在这里，在这份1641年不为人知的匿名专著中，信息论的核心思想浮出了人类思维的表面，却像土拨鼠一样看见了自己的影子，于是又沉没下去，消失长达三百多年。</p></blockquote><h2 id="当时密码学相关人物"><a href="#当时密码学相关人物" class="headerlink" title="当时密码学相关人物"></a>当时密码学相关人物</h2><p>首先是爱伦·坡，他热爱秘密，喜欢神秘，“心灵就是一个密码；它所提供的密文越短，破解起来就越艰难”。</p><blockquote><p>对于爱伦·坡来说，密码制作并不仅是一种对历史或技术的热情，而是一种执着，反映了他对人类是如何与世界交流的认识。</p><p>对他而言，密码是科学和神秘学之间、理性头脑和智者之间的桥梁。密码分析要求具备敏锐的头脑和特殊的精神力量，完全可登大雅之堂，值得在学院中传授。</p></blockquote><p>当然，维多利亚时代最为杰出的密码分析者还是Charles Babbage，他指出：“解密艺术最奇特的一个特性就是，每个人都坚信，自己可以构造出一种无人能解的密码。我也注意到，一个人越聪明，他的这种信念植根就越深。”他破解了当时被誉为“不可破译的密码”——维吉尼亚密码。“如他在其他工作中所做的，他在其中也应用了代数方法，以方程的形式表达密码分析过程。”</p><h2 id="形式逻辑-待补充"><a href="#形式逻辑-待补充" class="headerlink" title="形式逻辑[待补充]"></a>形式逻辑[待补充]</h2><p>为什么在编码的部分提形式逻辑呢？</p><hr><p>开始于2019.04.26</p><p>完稿于2019.05.01</p>]]></content>
      
      
      
        <tags>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【简牍提要】信息简史：将思想的力量注入齿轮机械</title>
      <link href="/2019/04/26/Reading-The_Information-CH04/"/>
      <url>/2019/04/26/Reading-The_Information-CH04/</url>
      
        <content type="html"><![CDATA[<p>Charles Babbage与Ada Byron，在蒸汽时代瞥见计算机的才子佳人。</p><a id="more"></a><h2 id="时代背景：数表"><a href="#时代背景：数表" class="headerlink" title="时代背景：数表"></a>时代背景：数表</h2><blockquote><p>埃利·德容古在1762年曾写道：“喔，欣喜若狂的算数家啊！他那么容易满足，既不求锦衣华服，也不求香车宝马。”</p></blockquote><p>德容古本人则以异于常人的热情编纂了三角形数的数表，其以计算准确、精细而臻于完美而为人所称道。</p><p>除去这些“纯粹”的作品，数表也曾有过广泛而实用的实际用途：三角函数表、平方表、立方表、平方根表、倒数表、星历表、利息表……哥伦布就曾因星历表成功脱险。</p><p>虽然大部分数表实际只需要一些公式，但编写数表有着巨大的经济价值。预先计算加上数据存储加上数据检索的成本往往比临时计算的成本来得低。而在当时，“计算员”是个特殊的职业，显示了计算的成本之高。</p><p>17世纪，对数的发明（其发明者是纳皮尔）大大降低了乘法的复杂度，它将乘法转换为加法，给黑暗世界中的计算员们带来了福音。书中对于这项伟大的发明做出了精辟的论述：</p><blockquote><p>在纳皮尔的观念中，存在着一种类比：差之于比，就如同加法至于乘法。这样他的思考从一个维度跨越到了另一个维度，从空间关系跨越到了纯粹的数的关系。通过将这些刻度并排放置，他为计算者找到了一种将乘法转变为加法的实用方法——实质上，这是把一项困难的人物调低为更容易的任务。在某种意义上，这是一种翻译，或一种编码。计算者通过查检对数表，将自然数编码成了对数，而对数表就是码本。在这种新的语言中，计算变得容易了：加法代替了乘法，乘法则代替了求幂。计算完成之后，需要再把结果译回自然数的语言。当然，纳皮尔当时不可能从编码的角度来考虑这个问题。</p></blockquote><p>对数应用广泛，它使得利率的计算成为可能，它也让开普勒凭借更为精确的数据提出了新的观念，从而推动了天文学的发展。</p><h2 id="Charles-Babbage"><a href="#Charles-Babbage" class="headerlink" title="Charles Babbage"></a>Charles Babbage</h2><h3 id="总体印象"><a href="#总体印象" class="headerlink" title="总体印象"></a>总体印象</h3><p>Babbage是个非常难下定义的人，他聪敏过人，有着各个方面的才干，但这些才干很难归到具体的门类中。他绝对称得上是怪才，也是个有趣的人。</p><p>Babbage的兴趣爱好（不完全）：破解密码，开锁，设计灯塔信号系统，观察树木年轮，改善邮政，观察火车，制造大头针……</p><blockquote><p>一个美国人赞颂道：“对于任何会引起其孩童般纯真好奇心的事物，他都渴望探求其中的原理，他甚至会将各种玩具大卸八块以搞清它们如何运作。”</p></blockquote><p>Babbage对数有着狂热的喜爱，他汇编过动物常数表，四处统计家畜的呼吸及心跳，统计了各种语言中双写字母出现的频率，甚至为平面玻璃窗的破裂区分了四百多种原因……他自己也说：</p><blockquote><p>“数有诸多迷人之处，俗人的眼睛无法看见，只有那些可敬的、孜孜以求的艺术之子才能发现。”</p></blockquote><p>虽说Babbage自身有着独到的人格魅力，但他最为世人所知的还是他的差分机。它曾被遗忘，如今又被从历史的遗迹种重拾。差分机，一如Babbage的狂热爱好，和数字息息相关。</p><blockquote><p>之后，Babbage的机器渐渐被人遗忘，在发明史上湮灭无闻。再到后来，它才又被重新发现，其重要意义得到了追认，犹如灯塔在历史长河中熠熠生辉。</p></blockquote><h3 id="青年时代"><a href="#青年时代" class="headerlink" title="青年时代"></a>青年时代</h3><p>除去对机械的爱好外，Babbage亦热爱数学，而在三一学院中失望地发现导师不如自己。在英法交战的拿破仑时代，剑桥的数学相较欧洲大陆已落后不少。尤其牛顿的巨大影响力成了学生们挥之不去的阴影。</p><blockquote><p>然而他们（牛顿、莱布尼茨）各自提出了互不兼容的符号系统，也就是不同的数学语言。而在实际工作中，这种表面上的差异会比实质上的共性更为紧要，毕竟符号和算子才是数学家们天天要面对的。</p></blockquote><p>Babbage也常被语言吸引过去，他也曾尝试发明一种通用语言，但无可避免地受到巨大的阻力而失败了。（因为存储和取值的问题？）</p><blockquote><p>尽管如此，他仍然认为语言是一种人类可以发明出来的东西。在理想情况下，语言应该加以理性化，成为可预测的和机械的，就如同齿轮必须啮合。</p></blockquote><p>Babbage身边多是能与之开怀畅饮或是打惠斯特牌赌每分六便士的朋友。他还搞了个灵异俱乐部，搞了个“精神健全”俱乐部，当然，也有正经的“在身后留下一个更美好的世界”的解析社。</p><p>据Babbage自己的说法，正是在解析社中面对对数表之时，他想到了差分机的可能性。</p><h3 id="差分机"><a href="#差分机" class="headerlink" title="差分机"></a>差分机</h3><p>蒸汽时代驱动力的强大，与计算对数表的繁琐相比，二者简直不是在同一个世纪。为将人类从枯燥中解救出来，Babbage希望将强大的蒸汽之力应用到思考之上。</p><blockquote><p>这时，数就是原料，之后支架滑行、齿轮转动，大脑的工作就这样完成了。</p></blockquote><p>在没有“输入”也没有“输出”概念的时代，已经有了帕斯卡和莱布尼茨的算盘，但它们只是一种被动型的寄存器，而非计算机，不符合Babbage心目中的“自动化”观念。</p><p>当时，鼠标中存在着一些小小的瑕疵，于是出现了勘误，出现了勘误的勘误，又出现了勘误的勘误的勘误，“混乱雪上加霜”。这些都暗示了计算员的不可靠，与“自动化”计算的必要性。</p><p>于是，Babbage设计了差分机，通过差分来程序化且简单地计算高阶的多项式。这在系协商也较容易模拟，但考虑到进位，计算时间就是个不得不纳入考量范围的问题。这里头又有着很多很复杂的东西得考虑。</p><p>不管如何，因为他的个人魅力，因为他广博的学识与深邃的思想，也由于他传奇的经历和有趣的性格，他在人们中取得了信任也取得了肯定（不过主要不是肯定其学术思想）。于是，Babbage在英国的财政大臣中成功圈到了第一桶金。</p><blockquote><p>到了1823年，英国财政部和财政大臣终于也开始对这个发明产生了兴趣。他曾承诺“对数表将如同马铃薯一样便宜，”这样的诱惑他们如何能抵挡？对数表可是能够挽救船只的。就这样，财政部的首脑批准了第一笔一千五百英镑的拨款。</p></blockquote><p>就这样，差分机的工程开始了。但它不可控地变得无比庞大而复杂，要求的拨款也越来越多。与Babbage在社交场上的如鱼得水正相反，差分机进展的举步维艰既使Babbage也是政府人员失去了信心。不过，尽管差分机已被叫停，Babbage的梦想并未终止，因为它早已转变方向，上升到了新的高度。</p><h3 id="分析机"><a href="#分析机" class="headerlink" title="分析机"></a>分析机</h3><p>所谓分析机，实则是一种通用的数学计算机，相较差分机，它的应用范围要广得多。</p><p>在欧洲大陆着手于分析机的工作时，Babbage与Ada展开了密切的合作。在这段合作中，Ada是真正的主导者，尽管她还年轻，尽管Babbage才是社会名流。Ada强调分析机应做的是运算而非计算（形式逻辑？？），她给出了诗意的描述，也设想了实际的应用：计算伯努利数。</p><p>在当时，Ada就提出了<strong>递归</strong>的算法，他们也看到了<strong>变量</strong>的重要性。在当时，他们的语言是store，mill，后来它们变成了内存与cpu。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote><p>的确，Babbage的兴趣广泛，似乎偏离数学甚远。但其实他的诸多兴趣之下还是隐藏着一条主线，只是他的同时代人甚至他自己都没有察觉。他的种种追求无法归入任何一个范畴，更准确地说，任何一个当时已有的范畴。他真正的研究主题是信息，是信息的通信、编码、处理等。</p></blockquote><p>在这条主线下，Babbage通过构造词典来破解密码，从树木年轮上看到自然对历史的编码，看到了“通话管”的未来，也在乘蒸汽机车时意识到通信速度慢于移动速度的危险……</p><p>分析机无疑是个失败的发明，被人们所遗忘，而又成为重新发现的宝藏，予人以时代错位的感觉。</p><blockquote><p>Babbage的机器的初衷是生成数表，但到头来，其现代形式反而导致数表被废弃。Babbage可曾预计到这一点呢？不过，他的确曾好奇未来的人们将会如何利用他的远见。按他的猜测，至少还要再过半个世纪，才会有人再次尝试构造一台通用计算机器。而事实上，过了将近一个世纪，这项工作所必要的技术基础才准备就绪。</p></blockquote><p>Babbage相较Ada更“谦逊”一些也更“好玩”一些。他从字面上理解“知识就是力量”，相信未来的科学将转向更为无形的电力，相信计算科学在未来将大踏步地前进。他也这样写给后人：</p><blockquote><p>如果有人在未被告诫以我的前车之鉴的情况下试图尝试这项了无指望的工作，并通过完全不同的原理或更简化的机械手段而成功实现了一台可与整个数学分析部分相当的机器，那么我不怕把自己的名誉托付给他，因为他肯定会完全理解我当年努力的性质及其成果的价值。</p></blockquote><p>让我们以这句话结束这一节。</p><blockquote><p>在他去世前几年，他曾对一个朋友说，他乐意放弃剩下不管多少可活的时日，只愿能在五个世纪后的未来生活三天。</p></blockquote><h2 id="Ada-Byron"><a href="#Ada-Byron" class="headerlink" title="Ada Byron"></a>Ada Byron</h2><p>Ada是”爱的结晶，——尽管她生于苦难，长于动乱“，他的父亲这样写道。</p><blockquote><p>Ada是个神童，在数学方面天资聪慧，并受到了家庭教师的鼓励。她在绘画和音乐方面也有天赋，极具创造力，但在内心也极为孤独。在十二岁时，她开始着手发明一种飞行工具……</p></blockquote><p>Ada在17岁时与Babbage相识，在差分机试验品的展览会上。</p><blockquote><p>“她对于数学之美和抽象的热情，尽管过去在历任家庭教师那里得到了零星的满足，在这时却变得更加不可抑制。然而，她的热情却无处释放。”</p></blockquote><p>Ada在19岁时嫁给了一位通情达理而前途无量的贵族William King，并在不久后成为伯爵夫人。平日里，她练习竖琴，参加舞会，感受着上流社会的气息还有科技的日新月异。她时常情绪低落，也时常受疾病缠身。她崇拜自己的丈夫，但也将精神生活的一部分分给了Charles Babbage。</p><p>Ada有着近乎狂傲的绝对的自我肯定，她也有着与之相称的不屈的意志与超群的能力。她的函授教师是De Morgan，后者认为Ada的“这般能力”足以使之成为“原创性的数学研究者”。</p><blockquote><p>（以下摘自Ada写给Babbage的信件）</p><p>我的学习方式异于常人，因此我觉得只有一个异于常人的人才能教会我。</p><p>我希望你能记住我，我是指我对于数学的兴趣。</p><p>你知道，我生来就有点哲学家的气质，并且天生是个非常卓越的思考者。</p><p>（以下是分析机时代的信件）</p><p>我的头脑不是凡间之物，这一点时间将会证明。</p><p>没人知道我那瘦小的系统中潜藏着多少尚未被开发但几乎让人惊叹的能量和力量……</p><p>我觉得，你的先见之明和预见所有可能情况（而不论其可能性大小）的能力不及我的一般……</p><p>我不认为，我父亲作为诗人（事实上或原本可能达到）的成就可以与我将要作为分析师（以及玄学家——这两者在我身上并行不悖）的成就相提并论。</p></blockquote><p>Ada所感兴趣的不只是数学。她也会迷上游戏，并思考其通解。她肯定自己无与伦比的想象力，也圣徒般地相信自己肩负着一种莫名的神圣的使命。她的一些洞见独具只眼，而从这些论述来看，她确实称得上一名哲学家。（科学哲学？）</p><blockquote><p>关于想象力，我们已经谈了很多。我们谈论诗人的想象力、艺术家的想象力，诸如此类；但我倾向于认为，总体而言，我们并不十分明白我们究竟在谈论什么……</p><p>我相信自己拥有一套非常独特的特质组和，恰好让我适合成为一名非凡的发现者，去揭示自然隐秘的真相……这个信念很久以来就一直挥之不去，而慢慢地我也已经接受了这一点。</p></blockquote><p>Ada后来成了一名家庭教师，独自研究欧几里得。不过她还是忘怀不了Babbage与他那“所有机器当中的珍宝”。</p><p>Ada最终死于子宫癌，较Babbage更早过世，她被葬于自己父亲的身边。在她知晓自己时日不多后，她这番向母亲写道：</p><blockquote><p>人们常说“<strong>将来之事会提前投下其阴影</strong>，可是它们有时不也会提前投下其<strong>光芒</strong>吗？”</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【简牍提要】边缘人偶记</title>
      <link href="/2019/04/25/Reading-Biography_Of_Xu_Guoqi/"/>
      <url>/2019/04/25/Reading-Biography_Of_Xu_Guoqi/</url>
      
        <content type="html"><![CDATA[<p>之前zwk说他清代文化史的助教很是推崇这本《边缘人偶记》，我便对其也有了一番兴致。不过扫了一眼评论，看到“利己”“精英”一类的词，顿时兴趣大减，觉得作者的三观可能和我有所抵牾。再来，这标题看着不是很怎么样。然而近来又陷入了“有书不想读”的困境，便想着换换口味。恰巧zwk又把他们助教的强烈推荐讲了一遍。草草翻完，总体感觉还是很不错的，虽然里头的不足相当多。</p><a id="more"></a><h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a><strong>缘起</strong></h1><p>之前zwk说他清代文化史的助教很是推崇这本《边缘人偶记》，我便对其也有了一番兴致。不过扫了一眼评论，看到“利己”“精英”一类的词，顿时兴趣大减，觉得作者的三观可能和我有所抵牾。再来，这标题看着不是很怎么样。然而近来又陷入了“有书不想读”的困境，便想着换换口味。恰巧zwk又把他们助教的强烈推荐讲了一遍。草草翻完，总体感觉还是很不错的，虽然里头的不足相当多。</p><h1 id="边缘记"><a href="#边缘记" class="headerlink" title="边缘记"></a><strong>边缘记</strong></h1><p>看到“边缘人偶记”这个题目的时候，我的第一感觉是“边缘/<strong>人偶</strong>/记”，侧重点在“人偶”上，即一种不自由的、难以承受的、为他人所左右的地狱般的生存状态。看着看着才明白，是“<strong>边缘人</strong>/偶记”，作者给自己贴上了边缘人——在国别的边缘、文化的边缘，研究着“边缘化”的课题等等，这样的标签，虽然说得过去，但不是很符合“边缘人”的语义——它强调的是一种无法融入的、孤独无依的状态。</p><p>但孤独的边缘在作者的语境中占的比重非常小。徐国琦并非没有依托，他只是认为自己没有归属，或者说自己对于文化认同有着疑惑。他”自认“国际公民，能接受各样的饮食文化，在各类地方呆过，研究着“边缘”的学问。这里的“边缘”，更多有一种“交集”的意味。在这层意义上，作者站在了一个相当跨越相当融合相当有高度的位置。</p><h1 id="读书记"><a href="#读书记" class="headerlink" title="读书记"></a><strong>读书记</strong></h1><p>这本书的第一部分，于我看来，相当的乏味。作者对于赤贫的、愚昧的农村中自己的童年生活怀有强烈的反感与不满，也正是这强烈的不满驱使他努力求学，以走向外面的世界。尤其是在记读初中、读高中、读本科的部分中，作者的利己色彩与对精英主义的肯定表现得很明显（不过往好了说，这也算是“毫不做作吧”），这看得我十分的难受。（事实上，可能是先入为主的影响吧，第二次看这章对作者的好感多了很多，不过一个作者能通过作品让原本不喜欢自己的人喜欢自己，还是很厉害的）</p><p>但是到了做研究的部分，我又有了眼前一亮的感觉：徐国琦的学术观点相当犀利，他对他人作品的见解很多也都是一阵见血。徐国琦的著作确是可以称得上“边缘”的——它们都是另辟蹊径而能有所发现的作品。而在追寻“文化认同”还有“共有历史”的角度看，其著作的思想也是处于“边缘”的。</p><p>出的五本书，三本讲一战，但角度分别是从华工、整个中国以及亚洲分别切入的；两本讲中国，讲中国和美国的共有历史，讲中国和奥运会的历史。这些研究的角度都偏向国际化而非坚持东西方中心论。这些专著虽然我并未看过，但从其描述看来似乎值得一读。</p><h1 id="人物记"><a href="#人物记" class="headerlink" title="人物记"></a><strong>人物记</strong></h1><p>”师友记“记的是作者身边的学者朋友或是老师，讲了非常多自己的所闻所感，很是生动。（王玉华那章除外）</p><p>“人物记”记的是一些传奇性的而与作者之间来往的前辈。通过其描述，对费正清、霍布斯鲍姆、许地山并不熟悉的读者能够对其传奇人生有一些感性的认识。</p><p>费正清：在学术界有着无与伦比的历史地位，单枪匹马地建立了一个学科，站在改善两国关系的潮头上。</p><p>霍布斯鲍姆：坚定的马克思主义信仰者，长于叙述，在三流学校一鸣惊人。</p><p>许地山：宗教研究者，文学家，其作品对人们在思想上有影响。为港大招揽了人才。</p><h1 id="内自省"><a href="#内自省" class="headerlink" title="内自省"></a><strong>内自省</strong></h1><p>①这本书非常口语化，文章的水平似乎没有徐国琦自己讲的那么好。尤其是评价人物的语段，还有称颂，特别单一。（感觉不是特别有诚意）</p><p>②教书记竟然不讲自己的教学，搞什么呢！结果风格还是和其他章节一样吗。</p><p>③书中穿插着许多对于世事的评议，尤其在关于国内学术风气的方面，还是比较中肯的。但也比较零散。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【浮生掠影】设计思维讨论课 发散思维工作坊</title>
      <link href="/2019/04/18/Design-Workshop-Divergent_Thinking/"/>
      <url>/2019/04/18/Design-Workshop-Divergent_Thinking/</url>
      
        <content type="html"><![CDATA[<p>回形针有多少种用途？</p><a id="more"></a><p><strong>试问：回形针有多少种用途？</strong></p><p>政治：作为外交赠品（工业文明的代表产物，国家现代化进程中的重要见证），联系“回形针外交”</p><p>经济：一般等价物；磨成粉作保健品</p><p>历史：第一手资料</p><p>地理：模拟等高线</p><p>信息：编码，联系“回形针码”和“回语言”</p><p>卫生：掏耳朵、扣指甲</p><p>造型艺术：装饰；摆成其他形状</p><p>音乐：敲击</p><p>军事：戳人眼球（恐怖游戏里可以搞搞这种套路，效果可能比剪刀要好一些）</p><p>物理：油罐车防静电；降温；水果电池</p><p>化学：（铁）湿法炼铜，置换氢气，催化剂，等等</p><p>……</p><hr><p>从回形针本身性质出发，更能得到的是下面若干项；</p><p>而从“用途”出发，联系不同的学科，则可得到上面的若干项，至少我感觉更有趣一些。</p><p>这里可以采取双向的思路。</p><p>具体到一个在一个小领域中回形针有何用途，这也是一个思维发散的过程，可以递归地重复上面的步骤，直至得到“原子化”的难以再细分下去的概念，这时候就可以开始收敛思维了。（dfs到最后一层而后返回）</p><p>但还有很多清奇的思路并不好归类，如给轮胎放气、做书签等。正因其难以穷举，能够产生富于创造性的结果，思维发散才这样的有趣。</p><hr><p>2019年3月28日。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【浮生掠影】2019 浙大校赛 BY NESS @ hash</title>
      <link href="/2019/04/14/Competition-TuSimple_2019/"/>
      <url>/2019/04/14/Competition-TuSimple_2019/</url>
      
        <content type="html"><![CDATA[<p>这是今年打的第一场比赛，成绩咱就不管了，总体玩的还是比较开心的。感觉光阴没有虚度，感觉前方还有着希望，而这就够了。</p><p>作为一次经历，一次体验，打比赛在生命中自然是有其价值的，它是一个节点，串起了过往无数日夜的辛劳准备与或狂喜或迷惘的期望。它不一定是结果，也不代表旅程的结束，以我当前的追求来看。它只是一个中点，是生活的增味剂，是另一种形式的酒与诗歌。无用，然而有趣。</p><p>说起比赛，首先想到的还是以往略显单调但也有滋有味的高中生活。想起以前翘课出去打NOIP，参加清华的不知什么考试，还有寒暑假在杭州在上海在环中的日日夜夜。关键并不在成就与从中得到的对自我的肯定，虽说这也是较重要的一环。我更喜欢的是合法翘课的感觉，喜欢的是纯粹出去玩这样一种心境。有一种逃离的快感，叛逆的甜蜜。而我所逃离的是什么呢？是日常？是普通？抑或无趣？在这层意义上，今天我仍然生活在高中时代的心理状态中。</p><a id="more"></a><h1 id="随想"><a href="#随想" class="headerlink" title="随想"></a><strong>随想</strong></h1><p>这是今年打的第一场比赛，成绩咱就不管了，总体玩的还是比较开心的。感觉光阴没有虚度，感觉前方还有着希望，而这就够了。</p><p>作为一次经历，一次体验，打比赛在生命中自然是有其价值的，它是一个节点，串起了过往无数日夜的辛劳准备与或狂喜或迷惘的期望。它不一定是结果，也不代表旅程的结束，以我当前的追求来看。它只是一个中点，是生活的增味剂，是另一种形式的酒与诗歌。无用，然而有趣。</p><p>说起比赛，首先想到的还是以往略显单调但也有滋有味的高中生活。想起以前翘课出去打NOIP，参加清华的不知什么考试，还有寒暑假在杭州在上海在环中的日日夜夜。关键并不在成就与从中得到的对自我的肯定，虽说这也是较重要的一环。我更喜欢的是合法翘课的感觉，喜欢的是纯粹出去玩这样一种心境。有一种逃离的快感，叛逆的甜蜜。而我所逃离的是什么呢？是日常？是普通？抑或无趣？<strong>在这层意义上，今天我仍然生活在高中时代的心理状态中。</strong></p><h1 id="热身赛"><a href="#热身赛" class="headerlink" title="热身赛"></a><strong>热身赛</strong></h1><p>日程的话，早上有个热身赛，九点半开始。在此之前七点半至九点是所谓检录。下午一点正式开赛，打四个小时，直至五点。这样看下来，大半天都被打掉了。晚上其实也主要在想这回事，会有“如果这题做出来就没有遗憾啦”，诸如此类的想法。于是这约莫就是这一天的主旋律了。原先zc嫌时间太久想翘掉的，但见xn没翘也就没翘了。谢天谢地，如果他们两位翘掉了估计我就只能<del>对着屏幕两行泪了</del>跟着翘了。</p><p>虽说这是校赛，但我们对待得真挺随便。没碰代码一个月的我也就随便搞了点板子，没碰代码一个月的zc赛前一天开始调环境。赛前一个月基本完全没准备。赛前一天才开始和xn交流板子行不行。有些过于娱乐了？毕竟经验过少，但毫不慌张并调好心态或许比瞎准备一通发现自己方向错了来得有益，于我看来。</p><p>早上的热身赛真的挺热身，zc花了一大半时间在配环境：sublime、visual studio、code，一个个都试过去了，花了好长时间嘞。还下了大数的模板，也测试了一下。然而下午居然重启电脑了，题目也收回去了！<del>我妹子还没认全呢555</del></p><p>里面有个C题很好玩。就是有十二张图片（ACG作品中的<del>妹子</del>人物），二十四个名字，把名字和图片对应，输出，没有输入。名字都是假名表示的，图片也都是同人画师的作品，搜图难度不小。估计是颜色的问题，不管什么百度搜图谷歌搜图效果都不能看。在p站上查画师效率也不是很高，于是只得慢慢搜名字（<del>一个一个妹子认识过去</del>）。有点烦的一点就是有些名字搜不到，不管在萌百上还是其他网站上，这就会让人比较泄气，怀疑是否漏了谁，从而对答案正确性与自己的努力产生怀疑。搜了一些名字，发现自己御宅指数还真是低，敏感性也比较差，看到”Tohsaka Rin“时脑海中完全没有图象。东方的人物我也认不全。这可能还跟接触的体系有关系吧，我是没啃过生肉的，知道的东西也都很表层，在欣赏ACG作品缺乏联系观，也缺乏对<del>妹子萌点</del>人物特征的宏观认识，对于作画等等的认识也实在是肤浅。想想自己只是个假的肥宅，有些假的难受。</p><p>A题的话，让你判断一个数列是不是peak sequence，简单模拟即可。但我忘掉了和peak sequence相关的知识欸。我好弱啊。</p><p>D题是顺序买书，已知书的总数、每本书的价格和买的本数，买书的策略是贪心，求最大携带的钱数。一开始想能否二分答案，但想想不行，具体哪里不行就讲不清了……之后想到贪心的思路：把前k本都买下来，剩下的钱再不足买剩下任何一本书，那么这个钱数是符合要求的，而且超过它就不符合要求了，可行！就是不知道这个思路该置于知识网络的哪个位置。我对于算法的认识，在微观层面，还是非常容易搞混且相当想当然的，这是一个得改的毛病。</p><p>B题是给出一个括号序列，给出了一套生成序列的规则，让你求第k个序列从第l项到第r项有个多少‘(’。这题当时没人提交（估计都在查C题吧），我初步想法是这样的：序列是无穷的，故要在一个周期内界定它，而后面的序列和前面的序列又可以通过set判重来得到”序列的周期“（二维的概念啊，有意思）。总之就是有点恶心的模拟了，加上模乱搞不知行不行得通……无法实践验证想法，就不细想了。</p><h1 id="比赛本身"><a href="#比赛本身" class="headerlink" title="比赛本身"></a><strong>比赛本身</strong></h1><p>想做题的话，戳<a href="http://acm.zju.edu.cn/onlinejudge/searchProblem.do?contestId=1&amp;titlefrom=0&amp;authorfrom=0&amp;sourcefrom=0&amp;query=The+19th+Zhejiang+University+Programming+Contest+Sponsored+by+TuSimple" target="_blank" rel="noopener">这里</a>qwq。</p><p>比赛开始时还是有些紧张的，中午睡得也不咋样，总之不是特别有状态。开赛后首先看的是B题，而xn在看A题，zc在配环境。B题定义了一类“偶素数”，还有“偶合数”，让求给定的“偶阶乘”最多能拆分为多少个“偶素数”，本质上应该是$2^s || n!, s = \sum\limits_{i = 1}^ \infty \lfloor \dfrac{n}{2^i} \rfloor$的变形。但是数据量级是$10^{1000}$，不写大数不行。于是zc和xn讨论G的时候，我一直在打板子。这个板子是半年前的，记得当时减法没搞，就没管，不想除法里需用到减法，一下就慌起来了。还有大数比较等等也都没有写，心情就比较地烦躁。中间想到用java写，或者写二进制的大数，但都碰上了问题。临结束时瞎写了一通，不知哪儿出问题了。这题也便不了了之了。想来还是有些遗憾。</p><p>除去B题，我第二个看的是J题，当时已有队伍提交了。这题讲的是给定正数n，让找满足$x + n = y$的一组合数x，y，任意输出一组即可。我当时拍脑袋想想x=2n，y=3n不是满足条件嘛，但觉得这样过于简单了。和xn交流后也没发现问题，但交上去就是一个明亮的WA。为什么呢？是流输入的问题么？总之不会是数据范围的问题吧。搁了一会儿后，xn测试时候来了个“1”，输出“2 3”。很明显，错掉了。于是我只能尴尬地换成x=8n，y=9n，这才搞定。此时已经过去45分钟了。</p><p>不光J题开始没过去，E题一开始也卡在这了。背景就不讲了，总之水题一道，但水水的我们过也过不去，就比较烦。zc花了一些力气把dev调教对，然后测试了自己构造的数据没发现什么问题。此前有交流，此后有深思，卡了好一会儿呢。最后又是xndl敏锐地察觉到虽然输入是在$10^9$，即int范围内的，然而我们有用求和，之后规模可能会超，得换long long。果不其然，改了数据类型后顺利拿到了一血。</p><p>后面我看的题是I，涉及到逆元、平均数、方差、选子集，极端数据还达到了恐怖如$2^{40}$的规模。想来不推结论肯定TLE的，但有何结论呢？从没做过跟方差有关的题，对于子集也不知如何高效处理，只能是对着题干空着急，发呆。简单化简了一下方差，搞出来一个线代课上好像曾见过的矩阵，忽然又想道”正定二次型“这个名词，可又死活不知道接下去怎么办了。这题也就弃了。</p><p>其他题我基本没看了，状态很糟。zc主要是搞C，xn主要在搞A。C和A我都没看，听他们说前者是简单模拟，后者用搜索或许可以。然而都TLE掉了。于是zc又给C剪枝，剪一会，交一遍，TLE，然后略有所思又想出来一个剪枝，我打一会儿大数就得起来一下给大佬让座，很是有趣~xn的A也优化了一遍又一遍，最后想试试卡时，在语法上又折腾了老半天，可最后还是没弄出WA。我差不多在两个小时后就没有认真打的念头了。看看人家碗里的气球，互膜互黑，倒也不错。</p><p>于是只能凄凉地拎着三个气球回来了，其中一个被吹走了，一个气放掉了，还有个踩爆了。看着人家手中气球满得都溢出了，不由得感叹自己菜得就像被人家踩爆的气球，何其可怜，多么无助。</p><p>早上刷名单的时候发现wyh也参赛了，寻思人家肯定是solo的。最后在榜上果然赫赫有名，着实是厉害。膜了人家一波，好不愉快。</p><h1 id="现场赛与网络赛"><a href="#现场赛与网络赛" class="headerlink" title="现场赛与网络赛"></a><strong>现场赛与网络赛</strong></h1><p>比赛的形式在很大程度上对发挥会有影响。一直都不喜欢去机房，因为那边的环境，因为那里的键盘。对于这些我都很不习惯。讨厌配环境，讨厌看见稀奇古怪的错误，讨厌程序正确却跑不起来的无力感。<strong>在这类问题上，我一直不愿意走出自己的舒适区。</strong></p><p>此外，现场赛有很多额外的限制，比如不能查东西。查询一般只在对事物有一定认识时才会奏效。查算法一般都是无效的举动。查语法更频繁些，因为这些东西我记不住，而且我觉得它没啥思维深度。查到原题查到相关算法还是少数，是值得高兴的事情，比如之前的趣味C，比如寒假的网络赛中那个让我告别0AC的组合数取模的板子。</p><p>回来今天来。中间，大数的板子搞不出来，zc想用java试一试，但是在语法上就碰到问题了。连大数初始化都搞不起来，更不用谈运算了。事后这些东西一查便知，但当时就是搞不起来。最后xn想卡时，但#include<time.h>之后还是懵了好一会儿，直到在书上查到其用法。（虽然最后还是没有WAhhh）</time.h></p><p>开卷虽然看上去比闭卷更为轻松，但若是对知识体系没有明确的认识，往往只能又慌又无助地乱翻书，效率非常低下。故，在这样的限制下我们当怎么做呢？首先还是要搞清楚自己受了什么样的限制，提前做好准备，有所对策，才不至于在事后后悔。虽然在本次比赛我们也没有可以后悔的理由。</p><p>机房的键盘，真心是叫人难受，敲起来又慢，还没有快感。不过即便是如此，我也还是有需要反省的地方。打字容易出错，快捷键用得还不顺（尤其ctrl不会用），等等。这些相对思维是外部的事物，但做好了能起增益效果。一来是需要有提升的意识，意识到自己和键盘和自然语言间的羁绊还不够深；二来是要有科学的方法，归纳出哪些快捷键是能够提升效率的，归纳出自己在打什么词的时候特别容易出错，在此基础上有所提升。</p><p>最后是环境，这个东西真心无聊，我尤其讨厌。但这是很常见的问题，尽管我并不“喜欢”它，我仍然“需要”解决问题的能力。环境不光是指机器上编译、链接、运行等步骤，还关乎对于软件的熟悉程度。视图、快捷键，等等。一个视图没调出来，尤其对状态有一定影响，因为它将原本连贯的思路与预期切断了。不喜欢用dev，VC++，看着那些复杂的条条框框看得很难受，这些软件有做到以人为本么？作为普通用户（然而，它们本就不是为普通用户设计的），我觉得开发者，是有所不足的。（但是，今天仍有许多学校和教师鼓励使用这些老旧的产品，他们是否需要反思呢？）可既然大环境如此，我也便只能熟悉其架构而无法奢谈转变。如何熟悉呢？或许我需要在机房找找答案。</p><h1 id="合作与对抗"><a href="#合作与对抗" class="headerlink" title="合作与对抗"></a><strong>合作与对抗</strong></h1><p>程序设计的竞赛大抵有两类，一类时段较长，如各类开发比赛，动辄几个月的。另一类时段很短，ICPC是一个，还有像黑客马拉松呀，Game Jam啊，它们关注的是爆发力，竞技性更强些。zc说前者更能体现与赛者的能力，不过后者往往更加紧张刺激一些，打得有趣，看榜也有趣<del>，看别人满桌子气球的样子更有趣</del>。</p><p>而且往往来说呢，第一类比赛的“合作性”会更强些，而后一类的“对抗性”则占了上风。作为一名蒟蒻，我一向是喜欢“通力合作”的，高中时候每回数竞的模拟考都会参与大家的讨论。记得打NOIP前报了个不知什么网络赛，然后就和蒋哥一起合作了。题目今天不记得了，当时感觉和自己的能力还是在一个数量级内的，做得比较有成就感。和蒋哥分享看法，给他看自己的代码然后收到肯定的信号，一起感叹最后一个有多毒瘤。真的很好玩，很有意思，很开心。今天想来，还是宝贵的记忆呢。</p><p>NOIP倒是合作不了了，也就考完后简单谈了谈感受，谈了谈这个输出格式之恶心，谈了谈试卷对于ds之偏爱，其实其他“有意思”的考试考完也是这样的。坐着大巴，背着待会语文考试的答案，拖着辘辘饥肠，等待着原应是KFC结果是“江西小炒”的晚饭，回到期中考的轨道中。<strong>没有若有所失的感觉，只是在平静中，一个阶段已经结束了。</strong></p><p>ICPC倒是在对抗中也体现着合作的。有幸我们还能够交流，能够发现一些隐蔽的问题，也能得到更广的视野，在一定程度上。但是，交流也并不是件简单的事情，它甚至并不“自然”。不过，这些已经是下个标题的主题了。</p><h1 id="沉默与交流"><a href="#沉默与交流" class="headerlink" title="沉默与交流"></a><strong>沉默与交流</strong></h1><p>debug，往往来说，都是件孤独的事情，甚至可以说是反人性的。但是开题并不是孤独的，它代表着希望，虽然希望时常会转化为绝望。为了让希望成为希望，我们需要更全面更深入而非想当然的思考，在一定程度上，交流能做到这点。可交流本身也并不容易。先回顾一下当时吧。</p><p>我们开始的策略还是得当的，不同的人开不同的题，但之后的步骤，我认为我做得并不好。我有B题的思路，但我完全无法将其表述给队友，为什么？在向xn介绍J题的思路时，我用的语气是较为肯定的，绝对的，“2n肯定是合数”，这样的交流有效吗？后来xn开了A题，zc开了C题，我只“大致地”听了听他们的思路，而未对细节有深入的思考。非常失败。</p><p>交流的一方面是传递自己的想法，在这个过程中要尽量避免隐蔽的想当然的想法；另一方面，交流是关于聆听的，而非“听见”：对方的思路是如何展开的？他有什么可能的错误？他没提到什么？</p><p>在交流时，不应是你一句我一句并且交谈没有中心。二或三人交谈时，一方当作为领导者，把握着对话的小主题、中心问题。其他人需要发散思维的广度。提出尽可能多的解决方案，并对其做出一定深度的拓展。然后是围绕可行的方案收敛思维。如是反复。</p><p>对这个话题想的还不多，也没什么条理，先放着吧。</p><h1 id="补题时间"><a href="#补题时间" class="headerlink" title="补题时间"></a><strong>补题时间</strong></h1><p>弱鸡的我的代码在<a href="https://github.com/NessOffice/Sync_Code/tree/master/history/zju2019_SchoolMatch" target="_blank" rel="noopener">这里</a>QAQ，仅供参考。</p><h2 id="A"><a href="#A" class="headerlink" title="A"></a><strong>A</strong></h2><p>比赛时一直被数学题搞得状态不佳，A和C都没看。结果A是2019.04.21AC的，而C是2019.04.20AC的，放了好几天嘞。</p><p>A的大意就是给定一组男人一组女人，每个人都有身高和偏好，其中身高各不相同，偏好为0表示只和比ta矮的人匹配，偏好为1表示只和比ta高的人匹配。问什么样的匹配方案能使总配对数最高。</p><p>看上去有点像什么二分图匹配，也好像可以搜索解决，于是我就不大想做……认真看了看，感觉贪心可以搞，那就试试贪心吧！</p><p>先把所有人按身高排序，然后顺序检索。每时每刻检索到人都是“可匹配的人”中最矮的，如果ta的偏好是0，就可以把ta跳过了；如果ta偏好是1，看看后面第一个和ta匹配的人，配对之。（容易证明，这样的贪心保证了全局最优性，证明的话，考虑如果不是贪心的策略，就替换吧）这里用last[0]与last[1]分别维护上次贪心得到的男/女性的位置，即可保证检索与匹配的复杂度是O(n)，加上排序，O(nlogn)，可行。</p><p>但是自己写的时候有点想当然，last只开了一个。题目里的数据又特别小，没出问题，于是百WA不得其解，之后将自己的思路表述出来才发现这一问题，从中可见有效交流的重要性。</p><h2 id="B"><a href="#B" class="headerlink" title="B"></a><strong>B</strong></h2><p>在4月的16号早上，我开始调整自己的大数模板。先是写了个python的数据生成器，并加了些自己构造的数据，然后是用python调出用以对拍的程序，再是重构（debug_fc.bat，整合了debug_BigNum_py.py等），使这个板子的结构更加清晰。之后加减乘除均通过了测试。在此之后，开始上B的代码，碰到段错误，之后是TLE。</p><p>看了看别人用python写的程序，可谓如梦初醒！我的思路是{ans += n / two;two *= 2;}，但是{n /= 2;ans += n;}完全能实现等价的操作。在数学上，二者是等价的；可是两者在计算上的复杂度并不等价！尤其我的大数除大数中用减法模拟取模或许会占掉很长的时间，而我局限在前一种想法中，没有拓宽思路，这十足是个教训了！另外，我没有在纸上继续推结论，而只是在脑袋里想想，这或许也是个不好但也难改的习惯吧。</p><h2 id="C"><a href="#C" class="headerlink" title="C"></a><strong>C</strong></h2><p>题意的话，是给定机器人的行为模式还有房间的结构，求机器人运行k步后捡了多少垃圾。具体不表。</p><p>初看似乎是模拟题，但是k可以高达10e18次，所以复杂度要么是min(f(n, m), k)，要么是O(k^1/3)这类。后者貌似在组和题里更有可能出现，我们就考虑前者吧，由剪枝降低复杂度。但是这个枝怎么减呢？</p><p>题目中的x由中间及其周边五点的值唯一确定，故这五点值若不改变而机器人停留在原位（即机器人什么都没做），它必将循环地无所作为。直接模拟k = 10e18的话，很大一部分时间都是耗在这上面的，所以这种枝一定得剪。</p><p>但光剪徘徊在原地的枝还不够。原地徘徊是一种自环，其他的路径也可能成环（比如，(2, 2) -&gt; (2, 3) -&gt; (2, 2)），要把这些也剪掉。怎么判断走的确实是环（即后面的路径与前面的循环）呢？只要看再走到同一点时ans有无改变即可：若无，则机器人从该点返回该点的路径中没有捡垃圾，也就是它接下来走的路将与此前完全相同。这样，剪枝就分析好了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(vis, <span class="number">-1</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">while</span>(k--)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[a][b] == ans) <span class="keyword">break</span>;</span><br><span class="line">    vis[a][b] = ans;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（但是这么漂亮的东西并不是自己想的而是抄来的QAQ）我一开始是用set判a, b, cmd的三元组，发现不对，之后换成map加上经过一点的次数。zc的方法是在捡垃圾里面加上{vis[a] [b] = vis[a-1] [b] = … = 0;}，都WA了。看到一排的WA心情就会发生微妙的改变，要么是变佛，要么是不搞出来不睡觉这样。我是挺佛的，看看人家的剪枝这么优雅就把自己的给丢了，谁知道哪个神仙地方出了bug，这题也不好拿数据对拍。今天想想，光看“该点”的状态还是不够的，因为在路径中间捡完垃圾回到原点，后面仍可能走新的路径，故而要用更“全局”的东西来记录状态，我们应当是错在这点上。</p><p>这题的复杂度我还不会分析。若n、m取最大值，机器人至多在多少步后退出？我还没有想明白。</p><p>下面是D题，题干就不念了，没有输入，要求给出足够好的机器人捡垃圾策略。AC条件为在给定步数内，给定多组随机数据，平均捡垃圾率足够高。</p><p>随便分析了一下，看三进制下算出来的x的值。首位不会为1，所以1打头的都可以填I（同理01111这些也是不可能的）；首位为2的时候yy一下，都填P。然后首位为0时开始转移，依据旁边的点的结构，旁边的点会呈现出什么样的结构呢？</p><p>然后我就不知道了，就咕咕咕啦。</p><h2 id="G"><a href="#G" class="headerlink" title="G"></a><strong>G</strong></h2><p>题目本身比较简单，关键点在于将正负分开来考虑，然后每次贪心即可，详情参考代码。</p><p>问题是为什么会想到将正负分开来考虑呢？</p><h2 id="I"><a href="#I" class="headerlink" title="I"></a><strong>I</strong></h2><p>题意：给定n个点及其权w，给定m组约束关系（即有m对点不能同时选取），令x为$\prod w_i, i \in S$，S为n个点中任选若干点的满足约束关系的子集。问所有x的方差对1e9+7取模的结果。</p><p>题目中n最高达40。这个数量级下直接模拟（2^40）稳超时的。如何压缩时间呢？我一开始是觉得这里头会有什么微妙的数学结论的，就随便推了推，也就把方差展开了一下，结果并没有什么用。</p><p><del>康了康网友的题解</del>意外地发现并查集可以用来解决选子集的问题！考虑这样的数据，n=3，m=0。这时候共有8种选取方式。而8=2^3，我们可以用这样的代码来计算所有x的和及所有的选取方案：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    sum_x = sum_x * w[i] % MOD;</span><br><span class="line">    num_total = num_total * <span class="number">2</span> % MOD;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的思路像不像生成函数？$\sum x = \prod(1 + w[i])$。”正常“的dfs是把右式中每一项列出来计算，而这里我们是注意到了这个式子本身，从而将右边的式子逐项计算，大大减少了计算复杂度！从O(2^n)到O(n)，这是怎样的突破呀！</p><p>上面的例子是m=0的，如果有约束条件呢？我们就用并查集，看看哪些项可能存在关联，把他们放到一个集子里（这样，集子与集子之间就是相互独立的，可以像前面一样运用乘法法则啦！），前面的方法也要改写成这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(LL i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].size() == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">    temp_x = temp_num = <span class="number">0</span>;</span><br><span class="line">    dfs(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    sum_x = sum_x * temp_x % MOD;</span><br><span class="line">    num_total = num_total * temp_num % MOD;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tree[i]储存”可能存在关联“的元素，tree[i].size() == 0就表示这个元素被并到其他集子里去所以不需要检索了。dfs是暴力搜索在一个集子里的x的总和和可能的子集数，记作temp_x与temp_num。说到这里，核心的元素应该都阐释清楚了，具体部分可以看代码。最后的ans的计算公式是将方差化简所得到的，此处不表。dfs选子集是通过位运算进行的，此处也不表。模运算中的技巧如求逆元等同样不表。</p><p>这样的代码能应付这题了，下面我们来看看复杂度吧：上面我们对复杂度的认识还只是较为粗浅的，只考虑了一种情况。但并查集真的能在任意情况下对算法起到优化作用吗？考虑下面这组数据：n=4，m=3，约束关系为(1, 2)，(1, 3)，(1, 4)。把它推广下去，则算法的复杂度还是O(2^n)！</p><p>聪明的读者想必注意到了：在并查集内部，其他数都还是没有关联的，能否将之分配到新的集子中呢？若行，则这样的迭代要如何进行呢？对此我尚未想明白，读者诸君若有想法，欢迎联系，共同探讨。</p><p>总结一下经验教训吧：</p><p>①没有想到在模的意义下处理ave、ans（我真傻，真的，我单知道有理数运算可行；我不知道在模的意义下更方便处理），从而无处着手。</p><p>②没有想到存储sum_x2，sum_x来直接得到ans的值，但这应该是小问题，反映的更多是我的经验不足。</p><p>③MOD的处理，对每一个运算都要想是否需要取模，是否为负，特别是读入的时候。</p><p>④1和1ll不是同一个东西！这谁debug出来呀！</p><h2 id="J"><a href="#J" class="headerlink" title="J"></a><strong>J</strong></h2><p>观察了一下其他队伍的情况，相当多的队都是直接AC或是WA一发后在2-5分钟后就能调AC的，少量队伍调了30分钟乃至3小时。相比之下我们的20分钟（中间还放了一放）还是相对顺利的。但是对于边界数据，我的觉察程度还不够敏锐。</p><p>其他题还没补，先放放好了。</p><hr><p>初写于2019.04.14</p><p>完稿于2019.04.25</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【简牍提要】信息简史：两本字典</title>
      <link href="/2019/03/28/Reading-The_Information-CH03/"/>
      <url>/2019/03/28/Reading-The_Information-CH03/</url>
      
        <content type="html"><![CDATA[<p>这章字面上讲的是具体的字典，但实际也是在讲抽象的词汇，故本章和上一章在逻辑上的关联是比较强的。从口语到书面语，文字量出现了可观的增长，故而为其做出划分是有必要的。词典将文字做了尽可能完备的记录，以便能确定语言的“标准”。</p><p>词典为文字的持久性提供了正式认定，它表明一个字词的意义来自于其他的字词。这意味着所有的字词聚集到了一起而形成了一种互相关联的结构（图），它们相互定义。</p><p>然而，文字也是时刻在发生着改变，如何从这不确定性中确定权威，这是词典编纂者的一大难处。</p><a id="more"></a><p>副标题：我们文字的<strong>不确定性</strong>及我们拼写的<strong>随意性</strong></p><p>这章字面上讲的是具体的字典，但实际也是在讲抽象的词汇，故本章和上一章在逻辑上的关联是比较强的。从口语到书面语，文字量出现了可观的增长，故而为其做出划分是有必要的。词典将文字做了尽可能完备的记录，以便能确定语言的“标准”。</p><p>词典为文字的持久性提供了正式认定，它表明一个字词的意义来自于其他的字词。这意味着所有的字词聚集到了一起而形成了一种互相关联的结构（图），它们相互定义。</p><p>然而，文字也是时刻在发生着改变，如何从这不确定性中确定权威，这是词典编纂者的一大难处。</p><h2 id="字典诞生的条件"><a href="#字典诞生的条件" class="headerlink" title="字典诞生的条件"></a><strong>字典诞生的条件</strong></h2><p>印刷业、商业、交通、语言等等方面的快速发展，呼唤着语言的“标准化”。这种需求是词典诞生的原因。</p><h3 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h3><p>考德里的《字母排表》是信息史上的一座里程碑，但遗憾的是人们对于作者几乎一无所知，甚至连名字都拼不对。关于拼写这件事，书中提到：</p><blockquote><p>随着印刷书的出现和普及，人们逐渐产生了这样一种感觉，即单词的书写形式<strong>理应是</strong>确定的。</p></blockquote><h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><p>（英语）字典诞生的另一个原因和英语本身的特点相关。</p><p>英语是当时的世界上已是多变，多态而多源的。日耳曼民族、基督教传教士、法国对英语的影响接踵而至。很明显的例子就是日耳曼语中的cow，pig，ox与法语中的beef，pork，mutton。中世纪以来英语特点更是如此，对此也有知识分子持不满态度。</p><blockquote><p>而随着知识分子开始有意识地从拉丁语和希腊语中借用单词来表达英语中原先没有的概念，外来词的数量越来越多。考德里对这种做法感到不悦，他抱怨道：“有些人对于外国化的英语趋之若鹜，却把他们母亲的语言丢到九霄云外。”</p></blockquote><h3 id="人物"><a href="#人物" class="headerlink" title="人物"></a>人物</h3><p>谈及考德里，一下是他的个人简介。</p><p>同情清教的牧师，宣扬平等思想，受教会的排挤。他长期致力于搜集单词，曾出版过指南性著作，在1604年出版了他的简明词汇表。</p><p>致力于维护英语的简洁性到了顽固的地步，重视对常见词的运用，以便受教者能听懂，同时反对英语的外国化。</p><h2 id="字典使用的排序"><a href="#字典使用的排序" class="headerlink" title="字典使用的排序"></a><strong>字典使用的排序</strong></h2><h3 id="字典序"><a href="#字典序" class="headerlink" title="字典序"></a>字典序</h3><p>关于字典序，这种古老而现代的排序方式，书中有这样的论述：</p><blockquote><p>但即便在当时，这种机制在人们看来是不自然的，因为它迫使读者将信息从单词的意义中剥离出来，将单词严格地是为字符串，集中精力于单词的字母组合上。</p></blockquote><p>但当人们接受这种排序方式之后，情况便不一样了。</p><blockquote><p>这样做的效率惊人，因为这种机制可以很容易地扩展到任意规模，并且宏观结构和微观结构一模一样。一个人只要掌握了字母表顺序，就可以丝毫不差地在包含了无论是一千个还是一百万个单词的列表中定位到任意条目，而且在查找过程中无需了解有关单词的意义。</p></blockquote><p>书中还有个巧妙的类比。</p><blockquote><p>从按字母表顺序排列的角度看，单词无非就是一枚枚硬币，可以将其分别投入不同的投币口。</p></blockquote><p>事实上，首份按照字母表编排的目录直至1613年才被制作出来。（但我对印刷的历史并无概念所以不知道这意味着什么）</p><h3 id="“本质序”"><a href="#“本质序”" class="headerlink" title="“本质序”"></a>“本质序”</h3><p>性质接近字典的《尔雅》按照意义将其条目归为不同的主题，埃及人与阿拉伯人则将单词按哲学或教育原则加以组织，对此，作者有言：</p><blockquote><p>这些列表组织的其实不是单词本身，而是整个世界，也就是单词所代表的事物。</p></blockquote><p>莱布尼茨明确区分了这两种排列方式：前者从词到物，而后者从物到词。</p><h2 id="字典面临的难题：意义"><a href="#字典面临的难题：意义" class="headerlink" title="字典面临的难题：意义"></a><strong>字典面临的难题：意义</strong></h2><h3 id="字典释义"><a href="#字典释义" class="headerlink" title="字典释义"></a>字典释义</h3><p>为语言解释意义并不总是件容易的事情，因为这件事本身也要借助语言。</p><blockquote><p>双语词典的目的比单语词典的更为明确，毕竟将拉丁语转化成英语有其价值，而将英语翻译成英语似乎就难以理解了。然而在这里，释义是关键所在。</p><p>我们可以明显看出，他（考德里）在着手编写释义时时心怀警惕的，对于这些释义的可靠性他也并不十分确信。意义甚至比拼写更善变。</p></blockquote><p>简单的释义如同义或是从属关系（a kind of），但有的词的意思很复杂，如vapor，需要运用“三角定义法”。</p><blockquote><p>但仅仅用一个词解释另一个词，不论是同一关系还是种属关系，对于词典编纂者来说，还远远不够。一种词语中单词之间的关系错综复杂(chaos)，这种线性的解释方法根本无法完全应付。</p></blockquote><p>还有其他的难点：抽象单词。</p><blockquote><p>而对于其他表示概念和抽象的单词，因其与感性认识距离更远，考德里需要另寻别的解释方法。他逐渐摸索出了一种方法，即以平实而尽量精炼的语言描述给他的读者。我们可以从中看到他的为难之处，一方面他既要理解某些单词，另一方面还要将他的理解表达出来。</p></blockquote><p>最为棘手的可能是科学中的技术名词。（即便在今日，对它们的解释仍是相当困难的，因为涉及的是不同的语言体系）</p><p>其他的问题也很多，不仅限于单词本身。</p><blockquote><p>不仅是单词，知识也在不断变化，而语言也在时刻进行自我反思。因此，即便在考德里从库特和托马斯哪里照抄东西的时候，从根本上说，他还是在孤军奋战，并没有任何权威可供他咨询。</p></blockquote><p>词典与逻辑也存在着密切的关系：</p><blockquote><p>这时字词必须被当作字词来看待，不同于所代表的事物，代表的只能是其他字词。在20世纪，随着逻辑学的深入发展，这种循环定义的潜在可能性就可谓了一个问题。维特根斯坦就抱怨道……这呼应了三个世纪前牛顿的不满，只是现在的问题更为复杂。</p></blockquote><h3 id="其他释义"><a href="#其他释义" class="headerlink" title="其他释义"></a>其他释义</h3><p>除去编纂字典需要确认意义，推动科学的发展同样需要将单词与意义连接起来。</p><blockquote><p>在当时，科学作为一种探寻自然界及其规律的社会制度还尚未出现，但这时的自然哲学家们已经开始产生对于字句的本质及其意义的特殊兴趣。他们需要比已有字词更贴切的用语。</p></blockquote><p>伽利略发现太阳黑子后首先意识到这里存在一个语言问题（人们一直以来称太阳为“最纯净最清澈之物”），名实不符对思想的冲击。（今天的很多历史遗留也都是错误的，如“阿拉伯数字”这个名头）</p><p>牛顿在开始建筑力学大厦的时候则是使用了障眼法：不去定义时间、空间这些“众所周知”的概念，然而定义它们是他的目的所在。选择“质量”这个词也费了一番功夫，正如书中所说：</p><blockquote><p>可见，没有一个恰当的用语，他就寸步难行。</p></blockquote><h2 id="字典编纂与其中的难题"><a href="#字典编纂与其中的难题" class="headerlink" title="字典编纂与其中的难题"></a><strong>字典编纂与其中的难题</strong></h2><h3 id="早先的字典"><a href="#早先的字典" class="headerlink" title="早先的字典"></a>早先的字典</h3><p>从1613年的考德里，到1616年的布洛卡（他出版了《英语释讲》，较《字母排表》词汇更多），到1656年的布朗特，编写者的认识在不断深化。</p><blockquote><p>他（布朗特）好像已经意识到，自己瞄准的是个活动靶。他在前言中写道，词典编纂者的“工作没有尽头，因为我们的英语具有每天都在变的特性”。布朗特给出的释义比起考德里的要详尽得多，并且他还试图提供词源信息。</p></blockquote><p>虽然开拓者的工作可能有些稚嫩，但这却是有重大意义的。</p><blockquote><p>在最伟大的词典《牛津英语词典》（<em>OED</em>）出版之际，第一版的编辑们却向他那本“薄薄的小册子”致以了敬意。他们称之为“最初的橡籽”，<em>OED</em>这课参天橡树正是从这粒种子成长而来的。</p></blockquote><h3 id="网络时代的OED"><a href="#网络时代的OED" class="headerlink" title="网络时代的OED"></a>网络时代的OED</h3><p>谈到Pluto被除名行星一事对字典的影响，书中的这句话可以和第十四章关于wiki中namespace的论述相映成趣。</p><blockquote><p>从命名的角度看，天上已经快拥挤不堪了。</p></blockquote><p>回到正题。随着网络的发展，传统的字典不能不受到影响。</p><blockquote><p>在他（辛普森，牛津字典编纂组成员）的书桌上，除了单词卡片以外，还有着一根连入英语神经系统的导线。通过这根导线，它可以即时连接上由遍布全球的业余词典编纂者的网络……当词典遇上了互联网，两者都将面貌一新。无论辛普森多么热爱<em>OED</em>的渊源和遗产，也不论他愿意与否，他都正在引领一场革命，改变着<em>OED</em>——它是什么，知道什么，视野如何。考德里是孤军奋战，辛普森则是处于网络之中。</p></blockquote><p><em>OED</em>的目的，一在竭力捕捉语言的流变，二在担负起固化语言的任务。这是非常困难的任务，从丰富多样的拼写，到来源单一的“罕用”词。这期间编辑们反复强调自己只是选择了“当代最常用的拼法”，但仍避免不了武断的决定。</p><p>书中还提到了<em>OED</em>在收录新词等方面的一些历程，这些是趣味性的历史事实，和我们今日的生活也有着千丝万缕的联系，中心思想是关于编辑们对完备性与多样性的追求还有对随意性的否定。</p><h3 id="搜集单词的困难"><a href="#搜集单词的困难" class="headerlink" title="搜集单词的困难"></a>搜集单词的困难</h3><p>从无意识到有意识，初期的词典编纂者充满了雄心壮志。</p><blockquote><p>在考德里，词典是一种历史快照，他的视野无法超出他当时所在的历史阶段。塞缪尔·约翰逊则更为自觉地意识到词典的历史维度，并以此作为理由之一为自己雄心勃勃的计划进行辩护。</p></blockquote><p>Samuel Johnson认为语言曾经是“不受约束”的，故他要把它从无穷无尽的流变中解放出来。</p><blockquote><p>“它（语言）在每一种文学体裁的成长过程中都不可或缺，但它自身却一直以来遭到忽视。它苦于传播过程中的放任自流，以致变得极其纷繁复杂，对于时间和时尚的暴虐也只能逆来顺受，而且还要忍受无知的腐蚀和创新的心血来潮。”</p></blockquote><p>但是，这是非常困难的过程。</p><blockquote><p>直到<em>OED</em>，词典编纂者们才开始试图揭示语言的历史全貌，因而<em>OED</em>成为了一幅历史全景图。进入电子时代后，这项事业的意义愈加彰显无疑。</p></blockquote><p>编纂者开始工作的第一步是寻找单词，并追溯其历史演化。最初的编辑们认为声望卓越而品质出众的书籍是词汇不言而喻的来源，他们征集读者将曾经的作品阅读完毕以将单词一网打尽。他们认为这片领域虽然辽阔，但还是有疆界的，故而有着一一梳理的勇气。</p><blockquote><p>但到了现在，它似乎不再是有限的了。词典编纂者们开始接受语言是无界的事实。他们熟知默里的一句名言：“英语之圆有清晰明确的中心，但没有可以辨识的圆周。”在中心的是那些无人不知的单词。而在边缘，默里认为是俚语、黑话、科学术语以及外来词，对此每个人的认识都各不相同，并且没有一个人的认知可以被认作“标准”。</p></blockquote><p>遗憾的是，默里认为“清晰明确的”中心地带实则也存在着无限性和模糊性。认识到这一点的Samuel Johnson采取的是投降的策略。</p><blockquote><p>但人类的语言世界总会有与世隔绝的地方。一个山谷里讲的语言与相邻山谷里的多少有所差别。而现在尽管山谷之间已经不像以前那样封闭，但山谷的数目却比以往要多。</p><p>如果词典编纂者用以监听语言的耳朵的灵敏度真的有一个极限，那么现在人们也没有找到这个极限所在。</p></blockquote><h3 id="网络时代的词汇"><a href="#网络时代的词汇" class="headerlink" title="网络时代的词汇"></a>网络时代的词汇</h3><p>词汇的增长常常是爆炸式的，科技等领域的发展就是一个明显的原因。词汇的发展源于需求的增长，而一些需求是细胞分裂式的，而另一些则比较微妙。Mondegreen（与网络用于“空耳”有相似）一词就有其历史的缘由：这是一份相当古老的经验，但直至歌曲普及开来以前都不会进入词典（是的，这也是meme）。其他的共同经验，大抵也是如此。（故而语言的未来，在我看来，是非常难以预判的）</p><p>词汇增长的复杂度并非是多项式程度的，也没有很好的计量方式。即便是编纂者不断提高新词入选的门槛，这仍然是一项复杂得可怕的工作。</p><blockquote><p>词汇是对共同经验的一种量度，而后者始于互连通性。在四个世纪里，说英语的人从五百万激增至十亿，但更重要的动力来自这些使用者之间以及当中存在的连接数量。数学家会说，信息不是以几何方式增长，而是以组和方式增长，后者的增长速度远快于前者。</p></blockquote><p>关于词汇，让我们以对它的分析结束这一章吧。</p><blockquote><p>全体单词的集合，也就是词汇，构成了语言的一个符号集。一方面，这是个基础性的符号集，因为按此对于任何一门语言来说，都是可识别的最小的意义单元，而且得到了该语言使用者的普遍认同。但另一方面，它又远不是基础性的，因为随着传播技术的发展，语言中的讯息可以采用比其小得多的符号集加以分解、编码和传输，比如字母、点和划、鼓声的高和低等。这些符号集是离散的，而词汇不是，它更加无序，而且在不断膨胀。事实上，词典编纂被证明是一门不适合精确计量的科学。据说英语这门最庞大、最普遍使用的语言，粗略估计拥有将近一百万个意义单元，但语言学家自己没有什么专门的标尺，将他们试图量化新单词出现的速率时，他们也倾向于向词典寻求帮助。然而，即使是最好的词典也试图逃避这样的责任，毕竟词与非词之间的边界总是模糊的，从中无法划出一条清晰的界线。</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h2><p>章节中的一些部分可以和前面的章节或是后面的章节结合起来阅读，此处仅就“两本字典”作结。</p><h3 id="考德里的字典"><a href="#考德里的字典" class="headerlink" title="考德里的字典"></a>考德里的字典</h3><p>①主要是自发的，受社会条件支配</p><p>②在“确认意义”这方面做出了一些尝试</p><p>③采用字典序这一有力的排序方式</p><h3 id="约翰逊字典与OED"><a href="#约翰逊字典与OED" class="headerlink" title="约翰逊字典与OED"></a>约翰逊字典与OED</h3><p>①主要是自觉的，认识到了规范语言的必要性</p><p>②认识到了规范与记录语言的困难之大，采取了不同的对策，达到了不同的效果</p><h3 id="其他论述"><a href="#其他论述" class="headerlink" title="其他论述"></a>其他论述</h3><p>①网络时代词汇量的增长与社会条件相关，以组和方式增长</p><p>②语言并非一个足够离散足够基础的符号集，故编纂词典并不是门可精确计量的科学</p><p>③语言并非“有序”的，其中心同边界一样不确定而会膨胀</p><p>④科学的发展首先需要解决语言的问题（林奈的工作也可以看作这点的例证）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
